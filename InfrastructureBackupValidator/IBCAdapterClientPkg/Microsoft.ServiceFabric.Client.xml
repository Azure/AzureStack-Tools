<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ServiceFabric.Client</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ServiceFabric.Client.ClientSettings">
            <summary>
            Represents connection settings for <see cref="T:Microsoft.ServiceFabric.Client.ServiceFabricClient"/>
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ClientSettings.#ctor(System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Client.ClientSettings"/> class.
            </summary>
            <param name="clientTimeout">Timespan to wait before the request times out for the client.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ClientSettings.ClientTimeout">
            <summary>
            Gets or sets the Timespan to wait before the request times out for the client.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.Constants">
            <summary>
            Contains Constant string values used by the library.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Client.Constants.DefaultApiVersionForResources">
            <summary>
            Constant string default api version for resources.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.DstsTokenHelper">
            <summary>
            Class to get Dsts Token. For internal use only by Service Fabric tooling.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.DstsTokenHelper.GetAccessTokenFromDstsAsync(Microsoft.ServiceFabric.Common.TokenServiceMetadata,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets Access token from Dsts secure token service. For internal use only by Service Fabric tooling.
            </summary>
            <param name="metadata">Token Service metadata used for secured connection to cluster.</param>
            <param name="interactive">Flag to indicate interactive logon.</param>
            <param name="cancellationToken">Cancellation Token to cancel the operation.</param>
            <returns>Access Token from DSTS.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">
            <summary>
            Exception indicating invalid credentials when connecting to cluster.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException"/> class with a specified error
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException"/> class with serialized data.
            </summary>
            <param name="info">
            The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.
            </param>
            <param name="context">
            The System.Runtime.Serialization.StreamingContext that contains contextual information
            about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">The info parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0)
            </exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">
            <summary>
            Exception thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException"/> class with a specified error
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException"/> class with serialized data.
            </summary>
            <param name="info">
            The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.
            </param>
            <param name="context">
            The System.Runtime.Serialization.StreamingContext that contains contextual information
            about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">The info parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0)
            </exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IClusterClient">
            <summary>
            Interface containing methods for performing ClusterClient operations.
            </summary>
            <summary>
            Interface containing methods for performing ClusterClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.GetImageStoreConnectionStringAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the connection string for the image store on the current cluster
            </summary>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>The connection string used by the image store</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.GetTokenServiceMetadtaAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the Metadata for the Token Service. For internal use only by Service Fabric tooling.
            </summary>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>Gets the Metadata for the Token Service.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.GetClusterManifestAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the Service Fabric cluster manifest.
            </summary>
            <remarks>
            Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include
            different node types on the cluster,
            security configurations, fault, and upgrade domain topologies, etc.
            
            These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster.
            However, most of the information in the cluster manifest
            is generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using
            Azure portal).
            
            The contents of the cluster manifest are for informational purposes only and users are not expected to take a
            dependency on the format of the file contents or its interpretation.
            </remarks>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.GetClusterHealthAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the health of a Service Fabric cluster.
            </summary>
            <remarks>
            Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
            state.
            Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and
            applications returned based on their aggregated health state.
            </remarks>
            <param name ="nodesHealthStateFilter">Allows filtering of the node health state objects returned in the result of
            cluster health query
            based on their health state. The possible values for this parameter include integer value of one of the
            following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the
            aggregated health state.
            If not specified, all entries are returned.
            The state values are flag-based enumeration, so the value could be a combination of these values obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4)
            are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="applicationsHealthStateFilter">Allows filtering of the application health state objects returned in
            the result of cluster health
            query based on their health state.
            The possible values for this parameter include integer value obtained from members or bitwise operations
            on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
            All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
            The state values are flag-based enumeration, so the value could be a combination of these values obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and
            Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="eventsHealthStateFilter">Allows filtering the collection of HealthEvent objects returned based on
            health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then
            all of the events with HealthState value of OK (2) and Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="excludeHealthStatistics">Indicates whether the health statistics should be returned as part of the
            query result. False by default.
            The statistics show the number of children entities in health state Ok, Warning, and Error.
            </param>
            <param name ="includeSystemApplicationHealthStatistics">Indicates whether the health statistics should include the
            fabric:/System application health statistics. False by default.
            If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong
            to the fabric:/System application.
            Otherwise, the query result includes health statistics only for user applications.
            The health statistics must be included in the query result for this parameter to be applied.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.GetClusterHealthUsingPolicyAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.ClusterHealthPolicies,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the health of a Service Fabric cluster using the specified policy.
            </summary>
            <remarks>
            Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
            state.
            Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and
            applications returned based on their aggregated health state.
            Use ClusterHealthPolicies to override the health policies used to evaluate the health.
            </remarks>
            <param name ="nodesHealthStateFilter">Allows filtering of the node health state objects returned in the result of
            cluster health query
            based on their health state. The possible values for this parameter include integer value of one of the
            following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the
            aggregated health state.
            If not specified, all entries are returned.
            The state values are flag-based enumeration, so the value could be a combination of these values obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4)
            are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="applicationsHealthStateFilter">Allows filtering of the application health state objects returned in
            the result of cluster health
            query based on their health state.
            The possible values for this parameter include integer value obtained from members or bitwise operations
            on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
            All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
            The state values are flag-based enumeration, so the value could be a combination of these values obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and
            Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="eventsHealthStateFilter">Allows filtering the collection of HealthEvent objects returned based on
            health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then
            all of the events with HealthState value of OK (2) and Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="excludeHealthStatistics">Indicates whether the health statistics should be returned as part of the
            query result. False by default.
            The statistics show the number of children entities in health state Ok, Warning, and Error.
            </param>
            <param name ="includeSystemApplicationHealthStatistics">Indicates whether the health statistics should include the
            fabric:/System application health statistics. False by default.
            If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong
            to the fabric:/System application.
            Otherwise, the query result includes health statistics only for user applications.
            The health statistics must be included in the query result for this parameter to be applied.
            </param>
            <param name ="clusterHealthPolicies">Describes the health policies used to evaluate the cluster health.
            If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default
            cluster health policy.
            By default, each application is evaluated using its specific application health policy, defined in the application
            manifest, or the default health policy, if no policy is defined in manifest.
            If the application health policy map is specified, and it has an entry for an application, the specified
            application health policy
            is used to evaluate the application health.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.GetClusterHealthChunkAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the health of a Service Fabric cluster using health chunks.
            </summary>
            <remarks>
            Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the
            cluster, but none of the cluster entities.
            To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify
            the cluster health chunk query description.
            </remarks>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.GetClusterHealthChunkUsingPolicyAndAdvancedFiltersAsync(Microsoft.ServiceFabric.Common.ClusterHealthChunkQueryDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the health of a Service Fabric cluster using health chunks.
            </summary>
            <remarks>
            Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input
            cluster health chunk query description.
            The query description allows users to specify health policies for evaluating the cluster and its children.
            Users can specify very flexible filters to select which cluster entities to return. The selection can be done based
            on the entities health state and based on the hierarchy.
            The query can return multi-level children of the entities based on the specified filters. For example, it can
            return one application with a specified name, and for this application, return
            only services that are in Error or Warning, and all partitions and replicas for one of these services.
            </remarks>
            <param name ="clusterHealthChunkQueryDescription">Describes the cluster and application health policies used to
            evaluate the cluster health and the filters to select which cluster entities to be returned.
            If the cluster health policy is present, it is used to evaluate the cluster events and the cluster nodes. If not
            present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default
            cluster health policy.
            By default, each application is evaluated using its specific application health policy, defined in the application
            manifest, or the default health policy, if no policy is defined in manifest.
            If the application health policy map is specified, and it has an entry for an application, the specified
            application health policy
            is used to evaluate the application health.
            Users can specify very flexible filters to select which cluster entities to include in response. The selection can
            be done based on the entities health state and based on the hierarchy.
            The query can return multi-level children of the entities based on the specified filters. For example, it can
            return one application with a specified name, and for this application, return
            only services that are in Error or Warning, and all partitions and replicas for one of these services.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.ReportClusterHealthAsync(Microsoft.ServiceFabric.Common.HealthInformation,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Sends a health report on the Service Fabric cluster.
            </summary>
            <remarks>
            Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the
            health report and property on which it is reported.
            The report is sent to a Service Fabric gateway node, which forwards to the health store.
            The report may be accepted by the gateway, but rejected by the health store after extra validation.
            For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
            To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears
            in the HealthEvents section.
            </remarks>
            <param name ="healthInformation">Describes the health information for the health report. This information needs to
            be present in all of the health reports sent to the health manager.</param>
            <param name ="immediate">A flag that indicates whether the report should be sent immediately.
            A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
            If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of
            the fabric client settings that the HTTP Gateway Application is using.
            This is useful for critical reports that should be sent as soon as possible.
            Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is
            closed or the message doesn't reach the Gateway.
            If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway.
            Therefore, it will be batched according to the HealthReportSendInterval configuration.
            This is the recommended setting because it allows the health client to optimize health reporting messages to health
            store as well as health report processing.
            By default, reports are not sent immediately.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.GetProvisionedFabricCodeVersionInfoListAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets a list of fabric code versions that are provisioned in a Service Fabric cluster.
            </summary>
            <remarks>
            Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter
            CodeVersion can be used to optionally filter the output to only that particular version.
            </remarks>
            <param name ="codeVersion">The product version of Service Fabric.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.GetProvisionedFabricConfigVersionInfoListAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets a list of fabric config versions that are provisioned in a Service Fabric cluster.
            </summary>
            <remarks>
            Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter
            ConfigVersion can be used to optionally filter the output to only that particular version.
            </remarks>
            <param name ="configVersion">The config version of Service Fabric.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.GetClusterUpgradeProgressAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the progress of the current cluster upgrade.
            </summary>
            <remarks>
            Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last
            state of the previous cluster upgrade.
            </remarks>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.GetClusterConfigurationAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the Service Fabric standalone cluster configuration.
            </summary>
            <remarks>
            The cluster configuration contains properties of the cluster that include different node types on the cluster,
            security configurations, fault, and upgrade domain topologies, etc.
            </remarks>
            <param name ="configurationApiVersion">The API version of the Standalone cluster json configuration.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.GetClusterConfigurationUpgradeStatusAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the cluster configuration upgrade status of a Service Fabric standalone cluster.
            </summary>
            <remarks>
            Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
            </remarks>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.GetUpgradeOrchestrationServiceStateAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the service state of Service Fabric Upgrade Orchestration Service.
            </summary>
            <remarks>
            Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support
            purposes.
            </remarks>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.SetUpgradeOrchestrationServiceStateAsync(Microsoft.ServiceFabric.Common.UpgradeOrchestrationServiceState,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Update the service state of Service Fabric Upgrade Orchestration Service.
            </summary>
            <remarks>
            Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support
            purposes.
            </remarks>
            <param name ="upgradeOrchestrationServiceState">Service state of Service Fabric Upgrade Orchestration
            Service.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.ProvisionClusterAsync(Microsoft.ServiceFabric.Common.ProvisionFabricDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Provision the code or configuration packages of a Service Fabric cluster.
            </summary>
            <remarks>
            Validate and provision the code or configuration packages of a Service Fabric cluster.
            </remarks>
            <param name ="provisionFabricDescription">Describes the parameters for provisioning a cluster.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.UnprovisionClusterAsync(Microsoft.ServiceFabric.Common.UnprovisionFabricDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Unprovision the code or configuration packages of a Service Fabric cluster.
            </summary>
            <remarks>
            It is supported to unprovision code and configuration separately.
            </remarks>
            <param name ="unprovisionFabricDescription">Describes the parameters for unprovisioning a cluster.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.RollbackClusterUpgradeAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Roll back the upgrade of a Service Fabric cluster.
            </summary>
            <remarks>
            Roll back the code or configuration upgrade of a Service Fabric cluster.
            </remarks>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.ResumeClusterUpgradeAsync(Microsoft.ServiceFabric.Common.ResumeClusterUpgradeDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Make the cluster upgrade move on to the next upgrade domain.
            </summary>
            <remarks>
            Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
            </remarks>
            <param name ="resumeClusterUpgradeDescription">Describes the parameters for resuming a cluster upgrade.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.StartClusterUpgradeAsync(Microsoft.ServiceFabric.Common.StartClusterUpgradeDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Start upgrading the code or configuration version of a Service Fabric cluster.
            </summary>
            <remarks>
            Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric
            cluster if the parameters are valid.
            </remarks>
            <param name ="startClusterUpgradeDescription">Describes the parameters for starting a cluster upgrade.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.StartClusterConfigurationUpgradeAsync(Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Start upgrading the configuration of a Service Fabric standalone cluster.
            </summary>
            <remarks>
            Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the
            parameters are valid.
            </remarks>
            <param name ="clusterConfigurationUpgradeDescription">Parameters for a standalone cluster configuration
            upgrade.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.UpdateClusterUpgradeAsync(Microsoft.ServiceFabric.Common.UpdateClusterUpgradeDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Update the upgrade parameters of a Service Fabric cluster upgrade.
            </summary>
            <remarks>
            Update the upgrade parameters used during a Service Fabric cluster upgrade.
            </remarks>
            <param name ="updateClusterUpgradeDescription">Parameters for updating a cluster upgrade.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.GetAadMetadataAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the Azure Active Directory metadata used for secured connection to cluster.
            </summary>
            <remarks>
            Gets the Azure Active Directory metadata used for secured connection to cluster.
            This API is not supposed to be called separately. It provides information needed to set up an Azure Active
            Directory secured connection with a Service Fabric cluster.
            </remarks>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.GetClusterVersionAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the current Service Fabric cluster version.
            </summary>
            <remarks>
            If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target
            cluster runtime versions.
            </remarks>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.GetClusterLoadAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the load of a Service Fabric cluster.
            </summary>
            <remarks>
            Retrieves the load information of a Service Fabric cluster for all the metrics that have load or capacity defined.
            </remarks>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IClusterClient.ToggleVerboseServicePlacementHealthReportingAsync(System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Changes the verbosity of service placement health reporting.
            </summary>
            <remarks>
            If verbosity is set to true, then detailed health reports will be generated when replicas cannot be placed or
            dropped.
            If verbosity is set to false, then no health reports will be generated when replicas cannot be placed or dropped.
            </remarks>
            <param name ="enabled">The verbosity of service placement health reporting.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IImageStoreClient">
            <summary>
            Interface containing methods for performing ImageStoreClient operataions.
            </summary>
            <summary>
            Interface containing methods for performing ImageStoreClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IImageStoreClient.UploadFileAsync(System.Byte[],System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Uploads contents of the file to the image store.
            </summary>
            <remarks>
            Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the
            connection fails. The file's data will added to the request body. The contents will be uploaded to the
            specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is
            an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are
            uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't
            aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it
            last, to let the image store service know that the folder is complete.
            </remarks>
            <param name="fileContentsToUpload">Byte array containing file contents to upload.</param>
            <param name ="pathInImageStore">Relative path to file or folder in the image store from its root.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This specifies the time
            duration that the client is willing to wait for the requested operation to complete. The default value for this
            parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/> and Error Message <see cref="P:Microsoft.ServiceFabric.Common.FabricError.Message"/> indicating the failure.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IImageStoreClient.UploadFileChunkAsync(System.Byte[],System.String,System.Nullable{System.Guid},System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Uploads a file chunk to the image store relative path.
            </summary>
            <remarks>
            Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This
            API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch
            whenever there is a network interruption. Use this option if the file size is large.
            
            To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the
            image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store
            relative path already exists, it will be overwritten when the upload session commits.
            </remarks>
            <param name="fileChunkToUpload">Byte array containing file chunk to upload.</param>
            <param name ="pathInImageStore">Relative path to file or folder in the image store from its root.</param>
            <param name ="sessionId">A GUID generated by the user for a file uploading. It identifies an image store upload
            session which keeps track of all file chunks until it is committed.</param>
            <param name ="startBytePosition">The start position of the chunk in byte array represnting file contents.</param>
            <param name ="endBytePosition">The end position of the chunk in byte array representing file contents.</param>
            <param name="length">The size, in bytes, of the file for which chunk is to be uploaded.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This specifies the time
            duration that the client is willing to wait for the requested operation to complete. The default value for this
            parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <remarks>
            When uploading file chunks to the image store,  the Content Range information is sent to server.
            Example: if the total file length is 20,000 bytes, and chunk being uploaded is for first 5,000 bytes,
            value of <paramref name="startBytePosition"/> would be 0, value of <paramref name="endBytePosition"/> would be 4999 and value of
            <paramref name="length"/> would be 5000.
            </remarks>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/> and Error Message <see cref="P:Microsoft.ServiceFabric.Common.FabricError.Message"/> indicating the failure.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IImageStoreClient.UploadApplicationPackageAsync(System.String,System.Boolean,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Uploads application package to Service Fabric image store after compressing all sub-directories under the service directory.
            </summary>
            <param name="applicationPackagePath">Absolute path to application package.</param>
            <param name="compressPackage">Compress the package before uploading.</param>
            <param name="applicationPackagePathInImageStore">Relative path in the image store where the application package should be copied.
            If this is not specified, it defaults to the folder name as specified by applicationPackagePath.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This specifies the time
            duration that the client is willing to wait for the requested file upload operation for each chunk in the file to complete. The default value for this
            parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/> and Error Message <see cref="P:Microsoft.ServiceFabric.Common.FabricError.Message"/> indicating the failure.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IImageStoreClient.GetImageStoreContentAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the image store content information.
            </summary>
            <remarks>
            Returns the information about the image store content at the specified contentPath. The contentPath is relative to
            the root of the image store.
            </remarks>
            <param name ="contentPath">Relative path to file or folder in the image store from its root.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IImageStoreClient.DeleteImageStoreContentAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Deletes existing image store content.
            </summary>
            <remarks>
            Deletes existing image store content being found within the given image store relative path. This command can be
            used to delete uploaded application packages once they are provisioned.
            </remarks>
            <param name ="contentPath">Relative path to file or folder in the image store from its root.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IImageStoreClient.GetImageStoreRootContentAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the content information at the root of the image store.
            </summary>
            <remarks>
            Returns the information about the image store content at the root of the image store.
            </remarks>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IImageStoreClient.CopyImageStoreContentAsync(Microsoft.ServiceFabric.Common.ImageStoreCopyDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Copies image store content internally
            </summary>
            <remarks>
            Copies the image store content from the source image store relative path to the destination image store relative
            path.
            </remarks>
            <param name ="imageStoreCopyDescription">Describes the copy description for the image store.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IImageStoreClient.DeleteImageStoreUploadSessionAsync(System.Nullable{System.Guid},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels an image store upload session.
            </summary>
            <remarks>
            The DELETE request will cause the existing upload session to expire and remove any previously uploaded file chunks.
            </remarks>
            <param name ="sessionId">A GUID generated by the user for a file uploading. It identifies an image store upload
            session which keeps track of all file chunks until it is committed.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IImageStoreClient.CommitImageStoreUploadSessionAsync(System.Nullable{System.Guid},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Commit an image store upload session.
            </summary>
            <remarks>
            When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the
            upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last
            chunk received.
            </remarks>
            <param name ="sessionId">A GUID generated by the user for a file uploading. It identifies an image store upload
            session which keeps track of all file chunks until it is committed.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IImageStoreClient.GetImageStoreUploadSessionByIdAsync(System.Nullable{System.Guid},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the image store upload session by ID.
            </summary>
            <remarks>
            Gets the image store upload session identified by the given ID. User can query the upload session at any time
            during uploading.
            </remarks>
            <param name ="sessionId">A GUID generated by the user for a file uploading. It identifies an image store upload
            session which keeps track of all file chunks until it is committed.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IImageStoreClient.GetImageStoreUploadSessionByPathAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the image store upload session by relative path.
            </summary>
            <remarks>
            Gets the image store upload session associated with the given image store relative path. User can query the upload
            session at any time during uploading.
            </remarks>
            <param name ="contentPath">Relative path to file or folder in the image store from its root.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IImageStoreClient.GetImageStoreRootFolderSizeAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the folder size at the root of the image store.
            </summary>
            <remarks>
            Returns the total size of files at the root and children folders in image store.
            </remarks>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IImageStoreClient.GetImageStoreFolderSizeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the size of a folder in image store
            </summary>
            <remarks>
            Gets the total size of file under a image store folder, specified by contentPath. The contentPath is relative to
            the root of the image store.
            </remarks>
            <param name ="contentPath">Relative path to file or folder in the image store from its root.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IImageStoreClient.GetImageStoreInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the overall ImageStore information
            </summary>
            <remarks>
            Returns information about the primary ImageStore replica, such as disk capacity and available disk space at the
            node it is on, and several categories of the ImageStore's file system usage.
            </remarks>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IMeshApplicationsClient">
            <summary>
            Interface containing methods for performing ApplicationResourceClient operations.
            </summary>
            <summary>
            Interface containing methods for performing MeshApplicationsClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshApplicationsClient.CreateOrUpdateAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates or updates an application with the given name and description.
            </summary>
            <remarks>
            Creates an application with the specified name and description. If an application with the same name already
            exists, then its description are updated to the one indicated in this request.
            </remarks>        
            <param name="applicationResourceName">Name of Service Fabric Mesh Application.</param>
            <param name="jsonDescription">String representing the JSON description of the application to be created or updated.</param>
            <param name="apiVersion">Api version for the server.</param>
            <param name="cancellationToken">Cancels the client-side operation.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode" />, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshApplicationsClient.CreateOrUpdateAsync(System.String,Microsoft.ServiceFabric.Common.ApplicationResourceDescription,System.Threading.CancellationToken)">
            <summary>
            Creates or updates a Application resource.
            </summary>
            <remarks>
            Creates a Application resource with the specified name, description and properties. If Application resource with
            the same name exists, then it is updated with the specified description and properties.
            </remarks>
            <param name ="applicationResourceName">The identity of the application.</param>
            <param name ="applicationResourceDescription">Description for creating a Application resource.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshApplicationsClient.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the Application resource with the given name.
            </summary>
            <remarks>
            Gets the information about the Application resource with the given name. The information include the description
            and other properties of the Application.
            </remarks>
            <param name ="applicationResourceName">The identity of the application.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshApplicationsClient.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the Application resource.
            </summary>
            <remarks>
            Deletes the Application resource identified by the name.
            </remarks>
            <param name ="applicationResourceName">The identity of the application.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshApplicationsClient.ListAsync(System.Threading.CancellationToken)">
            <summary>
            Lists all the application resources.
            </summary>
            <remarks>
            Gets the information about all application resources in a given resource group. The information include the
            description and other properties of the Application.
            </remarks>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshApplicationsClient.GetUpgradeProgressAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the progress of the latest upgrade performed on this application resource.
            </summary>
            <remarks>
            Gets the upgrade progress information about the Application resource with the given name. The information include
            percentage of completion and other upgrade state information of the Application resource.
            </remarks>
            <param name ="applicationResourceName">The identity of the application.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IMeshGatewaysClient">
            <summary>
            Interface containing methods for performing MeshGatewaysClient operations.
            </summary>
            <summary>
            Interface containing methods for performing MeshGatewaysClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshGatewaysClient.CreateOrUpdateAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates or updates a Gateway resource.
            </summary>
            <remarks>
            Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same
            name exists, then it is updated with the specified description and properties. Use Gateway resource to provide
            public connectivity to application services.
            </remarks>
            <param name ="gatewayResourceName">The identity of the gateway.</param>
            <param name="jsonDescription">String representing the JSON description of the gateway resource to be created or updated.</param>
            <param name="apiVersion">Api version for the server.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshGatewaysClient.CreateOrUpdateAsync(System.String,Microsoft.ServiceFabric.Common.GatewayResourceDescription,System.Threading.CancellationToken)">
            <summary>
            Creates or updates a Gateway resource.
            </summary>
            <remarks>
            Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same
            name exists, then it is updated with the specified description and properties. Use Gateway resource to provide
            public connectivity to application services.
            </remarks>
            <param name ="gatewayResourceName">The identity of the gateway.</param>
            <param name ="gatewayResourceDescription">Description for creating a Gateway resource.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshGatewaysClient.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the Gateway resource with the given name.
            </summary>
            <remarks>
            Gets the information about the Gateway resource with the given name. The information include the description and
            other properties of the Gateway.
            </remarks>
            <param name ="gatewayResourceName">The identity of the gateway.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshGatewaysClient.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the Gateway resource.
            </summary>
            <remarks>
            Deletes the Gateway resource identified by the name.
            </remarks>
            <param name ="gatewayResourceName">The identity of the gateway.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshGatewaysClient.ListAsync(System.Threading.CancellationToken)">
            <summary>
            Lists all the gateway resources.
            </summary>
            <remarks>
            Gets the information about all gateway resources in a given resource group. The information include the description
            and other properties of the Gateway.
            </remarks>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IMeshNetworksClient">
            <summary>
            Interface containing methods for performing MeshNetworksClient operations.
            </summary>
            <summary>
            Interface containing methods for performing MeshNetworksClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshNetworksClient.CreateOrUpdateAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates or updates a Network resource.
            </summary>
            <remarks>
            Creates a Network resource with the specified name, description and properties. If Network resource with the same
            name exists, then it is updated with the specified description and properties. Network resource provides
            connectivity between application services.
            </remarks>
            <param name ="networkResourceName">The identity of the network.</param>
            <param name="jsonDescription">String representing the JSON description of the network resource to be created or updated.</param>
            <param name="apiVersion">Api version for the server.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshNetworksClient.CreateOrUpdateAsync(System.String,Microsoft.ServiceFabric.Common.NetworkResourceDescription,System.Threading.CancellationToken)">
            <summary>
            Creates or updates a Network resource.
            </summary>
            <remarks>
            Creates a Network resource with the specified name, description and properties. If Network resource with the same
            name exists, then it is updated with the specified description and properties. Network resource provides
            connectivity between application services.
            </remarks>
            <param name ="networkResourceName">The identity of the network.</param>
            <param name ="networkResourceDescription">Description for creating a Network resource.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshNetworksClient.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the Network resource with the given name.
            </summary>
            <remarks>
            Gets the information about the Network resource with the given name. The information include the description and
            other properties of the Network.
            </remarks>
            <param name ="networkResourceName">The identity of the network.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshNetworksClient.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the Network resource.
            </summary>
            <remarks>
            Deletes the Network resource identified by the name.
            </remarks>
            <param name ="networkResourceName">The identity of the network.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshNetworksClient.ListAsync(System.Threading.CancellationToken)">
            <summary>
            Lists all the network resources.
            </summary>
            <remarks>
            Gets the information about all network resources in a given resource group. The information include the description
            and other properties of the Network.
            </remarks>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IMeshSecretsClient">
            <summary>
            Interface containing methods for performing MeshSecretsClient operations.
            </summary>
            <summary>
            Interface containing methods for performing MeshSecretsClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshSecretsClient.CreateOrUpdateAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates or updates a secret resource.
            </summary>
            <remarks>
            Creates a secret resource with the specified name, description and metadata describing its value(s). If a secret
            resource with the same name does not exist, a new resource is created with specified properties.
            If a secret resource with the same name exists, its description is updated. Updating an existing secret resource
            may not change its kind, name or content type.
            </remarks>
            <param name ="secretResourceName">Service Fabric gateway resource name.</param>        
            <param name="jsonDescription">String representing the JSON description of the secret resource to be created or updated.</param>
            <param name="apiVersion">Api version for the server.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshSecretsClient.CreateOrUpdateAsync(System.String,Microsoft.ServiceFabric.Common.SecretResourceDescription,System.Threading.CancellationToken)">
            <summary>
            Creates or updates a Secret resource.
            </summary>
            <remarks>
            Creates a Secret resource with the specified name, description and properties. If Secret resource with the same
            name exists, then it is updated with the specified description and properties. Once created, the kind and
            contentType of a secret resource cannot be updated.
            </remarks>
            <param name ="secretResourceName">The name of the secret resource.</param>
            <param name ="secretResourceDescription">Description for creating a secret resource.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshSecretsClient.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the Secret resource with the given name.
            </summary>
            <remarks>
            Gets the information about the Secret resource with the given name. The information include the description and
            other properties of the Secret.
            </remarks>
            <param name ="secretResourceName">The name of the secret resource.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshSecretsClient.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the Secret resource.
            </summary>
            <remarks>
            Deletes the specified Secret resource and all of its named values.
            </remarks>
            <param name ="secretResourceName">The name of the secret resource.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshSecretsClient.ListAsync(System.Threading.CancellationToken)">
            <summary>
            Lists all the secret resources.
            </summary>
            <remarks>
            Gets the information about all secret resources in a given resource group. The information include the description
            and other properties of the Secret.
            </remarks>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IMeshSecretValuesClient">
            <summary>
            Interface containing methods for performing MeshSecretsClient operations.
            </summary>
            <summary>
            Interface containing methods for performing MeshSecretValuesClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshSecretValuesClient.AddValueAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Adds the specified value as a new version of the specified secret resource.
            </summary>
            <remarks>
            Creates a new value of the specified secret resource. The name of the value is typically the version identifier.
            Once created the value cannot be changed.
            </remarks>
            <param name ="secretResourceName">The name of the secret resource.</param>
            <param name ="secretValueResourceName">The name of the secret resource value which is typically the version
            identifier for the value.</param>
            <param name="jsonDescription">String representing the JSON description of the secret value resource to be created or updated.</param>
            <param name="apiVersion">Api version for the server.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshSecretValuesClient.AddValueAsync(System.String,System.String,Microsoft.ServiceFabric.Common.SecretValueResourceDescription,System.Threading.CancellationToken)">
            <summary>
            Adds the specified value as a new version of the specified secret resource.
            </summary>
            <remarks>
            Creates a new value of the specified secret resource. The name of the value is typically the version identifier.
            Once created the value cannot be changed.
            </remarks>
            <param name ="secretResourceName">The name of the secret resource.</param>
            <param name ="secretValueResourceName">The name of the secret resource value which is typically the version
            identifier for the value.</param>
            <param name ="secretValueResourceDescription">Description for creating a value of a secret resource.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshSecretValuesClient.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the specified secret value resource.
            </summary>
            <remarks>
            Get the information about the specified named secret value resources. The information does not include the actual
            value of the secret.
            </remarks>
            <param name ="secretResourceName">The name of the secret resource.</param>
            <param name ="secretValueResourceName">The name of the secret resource value which is typically the version
            identifier for the value.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshSecretValuesClient.DeleteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified  value of the named secret resource.
            </summary>
            <remarks>
            Deletes the secret value resource identified by the name. The name of the resource is typically the version
            associated with that value. Deletion will fail if the specified value is in use.
            </remarks>
            <param name ="secretResourceName">The name of the secret resource.</param>
            <param name ="secretValueResourceName">The name of the secret resource value which is typically the version
            identifier for the value.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshSecretValuesClient.ListAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            List names of all values of the specified secret resource.
            </summary>
            <remarks>
            Gets information about all secret value resources of the specified secret resource. The information includes the
            names of the secret value resources, but not the actual values.
            </remarks>
            <param name ="secretResourceName">The name of the secret resource.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshSecretValuesClient.ShowAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Lists the specified value of the secret resource.
            </summary>
            <remarks>
            Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
            </remarks>
            <param name ="secretResourceName">The name of the secret resource.</param>
            <param name ="secretValueResourceName">The name of the secret resource value which is typically the version
            identifier for the value.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IMeshVolumesClient">
            <summary>
            Interface containing methods for performing VolumeResourceClient operations.
            </summary>
            <summary>
            Interface containing methods for performing MeshVolumesClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshVolumesClient.CreateOrUpdateAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates or updates a volume resource.
            </summary>
            <remarks>
            Creates a volume resource with the specified name and description. If a volume with the same name already exists,
            then its description is updated to the one indicated in this request.
            Use volume resources to create private volume and configure public connectivity for services within your
            application.
            </remarks>        
            <param name ="volumeResourceName">Service Fabric Volume resource name.</param>        
            <param name="jsonDescription">String representing the JSON description of the volume resource to be created or updated.</param>
            <param name="apiVersion">Api version for the server.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as volume connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshVolumesClient.CreateOrUpdateAsync(System.String,Microsoft.ServiceFabric.Common.VolumeResourceDescription,System.Threading.CancellationToken)">
            <summary>
            Creates or updates a Volume resource.
            </summary>
            <remarks>
            Creates a Volume resource with the specified name, description and properties. If Volume resource with the same
            name exists, then it is updated with the specified description and properties.
            </remarks>
            <param name ="volumeResourceName">The identity of the volume.</param>
            <param name ="volumeResourceDescription">Description for creating a Volume resource.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshVolumesClient.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the Volume resource with the given name.
            </summary>
            <remarks>
            Gets the information about the Volume resource with the given name. The information include the description and
            other properties of the Volume.
            </remarks>
            <param name ="volumeResourceName">The identity of the volume.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshVolumesClient.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the Volume resource.
            </summary>
            <remarks>
            Deletes the Volume resource identified by the name.
            </remarks>
            <param name ="volumeResourceName">The identity of the volume.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshVolumesClient.ListAsync(System.Threading.CancellationToken)">
            <summary>
            Lists all the volume resources.
            </summary>
            <remarks>
            Gets the information about all volume resources in a given resource group. The information include the description
            and other properties of the Volume.
            </remarks>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IPropertyManagementClient">
            <summary>
            Interface containing methods for performing PropertyManagementClient operations.
            </summary>
            <summary>
            Interface containing methods for performing PropertyManagementClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPropertyManagementClient.NameExistsAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Returns whether the Service Fabric name exists.
            </summary>        
            <param name ="nameId">The Service Fabric name, without the 'fabric:' URI scheme.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPropertyManagementClient.CreateNameAsync(Microsoft.ServiceFabric.Common.FabricName,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Creates a Service Fabric name.
            </summary>
            <remarks>
            Creates the specified Service Fabric name.
            </remarks>
            <param name ="fabricName">The Service Fabric name.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPropertyManagementClient.GetNameExistsInfoAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Returns whether the Service Fabric name exists.
            </summary>
            <remarks>
            Returns whether the specified Service Fabric name exists.
            </remarks>
            <param name ="nameId">The Service Fabric name, without the 'fabric:' URI scheme.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPropertyManagementClient.DeleteNameAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Deletes a Service Fabric name.
            </summary>
            <remarks>
            Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with
            child properties will fail.
            </remarks>
            <param name ="nameId">The Service Fabric name, without the 'fabric:' URI scheme.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPropertyManagementClient.GetSubNameInfoListAsync(System.String,System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Enumerates all the Service Fabric names under a given name.
            </summary>
            <remarks>
            Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of
            results is returned as well as a continuation token, which can be used to get the next page. Querying a name that
            doesn't exist will fail.
            </remarks>
            <param name ="nameId">The Service Fabric name, without the 'fabric:' URI scheme.</param>
            <param name ="recursive">Allows specifying that the search performed should be recursive.</param>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPropertyManagementClient.GetPropertyInfoListAsync(System.String,System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets information on all Service Fabric properties under a given name.
            </summary>
            <remarks>
            A Service Fabric name can have one or more named properties that store custom information. This operation gets the
            information about these properties in a paged list. The information includes name, value, and metadata about each
            of the properties.
            </remarks>
            <param name ="nameId">The Service Fabric name, without the 'fabric:' URI scheme.</param>
            <param name ="includeValues">Allows specifying whether to include the values of the properties returned. True if
            values should be returned with the metadata; False to return only property metadata.</param>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPropertyManagementClient.PutPropertyAsync(System.String,Microsoft.ServiceFabric.Common.PropertyDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Creates or updates a Service Fabric property.
            </summary>
            <remarks>
            Creates or updates the specified Service Fabric property under a given name.
            </remarks>
            <param name ="nameId">The Service Fabric name, without the 'fabric:' URI scheme.</param>
            <param name ="propertyDescription">Describes the Service Fabric property to be created.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPropertyManagementClient.GetPropertyInfoAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the specified Service Fabric property.
            </summary>
            <remarks>
            Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
            </remarks>
            <param name ="nameId">The Service Fabric name, without the 'fabric:' URI scheme.</param>
            <param name ="propertyName">Specifies the name of the property to get.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPropertyManagementClient.DeletePropertyAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Deletes the specified Service Fabric property.
            </summary>
            <remarks>
            Deletes the specified Service Fabric property under a given name. A property must be created before it can be
            deleted.
            </remarks>
            <param name ="nameId">The Service Fabric name, without the 'fabric:' URI scheme.</param>
            <param name ="propertyName">Specifies the name of the property to get.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPropertyManagementClient.SubmitPropertyBatchAsync(System.String,Microsoft.ServiceFabric.Common.PropertyBatchDescriptionList,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Submits a property batch.
            </summary>
            <remarks>
            Submits a batch of property operations. Either all or none of the operations will be committed.
            </remarks>
            <param name ="nameId">The Service Fabric name, without the 'fabric:' URI scheme.</param>
            <param name ="propertyBatchDescriptionList">Describes the property batch operations to be submitted.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IApplicationClient">
            <summary>
            Interface containing methods for performing ApplicationClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationClient.CreateApplicationAsync(Microsoft.ServiceFabric.Common.ApplicationDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Creates a Service Fabric application.
            </summary>
            <remarks>
            Creates a Service Fabric application using the specified description.
            </remarks>
            <param name ="applicationDescription">Description for creating an application.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationClient.DeleteApplicationAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Deletes an existing Service Fabric application.
            </summary>
            <remarks>
            An application must be created before it can be deleted. Deleting an application will delete all services that are
            part of that application. By default, Service Fabric will try to close service replicas in a graceful manner and
            then delete the service. However, if a service is having issues closing the replica gracefully, the delete
            operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence
            and forcefully delete the application and all of its services.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="forceRemove">Remove a Service Fabric application or service forcefully without going through the
            graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which
            delete is timing out due to issues in the service code that prevents graceful close of replicas.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationClient.GetApplicationLoadInfoAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets load information about a Service Fabric application.
            </summary>
            <remarks>
            Returns the load information about the application that was created or in the process of being created in the
            Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name,
            minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load
            metric information about the application.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationClient.GetApplicationInfoListAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the list of applications created in the Service Fabric cluster that match the specified filters.
            </summary>
            <remarks>
            Gets the information about the applications that were created or in the process of being created in the Service
            Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and other
            details about the application. If the applications do not fit in a page, one page of results is returned as well as
            a continuation token, which can be used to get the next page. Filters ApplicationTypeName and
            ApplicationDefinitionKindFilter cannot be specified at the same time.
            </remarks>
            <param name ="applicationDefinitionKindFilter">Used to filter on ApplicationDefinitionKind, which is the mechanism
            used to define a Service Fabric application.
            - Default - Default value, which performs the same function as selecting "All". The value is 0.
            - All - Filter that matches input with any ApplicationDefinitionKind value. The value is 65535.
            - ServiceFabricApplicationDescription - Filter that matches input with ApplicationDefinitionKind value
            ServiceFabricApplicationDescription. The value is 1.
            - Compose - Filter that matches input with ApplicationDefinitionKind value Compose. The value is 2.
            </param>
            <param name ="applicationTypeName">The application type name used to filter the applications to query for. This
            value should not contain the application type version.</param>
            <param name ="excludeApplicationParameters">The flag that specifies whether application parameters will be excluded
            from the result.</param>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="maxResults">The maximum number of results to be returned as part of the paged queries. This parameter
            defines the upper bound on the number of results returned. The results returned can be less than the specified
            maximum results if they do not fit in the message as per the max message size restrictions defined in the
            configuration. If this parameter is zero or not specified, the paged query includes as many results as possible
            that fit in the return message.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationClient.GetApplicationInfoAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets information about a Service Fabric application.
            </summary>
            <remarks>
            Returns the information about the application that was created or in the process of being created in the Service
            Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type,
            status, parameters, and other details about the application.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="excludeApplicationParameters">The flag that specifies whether application parameters will be excluded
            from the result.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationClient.GetApplicationHealthAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the health of the service fabric application.
            </summary>
            <remarks>
            Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning health
            state. If the entity is not found in the health store, it will return Error.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="eventsHealthStateFilter">Allows filtering the collection of HealthEvent objects returned based on
            health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then
            all of the events with HealthState value of OK (2) and Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="deployedApplicationsHealthStateFilter">Allows filtering of the deployed applications health state
            objects returned in the result of application health query based on their health state.
            The possible values for this parameter include integer value of one of the following health states. Only deployed
            applications that match the filter will be returned.
            All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are
            returned.
            The state values are flag-based enumeration, so the value could be a combination of these values, obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2)
            and Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="servicesHealthStateFilter">Allows filtering of the services health state objects returned in the
            result of services health query based on their health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these values,
            obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with
            HealthState value of OK (2) and Warning (4) will be returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="excludeHealthStatistics">Indicates whether the health statistics should be returned as part of the
            query result. False by default.
            The statistics show the number of children entities in health state Ok, Warning, and Error.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationClient.GetApplicationHealthUsingPolicyAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.ApplicationHealthPolicy,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the health of a Service Fabric application using the specified policy.
            </summary>
            <remarks>
            Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health
            events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies
            used to evaluate the health.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="eventsHealthStateFilter">Allows filtering the collection of HealthEvent objects returned based on
            health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then
            all of the events with HealthState value of OK (2) and Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="deployedApplicationsHealthStateFilter">Allows filtering of the deployed applications health state
            objects returned in the result of application health query based on their health state.
            The possible values for this parameter include integer value of one of the following health states. Only deployed
            applications that match the filter will be returned.
            All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are
            returned.
            The state values are flag-based enumeration, so the value could be a combination of these values, obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2)
            and Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="servicesHealthStateFilter">Allows filtering of the services health state objects returned in the
            result of services health query based on their health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these values,
            obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with
            HealthState value of OK (2) and Warning (4) will be returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="excludeHealthStatistics">Indicates whether the health statistics should be returned as part of the
            query result. False by default.
            The statistics show the number of children entities in health state Ok, Warning, and Error.
            </param>
            <param name ="applicationHealthPolicy">Describes the health policies used to evaluate the health of an application
            or one of its children.
            If not present, the health evaluation uses the health policy from application manifest or the default health
            policy.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationClient.ReportApplicationHealthAsync(System.String,Microsoft.ServiceFabric.Common.HealthInformation,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Sends a health report on the Service Fabric application.
            </summary>
            <remarks>
            Reports health state of the specified Service Fabric application. The report must contain the information about the
            source of the health report and property on which it is reported.
            The report is sent to a Service Fabric gateway Application, which forwards to the health store.
            The report may be accepted by the gateway, but rejected by the health store after extra validation.
            For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
            To see whether the report was applied in the health store, get application health and check that the report appears
            in the HealthEvents section.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="healthInformation">Describes the health information for the health report. This information needs to
            be present in all of the health reports sent to the health manager.</param>
            <param name ="immediate">A flag that indicates whether the report should be sent immediately.
            A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
            If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of
            the fabric client settings that the HTTP Gateway Application is using.
            This is useful for critical reports that should be sent as soon as possible.
            Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is
            closed or the message doesn't reach the Gateway.
            If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway.
            Therefore, it will be batched according to the HealthReportSendInterval configuration.
            This is the recommended setting because it allows the health client to optimize health reporting messages to health
            store as well as health report processing.
            By default, reports are not sent immediately.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationClient.StartApplicationUpgradeAsync(System.String,Microsoft.ServiceFabric.Common.ApplicationUpgradeDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Starts upgrading an application in the Service Fabric cluster.
            </summary>
            <remarks>
            Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are
            valid.
            Note,
            [ApplicationParameter](https://docs.microsoft.com/dotnet/api/system.fabric.description.applicationdescription.applicationparameters)s
            are not preserved across an application upgrade.
            In order to preserve current application parameters, the user should get the parameters using
            [GetApplicationInfo](./GetApplicationInfo.md) operation first and pass them into the upgrade API call as shown in
            the example.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="applicationUpgradeDescription">Parameters for an application upgrade.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationClient.GetApplicationUpgradeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets details for the latest upgrade performed on this application.
            </summary>
            <remarks>
            Returns information about the state of the latest application upgrade along with details to aid debugging
            application health issues.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationClient.UpdateApplicationUpgradeAsync(System.String,Microsoft.ServiceFabric.Common.ApplicationUpgradeUpdateDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Updates an ongoing application upgrade in the Service Fabric cluster.
            </summary>
            <remarks>
            Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the
            application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or
            issues in the application to make progress.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="applicationUpgradeUpdateDescription">Parameters for updating an existing application upgrade.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationClient.ResumeApplicationUpgradeAsync(System.String,Microsoft.ServiceFabric.Common.ResumeApplicationUpgradeDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Resumes upgrading an application in the Service Fabric cluster.
            </summary>
            <remarks>
            Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a
            time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call
            this API before proceeding to the next upgrade domain.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="resumeApplicationUpgradeDescription">Describes the parameters for resuming an application
            upgrade.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationClient.RollbackApplicationUpgradeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Starts rolling back the currently on-going upgrade of an application in the Service Fabric cluster.
            </summary>
            <remarks>
            Starts rolling back the current application upgrade to the previous version. This API can only be used to roll back
            the current in-progress upgrade that is rolling forward to new version. If the application is not currently being
            upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a previous
            version.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationClient.GetDeployedApplicationInfoListAsync(Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int64},System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the list of applications deployed on a Service Fabric node.
            </summary>
            <remarks>
            Gets the list of applications deployed on a Service Fabric node. The results do not include information about
            deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in
            active, activating, and downloading states. This query requires that the node name corresponds to a node on the
            cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the
            cluster.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="includeHealthState">Include the health state of an entity.
            If this parameter is false or not specified, then the health state returned is "Unknown".
            When set to true, the query goes in parallel to the node and the health system service before the results are
            merged.
            As a result, the query is more expensive and may take a longer time.
            </param>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="maxResults">The maximum number of results to be returned as part of the paged queries. This parameter
            defines the upper bound on the number of results returned. The results returned can be less than the specified
            maximum results if they do not fit in the message as per the max message size restrictions defined in the
            configuration. If this parameter is zero or not specified, the paged query includes as many results as possible
            that fit in the return message.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationClient.GetDeployedApplicationInfoAsync(Microsoft.ServiceFabric.Common.NodeName,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Gets the information about an application deployed on a Service Fabric node.
            </summary>
            <remarks>
            This query returns system application information if the application ID provided is for system application. Results
            encompass deployed applications in active, activating, and downloading states. This query requires that the node
            name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active
            Service Fabric nodes on the cluster.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="includeHealthState">Include the health state of an entity.
            If this parameter is false or not specified, then the health state returned is "Unknown".
            When set to true, the query goes in parallel to the node and the health system service before the results are
            merged.
            As a result, the query is more expensive and may take a longer time.
            </param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationClient.GetDeployedApplicationHealthAsync(Microsoft.ServiceFabric.Common.NodeName,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the information about health of an application deployed on a Service Fabric node.
            </summary>
            <remarks>
            Gets the information about health of an application deployed on a Service Fabric node. Use EventsHealthStateFilter
            to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health
            state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children
            based on health state.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="eventsHealthStateFilter">Allows filtering the collection of HealthEvent objects returned based on
            health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then
            all of the events with HealthState value of OK (2) and Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="deployedServicePackagesHealthStateFilter">Allows filtering of the deployed service package health
            state objects returned in the result of deployed application health query based on their health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only deployed service packages that match the filter are returned. All deployed service packages are used to
            evaluate the aggregated health state of the deployed application.
            If not specified, all entries are returned.
            The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the
            bitwise 'OR' operator.
            For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and
            Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="excludeHealthStatistics">Indicates whether the health statistics should be returned as part of the
            query result. False by default.
            The statistics show the number of children entities in health state Ok, Warning, and Error.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationClient.GetDeployedApplicationHealthUsingPolicyAsync(Microsoft.ServiceFabric.Common.NodeName,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.ApplicationHealthPolicy,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the information about health of an application deployed on a Service Fabric node. using the specified policy.
            </summary>
            <remarks>
            Gets the information about health of an application deployed on a Service Fabric node using the specified policy.
            Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed
            application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for
            DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override the
            health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the
            ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed
            application.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="eventsHealthStateFilter">Allows filtering the collection of HealthEvent objects returned based on
            health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then
            all of the events with HealthState value of OK (2) and Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="deployedServicePackagesHealthStateFilter">Allows filtering of the deployed service package health
            state objects returned in the result of deployed application health query based on their health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only deployed service packages that match the filter are returned. All deployed service packages are used to
            evaluate the aggregated health state of the deployed application.
            If not specified, all entries are returned.
            The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the
            bitwise 'OR' operator.
            For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and
            Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="applicationHealthPolicy">Describes the health policies used to evaluate the health of an application
            or one of its children.
            If not present, the health evaluation uses the health policy from application manifest or the default health
            policy.
            </param>
            <param name ="excludeHealthStatistics">Indicates whether the health statistics should be returned as part of the
            query result. False by default.
            The statistics show the number of children entities in health state Ok, Warning, and Error.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationClient.ReportDeployedApplicationHealthAsync(Microsoft.ServiceFabric.Common.NodeName,System.String,Microsoft.ServiceFabric.Common.HealthInformation,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Sends a health report on the Service Fabric application deployed on a Service Fabric node.
            </summary>
            <remarks>
            Reports health state of the application deployed on a Service Fabric node. The report must contain the information
            about the source of the health report and property on which it is reported.
            The report is sent to a Service Fabric gateway Service, which forwards to the health store.
            The report may be accepted by the gateway, but rejected by the health store after extra validation.
            For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
            To see whether the report was applied in the health store, get deployed application health and check that the
            report appears in the HealthEvents section.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="healthInformation">Describes the health information for the health report. This information needs to
            be present in all of the health reports sent to the health manager.</param>
            <param name ="immediate">A flag that indicates whether the report should be sent immediately.
            A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
            If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of
            the fabric client settings that the HTTP Gateway Application is using.
            This is useful for critical reports that should be sent as soon as possible.
            Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is
            closed or the message doesn't reach the Gateway.
            If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway.
            Therefore, it will be batched according to the HealthReportSendInterval configuration.
            This is the recommended setting because it allows the health client to optimize health reporting messages to health
            store as well as health report processing.
            By default, reports are not sent immediately.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IApplicationTypeClient">
            <summary>
            Interface containing methods for performing ApplicationTypeClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationTypeClient.GetApplicationTypeInfoListAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the list of application types in the Service Fabric cluster.
            </summary>
            <remarks>
            Returns the information about the application types that are provisioned or in the process of being provisioned in
            the Service Fabric cluster. Each version of an application type is returned as one application type. The response
            includes the name, version, status, and other details about the application type. This is a paged query, meaning
            that if not all of the application types fit in a page, one page of results is returned as well as a continuation
            token, which can be used to get the next page. For example, if there are 10 application types but a page only fits
            the first three application types, or if max results is set to 3, then three is returned. To access the rest of the
            results, retrieve subsequent pages by using the returned continuation token in the next query. An empty
            continuation token is returned if there are no subsequent pages.
            </remarks>
            <param name ="applicationTypeDefinitionKindFilter">Used to filter on ApplicationTypeDefinitionKind which is the
            mechanism used to define a Service Fabric application type.
            - Default - Default value, which performs the same function as selecting "All". The value is 0.
            - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535.
            - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value
            ServiceFabricApplicationPackage. The value is 1.
            - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.
            </param>
            <param name ="excludeApplicationParameters">The flag that specifies whether application parameters will be excluded
            from the result.</param>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="maxResults">The maximum number of results to be returned as part of the paged queries. This parameter
            defines the upper bound on the number of results returned. The results returned can be less than the specified
            maximum results if they do not fit in the message as per the max message size restrictions defined in the
            configuration. If this parameter is zero or not specified, the paged query includes as many results as possible
            that fit in the return message.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationTypeClient.GetApplicationTypeInfoListByNameAsync(System.String,System.String,System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the list of application types in the Service Fabric cluster matching exactly the specified name.
            </summary>
            <remarks>
            Returns the information about the application types that are provisioned or in the process of being provisioned in
            the Service Fabric cluster. These results are of application types whose name match exactly the one specified as
            the parameter, and which comply with the given query parameters. All versions of the application type matching the
            application type name are returned, with each version returned as one application type. The response includes the
            name, version, status, and other details about the application type. This is a paged query, meaning that if not all
            of the application types fit in a page, one page of results is returned as well as a continuation token, which can
            be used to get the next page. For example, if there are 10 application types but a page only fits the first three
            application types, or if max results is set to 3, then three is returned. To access the rest of the results,
            retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token
            is returned if there are no subsequent pages.
            </remarks>
            <param name ="applicationTypeName">The name of the application type.</param>
            <param name ="applicationTypeVersion">The version of the application type.</param>
            <param name ="excludeApplicationParameters">The flag that specifies whether application parameters will be excluded
            from the result.</param>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="maxResults">The maximum number of results to be returned as part of the paged queries. This parameter
            defines the upper bound on the number of results returned. The results returned can be less than the specified
            maximum results if they do not fit in the message as per the max message size restrictions defined in the
            configuration. If this parameter is zero or not specified, the paged query includes as many results as possible
            that fit in the return message.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationTypeClient.ProvisionApplicationTypeAsync(Microsoft.ServiceFabric.Common.ProvisionApplicationTypeDescriptionBase,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Provisions or registers a Service Fabric application type with the cluster using the '.sfpkg' package in the
            external store or using the application package in the image store.
            </summary>
            <remarks>
            Provisions a Service Fabric application type with the cluster. The provision is required before any new
            applications can be instantiated.
            The provision operation can be performed either on the application package specified by the
            relativePathInImageStore, or by using the URI of the external '.sfpkg'.
            </remarks>
            <param name ="provisionApplicationTypeDescription">The base type of provision application type description which
            supports either image store-based provision or external store-based provision.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationTypeClient.UnprovisionApplicationTypeAsync(System.String,Microsoft.ServiceFabric.Common.UnprovisionApplicationTypeDescriptionInfo,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Removes or unregisters a Service Fabric application type from the cluster.
            </summary>
            <remarks>
            This operation can only be performed if all application instances of the application type have been deleted. Once
            the application type is unregistered, no new application instances can be created for this particular application
            type.
            </remarks>
            <param name ="applicationTypeName">The name of the application type.</param>
            <param name ="unprovisionApplicationTypeDescriptionInfo">The relative path for the application package in the image
            store specified during the prior copy operation.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IApplicationTypeClient.GetApplicationManifestAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the manifest describing an application type.
            </summary>
            <remarks>
            The response contains the application manifest XML as a string.
            </remarks>
            <param name ="applicationTypeName">The name of the application type.</param>
            <param name ="applicationTypeVersion">The version of the application type.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IBackupRestoreClient">
            <summary>
            Interface containing methods for performing BackupRestoreClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.CreateBackupPolicyAsync(Microsoft.ServiceFabric.Common.BackupPolicyDescription,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Creates a backup policy.
            </summary>
            <remarks>
            Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for
            periodic backup.
            </remarks>
            <param name ="backupPolicyDescription">Describes the backup policy.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="validateConnection">Specifies whether to validate the storage connection and credentials before
            creating or updating the backup policies.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.DeleteBackupPolicyAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Deletes the backup policy.
            </summary>
            <remarks>
            Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active
            backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without
            first deleting the mapping.
            </remarks>
            <param name ="backupPolicyName">The name of the backup policy.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.GetBackupPolicyListAsync(Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all the backup policies configured.
            </summary>
            <remarks>
            Get a list of all the backup policies configured.
            </remarks>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="maxResults">The maximum number of results to be returned as part of the paged queries. This parameter
            defines the upper bound on the number of results returned. The results returned can be less than the specified
            maximum results if they do not fit in the message as per the max message size restrictions defined in the
            configuration. If this parameter is zero or not specified, the paged query includes as many results as possible
            that fit in the return message.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.GetBackupPolicyByNameAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets a particular backup policy by name.
            </summary>
            <remarks>
            Gets a particular backup policy identified by {backupPolicyName}
            </remarks>
            <param name ="backupPolicyName">The name of the backup policy.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.GetAllEntitiesBackedUpByPolicyAsync(System.String,Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the list of backup entities that are associated with this policy.
            </summary>
            <remarks>
            Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
            </remarks>
            <param name ="backupPolicyName">The name of the backup policy.</param>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="maxResults">The maximum number of results to be returned as part of the paged queries. This parameter
            defines the upper bound on the number of results returned. The results returned can be less than the specified
            maximum results if they do not fit in the message as per the max message size restrictions defined in the
            configuration. If this parameter is zero or not specified, the paged query includes as many results as possible
            that fit in the return message.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.UpdateBackupPolicyAsync(Microsoft.ServiceFabric.Common.BackupPolicyDescription,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Updates the backup policy.
            </summary>
            <remarks>
            Updates the backup policy identified by {backupPolicyName}
            </remarks>
            <param name ="backupPolicyDescription">Describes the backup policy.</param>
            <param name ="backupPolicyName">The name of the backup policy.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="validateConnection">Specifies whether to validate the storage connection and credentials before
            creating or updating the backup policies.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.EnableApplicationBackupAsync(System.String,Microsoft.ServiceFabric.Common.EnableBackupDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Enables periodic backup of stateful partitions under this Service Fabric application.
            </summary>
            <remarks>
            Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is
            backed up individually as per the specified backup policy description.
            Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="enableBackupDescription">Specifies the parameters for enabling backup.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.DisableApplicationBackupAsync(System.String,System.Nullable{System.Int64},Microsoft.ServiceFabric.Common.DisableBackupDescription,System.Threading.CancellationToken)">
            <summary>
            Disables periodic backup of Service Fabric application.
            </summary>
            <remarks>
            Disables periodic backup of Service Fabric application which was previously enabled.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="disableBackupDescription">Specifies the parameters to disable backup for any backup entity.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.GetApplicationBackupConfigurationInfoAsync(System.String,Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the Service Fabric application backup configuration information.
            </summary>
            <remarks>
            Gets the Service Fabric backup configuration information for the application and the services and partitions under
            this application.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="maxResults">The maximum number of results to be returned as part of the paged queries. This parameter
            defines the upper bound on the number of results returned. The results returned can be less than the specified
            maximum results if they do not fit in the message as per the max message size restrictions defined in the
            configuration. If this parameter is zero or not specified, the paged query includes as many results as possible
            that fit in the return message.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.GetApplicationBackupListAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the list of backups available for every partition in this application.
            </summary>
            <remarks>
            Returns a list of backups available for every partition in this Service Fabric application. The server enumerates
            all the backups available at the backup location configured in the backup policy. It also allows filtering of the
            result based on start and end datetime or just fetching the latest available backup for every partition.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="latest">Specifies whether to get only the most recent backup available for a partition for the
            specified time range.</param>
            <param name ="startDateTimeFilter">Specify the start date time from which to enumerate backups, in datetime format.
            The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups
            from the beginning are enumerated.</param>
            <param name ="endDateTimeFilter">Specify the end date time till which to enumerate backups, in datetime format. The
            date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done
            till the most recent backup.</param>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="maxResults">The maximum number of results to be returned as part of the paged queries. This parameter
            defines the upper bound on the number of results returned. The results returned can be less than the specified
            maximum results if they do not fit in the message as per the max message size restrictions defined in the
            configuration. If this parameter is zero or not specified, the paged query includes as many results as possible
            that fit in the return message.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.SuspendApplicationBackupAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Suspends periodic backup for the specified Service Fabric application.
            </summary>
            <remarks>
            The application which is configured to take periodic backups, is suspended for taking further backups till it is
            resumed again. This operation applies to the entire application's hierarchy. It means all the services and
            partitions under this application are now suspended for backup.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.ResumeApplicationBackupAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Resumes periodic backup of a Service Fabric application which was previously suspended.
            </summary>
            <remarks>
            The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy
            currently configured for the same.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.EnableServiceBackupAsync(System.String,Microsoft.ServiceFabric.Common.EnableBackupDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Enables periodic backup of stateful partitions under this Service Fabric service.
            </summary>
            <remarks>
            Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is
            backed up individually as per the specified backup policy description. In case the application, which the service
            is part of, is already enabled for backup then this operation would override the policy being used to take the
            periodic backup for this service and its partitions (unless explicitly overridden at the partition level).
            Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="enableBackupDescription">Specifies the parameters for enabling backup.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.DisableServiceBackupAsync(System.String,Microsoft.ServiceFabric.Common.DisableBackupDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Disables periodic backup of Service Fabric service which was previously enabled.
            </summary>
            <remarks>
            Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled
            before it can be disabled.
            In case the backup is enabled for the Service Fabric application, which this service is part of, this service would
            continue to be periodically backed up as per the policy mapped at the application level.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="disableBackupDescription">Specifies the parameters to disable backup for any backup entity.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.GetServiceBackupConfigurationInfoAsync(System.String,Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the Service Fabric service backup configuration information.
            </summary>
            <remarks>
            Gets the Service Fabric backup configuration information for the service and the partitions under this service.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="maxResults">The maximum number of results to be returned as part of the paged queries. This parameter
            defines the upper bound on the number of results returned. The results returned can be less than the specified
            maximum results if they do not fit in the message as per the max message size restrictions defined in the
            configuration. If this parameter is zero or not specified, the paged query includes as many results as possible
            that fit in the return message.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.GetServiceBackupListAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the list of backups available for every partition in this service.
            </summary>
            <remarks>
            Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all
            the backups available in the backup store configured in the backup policy. It also allows filtering of the result
            based on start and end datetime or just fetching the latest available backup for every partition.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="latest">Specifies whether to get only the most recent backup available for a partition for the
            specified time range.</param>
            <param name ="startDateTimeFilter">Specify the start date time from which to enumerate backups, in datetime format.
            The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups
            from the beginning are enumerated.</param>
            <param name ="endDateTimeFilter">Specify the end date time till which to enumerate backups, in datetime format. The
            date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done
            till the most recent backup.</param>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="maxResults">The maximum number of results to be returned as part of the paged queries. This parameter
            defines the upper bound on the number of results returned. The results returned can be less than the specified
            maximum results if they do not fit in the message as per the max message size restrictions defined in the
            configuration. If this parameter is zero or not specified, the paged query includes as many results as possible
            that fit in the return message.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.SuspendServiceBackupAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Suspends periodic backup for the specified Service Fabric service.
            </summary>
            <remarks>
            The service which is configured to take periodic backups, is suspended for taking further backups till it is
            resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this
            service are now suspended for backup.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.ResumeServiceBackupAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Resumes periodic backup of a Service Fabric service which was previously suspended.
            </summary>
            <remarks>
            The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently
            configured for the same.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.EnablePartitionBackupAsync(Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.EnableBackupDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Enables periodic backup of the stateful persisted partition.
            </summary>
            <remarks>
            Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup
            policy description. In case the application or service, which is partition is part of, is already enabled for
            backup then this operation would override the policy being used to take the periodic backup of this partition.
            Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="enableBackupDescription">Specifies the parameters for enabling backup.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.DisablePartitionBackupAsync(Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.DisableBackupDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Disables periodic backup of Service Fabric partition which was previously enabled.
            </summary>
            <remarks>
            Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can
            be disabled.
            In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this
            partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="disableBackupDescription">Specifies the parameters to disable backup for any backup entity.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.GetPartitionBackupConfigurationInfoAsync(Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the partition backup configuration information
            </summary>
            <remarks>
            Gets the Service Fabric Backup configuration information for the specified partition.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.GetPartitionBackupListAsync(Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets the list of backups available for the specified partition.
            </summary>
            <remarks>
            Returns a list of backups available for the specified partition. The server enumerates all the backups available in
            the backup store configured in the backup policy. It also allows filtering of the result based on start and end
            datetime or just fetching the latest available backup for the partition.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="latest">Specifies whether to get only the most recent backup available for a partition for the
            specified time range.</param>
            <param name ="startDateTimeFilter">Specify the start date time from which to enumerate backups, in datetime format.
            The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups
            from the beginning are enumerated.</param>
            <param name ="endDateTimeFilter">Specify the end date time till which to enumerate backups, in datetime format. The
            date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done
            till the most recent backup.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.SuspendPartitionBackupAsync(Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Suspends periodic backup for the specified partition.
            </summary>
            <remarks>
            The partition which is configured to take periodic backups, is suspended for taking further backups till it is
            resumed again.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.ResumePartitionBackupAsync(Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Resumes periodic backup of partition which was previously suspended.
            </summary>
            <remarks>
            The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for
            the same.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.BackupPartitionAsync(Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.BackupPartitionDescription,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Triggers backup of the partition's state.
            </summary>
            <remarks>
            Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically
            backed up, then by default the new backup is created at the same backup storage. One can also override the same by
            specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can
            be tracked using the GetBackupProgress operation.
            In case, the operation times out, specify a greater backup timeout value in the query parameter.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="backupPartitionDescription">Describes the parameters to backup the partition now. If not present,
            backup operation uses default parameters from the backup policy current associated with this partition.</param>
            <param name ="backupTimeout">Specifies the maximum amount of time, in minutes, to wait for the backup operation to
            complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that
            though the operation returns back timeout, the backup actually goes through. In case of timeout error, its
            recommended to invoke this operation again with a greater timeout value. The default value for the same is 10
            minutes.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.GetPartitionBackupProgressAsync(Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets details for the latest backup triggered for this partition.
            </summary>
            <remarks>
            Returns information about the state of the latest backup along with details or failure reason in case of
            completion.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.RestorePartitionAsync(Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.RestorePartitionDescription,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Triggers restore of the state of the partition using the specified restore partition description.
            </summary>
            <remarks>
            Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition
            is already being periodically backed up, then by default the backup point is looked for in the storage specified in
            backup policy. One can also override the same by specifying the backup storage details as part of the restore
            partition description in body. Once the restore is initiated, its progress can be tracked using the
            GetRestoreProgress operation.
            In case, the operation times out, specify a greater restore timeout value in the query parameter.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="restorePartitionDescription">Describes the parameters to restore the partition.</param>
            <param name ="restoreTimeout">Specifies the maximum amount of time to wait, in minutes, for the restore operation
            to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be
            that the restore operation goes through even though it completes with timeout. In case of timeout error, its
            recommended to invoke this operation again with a greater timeout value. the default value for the same is 10
            minutes.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.GetPartitionRestoreProgressAsync(Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets details for the latest restore operation triggered for this partition.
            </summary>
            <remarks>
            Returns information about the state of the latest restore operation along with details or failure reason in case of
            completion.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IBackupRestoreClient.GetBackupsFromBackupLocationAsync(Microsoft.ServiceFabric.Common.GetBackupByStorageQueryDescription,System.Nullable{System.Int64},Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the list of backups available for the specified backed up entity at the specified backup location.
            </summary>
            <remarks>
            Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the
            specified backup location (FileShare or Azure Blob Storage).
            </remarks>
            <param name ="getBackupByStorageQueryDescription">Describes the filters and backup storage details to be used for
            enumerating backups.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="maxResults">The maximum number of results to be returned as part of the paged queries. This parameter
            defines the upper bound on the number of results returned. The results returned can be less than the specified
            maximum results if they do not fit in the message as per the max message size restrictions defined in the
            configuration. If this parameter is zero or not specified, the paged query includes as many results as possible
            that fit in the return message.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IChaosClient">
            <summary>
            Interface containing methods for performing ChaosClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IChaosClient.GetChaosAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the status of Chaos.
            </summary>
            <remarks>
            Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos and
            the status of the Chaos Schedule.
            </remarks>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IChaosClient.StartChaosAsync(Microsoft.ServiceFabric.Common.ChaosParameters,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Starts Chaos in the cluster.
            </summary>
            <remarks>
            If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters.
            If Chaos is already running when this call is made, the call fails with the error code
            FABRIC_E_CHAOS_ALREADY_RUNNING.
            Refer to the article [Induce controlled Chaos in Service Fabric
            clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
            </remarks>
            <param name ="chaosParameters">Describes all the parameters to configure a Chaos run.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IChaosClient.StopChaosAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Stops Chaos if it is running in the cluster and put the Chaos Schedule in a stopped state.
            </summary>
            <remarks>
            Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The
            current Chaos Schedule is put into a stopped state.
            Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos.
            A new Chaos Schedule must be set in order to resume scheduling.
            </remarks>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IChaosClient.GetChaosEventsAsync(Microsoft.ServiceFabric.Common.ContinuationToken,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the next segment of the Chaos events based on the continuation token or the time range.
            </summary>
            <remarks>
            To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new
            segment of Chaos events, you can specify the time range
            through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same
            call.
            When there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment
            contains no more than 100 Chaos events and to get the next segment you make a call to this API with the
            continuation token.
            </remarks>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="startTimeUtc">The Windows file time representing the start time of the time range for which a Chaos
            report is to be generated. Consult [DateTime.ToFileTimeUtc
            Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.</param>
            <param name ="endTimeUtc">The Windows file time representing the end time of the time range for which a Chaos
            report is to be generated. Consult [DateTime.ToFileTimeUtc
            Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.</param>
            <param name ="maxResults">The maximum number of results to be returned as part of the paged queries. This parameter
            defines the upper bound on the number of results returned. The results returned can be less than the specified
            maximum results if they do not fit in the message as per the max message size restrictions defined in the
            configuration. If this parameter is zero or not specified, the paged query includes as many results as possible
            that fit in the return message.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IChaosClient.GetChaosScheduleAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the Chaos Schedule defining when and how to run Chaos.
            </summary>
            <remarks>
            Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
            </remarks>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IChaosClient.PostChaosScheduleAsync(Microsoft.ServiceFabric.Common.ChaosScheduleDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Set the schedule used by Chaos.
            </summary>
            <remarks>
            Chaos will automatically schedule runs based on the Chaos Schedule.
            The Chaos Schedule will be updated if the provided version matches the version on the server.
            When updating the Chaos Schedule, the version on the server is incremented by 1.
            The version on the server will wrap back to 0 after reaching a large number.
            If Chaos is running when this call is made, the call will fail.
            </remarks>
            <param name ="chaosSchedule">Describes the schedule used by Chaos.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.ICodePackageClient">
            <summary>
            Interface containing methods for performing CodePackageClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ICodePackageClient.GetDeployedCodePackageInfoListAsync(Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the list of code packages deployed on a Service Fabric node.
            </summary>
            <remarks>
            Gets the list of code packages deployed on a Service Fabric node for the given application.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="serviceManifestName">The name of a service manifest registered as part of an application type in a
            Service Fabric cluster.</param>
            <param name ="codePackageName">The name of code package specified in service manifest registered as part of an
            application type in a Service Fabric cluster.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ICodePackageClient.RestartDeployedCodePackageAsync(Microsoft.ServiceFabric.Common.NodeName,System.String,Microsoft.ServiceFabric.Common.RestartDeployedCodePackageDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Restarts a code package deployed on a Service Fabric node in a cluster.
            </summary>
            <remarks>
            Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which
            will restart all the user service replicas hosted in that process.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="restartDeployedCodePackageDescription">Describes the deployed code package on Service Fabric node to
            restart.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ICodePackageClient.GetContainerLogsDeployedOnNodeAsync(Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the container logs for container deployed on a Service Fabric node.
            </summary>
            <remarks>
            Gets the container logs for container deployed on a Service Fabric node for the given code package.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="serviceManifestName">The name of a service manifest registered as part of an application type in a
            Service Fabric cluster.</param>
            <param name ="codePackageName">The name of code package specified in service manifest registered as part of an
            application type in a Service Fabric cluster.</param>
            <param name ="tail">Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete
            logs.</param>
            <param name ="previous">Specifies whether to get container logs from exited/dead containers of the code package
            instance.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ICodePackageClient.InvokeContainerApiAsync(Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,System.String,System.String,Microsoft.ServiceFabric.Common.ContainerApiRequestBody,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Invoke container API on a container deployed on a Service Fabric node.
            </summary>
            <remarks>
            Invoke container API on a container deployed on a Service Fabric node for the given code package.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="serviceManifestName">The name of a service manifest registered as part of an application type in a
            Service Fabric cluster.</param>
            <param name ="codePackageName">The name of code package specified in service manifest registered as part of an
            application type in a Service Fabric cluster.</param>
            <param name ="codePackageInstanceId">ID that uniquely identifies a code package instance deployed on a service
            fabric node.</param>
            <param name ="containerApiRequestBody">Parameters for making container API call</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IComposeDeploymentClient">
            <summary>
            Interface containing methods for performing ComposeDeploymentClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IComposeDeploymentClient.CreateComposeDeploymentAsync(Microsoft.ServiceFabric.Common.CreateComposeDeploymentDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Creates a Service Fabric compose deployment.
            </summary>
            <remarks>
            Compose is a file format that describes multi-container applications. This API allows deploying container based
            applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can
            be tracked via the `GetComposeDeploymentStatus` API.
            </remarks>
            <param name ="createComposeDeploymentDescription">Describes the compose deployment that needs to be
            created.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IComposeDeploymentClient.GetComposeDeploymentStatusAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets information about a Service Fabric compose deployment.
            </summary>
            <remarks>
            Returns the status of the compose deployment that was created or in the process of being created in the Service
            Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status,
            and other details about the deployment.
            </remarks>
            <param name ="deploymentName">The identity of the deployment.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IComposeDeploymentClient.GetComposeDeploymentStatusListAsync(Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the list of compose deployments created in the Service Fabric cluster.
            </summary>
            <remarks>
            Gets the status about the compose deployments that were created or in the process of being created in the Service
            Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the
            list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which
            can be used to get the next page.
            </remarks>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="maxResults">The maximum number of results to be returned as part of the paged queries. This parameter
            defines the upper bound on the number of results returned. The results returned can be less than the specified
            maximum results if they do not fit in the message as per the max message size restrictions defined in the
            configuration. If this parameter is zero or not specified, the paged query includes as many results as possible
            that fit in the return message.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IComposeDeploymentClient.GetComposeDeploymentUpgradeProgressAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets details for the latest upgrade performed on this Service Fabric compose deployment.
            </summary>
            <remarks>
            Returns the information about the state of the compose deployment upgrade along with details to aid debugging
            application health issues.
            </remarks>
            <param name ="deploymentName">The identity of the deployment.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IComposeDeploymentClient.RemoveComposeDeploymentAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Deletes an existing Service Fabric compose deployment from cluster.
            </summary>
            <remarks>
            Deletes an existing Service Fabric compose deployment.
            </remarks>
            <param name ="deploymentName">The identity of the deployment.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IComposeDeploymentClient.StartComposeDeploymentUpgradeAsync(System.String,Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Starts upgrading a compose deployment in the Service Fabric cluster.
            </summary>
            <remarks>
            Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
            </remarks>
            <param name ="deploymentName">The identity of the deployment.</param>
            <param name ="composeDeploymentUpgradeDescription">Parameters for upgrading compose deployment.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IComposeDeploymentClient.StartRollbackComposeDeploymentUpgradeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Starts rolling back a compose deployment upgrade in the Service Fabric cluster.
            </summary>
            <remarks>
            Rollback a service fabric compose deployment upgrade.
            </remarks>
            <param name ="deploymentName">The identity of the deployment.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IEventsStoreClient">
            <summary>
            Interface containing methods for performing EventsStoreClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IEventsStoreClient.GetClusterEventListAsync(System.String,System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Gets all Cluster-related events.
            </summary>
            <remarks>
            The response is list of ClusterEvent objects.
            </remarks>
            <param name ="startTimeUtc">The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="endTimeUtc">The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="eventsTypesFilter">This is a comma separated string specifying the types of FabricEvents that should
            only be included in the response.</param>
            <param name ="excludeAnalysisEvents">This param disables the retrieval of AnalysisEvents if true is passed.
            </param>
            <param name ="skipCorrelationLookup">This param disables the search of CorrelatedEvents information if true is
            passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
            populated.
            </param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IEventsStoreClient.GetContainersEventListAsync(System.String,System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Gets all Containers-related events.
            </summary>
            <remarks>
            The response is list of ContainerInstanceEvent objects.
            </remarks>
            <param name ="startTimeUtc">The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="endTimeUtc">The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="eventsTypesFilter">This is a comma separated string specifying the types of FabricEvents that should
            only be included in the response.</param>
            <param name ="excludeAnalysisEvents">This param disables the retrieval of AnalysisEvents if true is passed.
            </param>
            <param name ="skipCorrelationLookup">This param disables the search of CorrelatedEvents information if true is
            passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
            populated.
            </param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IEventsStoreClient.GetNodeEventListAsync(Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Gets a Node-related events.
            </summary>
            <remarks>
            The response is list of NodeEvent objects.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="startTimeUtc">The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="endTimeUtc">The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="eventsTypesFilter">This is a comma separated string specifying the types of FabricEvents that should
            only be included in the response.</param>
            <param name ="excludeAnalysisEvents">This param disables the retrieval of AnalysisEvents if true is passed.
            </param>
            <param name ="skipCorrelationLookup">This param disables the search of CorrelatedEvents information if true is
            passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
            populated.
            </param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IEventsStoreClient.GetNodesEventListAsync(System.String,System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Gets all Nodes-related Events.
            </summary>
            <remarks>
            The response is list of NodeEvent objects.
            </remarks>
            <param name ="startTimeUtc">The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="endTimeUtc">The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="eventsTypesFilter">This is a comma separated string specifying the types of FabricEvents that should
            only be included in the response.</param>
            <param name ="excludeAnalysisEvents">This param disables the retrieval of AnalysisEvents if true is passed.
            </param>
            <param name ="skipCorrelationLookup">This param disables the search of CorrelatedEvents information if true is
            passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
            populated.
            </param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IEventsStoreClient.GetApplicationEventListAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Gets an Application-related events.
            </summary>
            <remarks>
            The response is list of ApplicationEvent objects.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="startTimeUtc">The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="endTimeUtc">The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="eventsTypesFilter">This is a comma separated string specifying the types of FabricEvents that should
            only be included in the response.</param>
            <param name ="excludeAnalysisEvents">This param disables the retrieval of AnalysisEvents if true is passed.
            </param>
            <param name ="skipCorrelationLookup">This param disables the search of CorrelatedEvents information if true is
            passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
            populated.
            </param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IEventsStoreClient.GetApplicationsEventListAsync(System.String,System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Gets all Applications-related events.
            </summary>
            <remarks>
            The response is list of ApplicationEvent objects.
            </remarks>
            <param name ="startTimeUtc">The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="endTimeUtc">The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="eventsTypesFilter">This is a comma separated string specifying the types of FabricEvents that should
            only be included in the response.</param>
            <param name ="excludeAnalysisEvents">This param disables the retrieval of AnalysisEvents if true is passed.
            </param>
            <param name ="skipCorrelationLookup">This param disables the search of CorrelatedEvents information if true is
            passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
            populated.
            </param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IEventsStoreClient.GetServiceEventListAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Gets a Service-related events.
            </summary>
            <remarks>
            The response is list of ServiceEvent objects.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="startTimeUtc">The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="endTimeUtc">The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="eventsTypesFilter">This is a comma separated string specifying the types of FabricEvents that should
            only be included in the response.</param>
            <param name ="excludeAnalysisEvents">This param disables the retrieval of AnalysisEvents if true is passed.
            </param>
            <param name ="skipCorrelationLookup">This param disables the search of CorrelatedEvents information if true is
            passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
            populated.
            </param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IEventsStoreClient.GetServicesEventListAsync(System.String,System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Gets all Services-related events.
            </summary>
            <remarks>
            The response is list of ServiceEvent objects.
            </remarks>
            <param name ="startTimeUtc">The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="endTimeUtc">The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="eventsTypesFilter">This is a comma separated string specifying the types of FabricEvents that should
            only be included in the response.</param>
            <param name ="excludeAnalysisEvents">This param disables the retrieval of AnalysisEvents if true is passed.
            </param>
            <param name ="skipCorrelationLookup">This param disables the search of CorrelatedEvents information if true is
            passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
            populated.
            </param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IEventsStoreClient.GetPartitionEventListAsync(Microsoft.ServiceFabric.Common.PartitionId,System.String,System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Gets a Partition-related events.
            </summary>
            <remarks>
            The response is list of PartitionEvent objects.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="startTimeUtc">The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="endTimeUtc">The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="eventsTypesFilter">This is a comma separated string specifying the types of FabricEvents that should
            only be included in the response.</param>
            <param name ="excludeAnalysisEvents">This param disables the retrieval of AnalysisEvents if true is passed.
            </param>
            <param name ="skipCorrelationLookup">This param disables the search of CorrelatedEvents information if true is
            passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
            populated.
            </param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IEventsStoreClient.GetPartitionsEventListAsync(System.String,System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Gets all Partitions-related events.
            </summary>
            <remarks>
            The response is list of PartitionEvent objects.
            </remarks>
            <param name ="startTimeUtc">The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="endTimeUtc">The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="eventsTypesFilter">This is a comma separated string specifying the types of FabricEvents that should
            only be included in the response.</param>
            <param name ="excludeAnalysisEvents">This param disables the retrieval of AnalysisEvents if true is passed.
            </param>
            <param name ="skipCorrelationLookup">This param disables the search of CorrelatedEvents information if true is
            passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
            populated.
            </param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IEventsStoreClient.GetPartitionReplicaEventListAsync(Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId,System.String,System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Gets a Partition Replica-related events.
            </summary>
            <remarks>
            The response is list of ReplicaEvent objects.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="replicaId">The identifier of the replica.</param>
            <param name ="startTimeUtc">The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="endTimeUtc">The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="eventsTypesFilter">This is a comma separated string specifying the types of FabricEvents that should
            only be included in the response.</param>
            <param name ="excludeAnalysisEvents">This param disables the retrieval of AnalysisEvents if true is passed.
            </param>
            <param name ="skipCorrelationLookup">This param disables the search of CorrelatedEvents information if true is
            passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
            populated.
            </param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IEventsStoreClient.GetPartitionReplicasEventListAsync(Microsoft.ServiceFabric.Common.PartitionId,System.String,System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Gets all Replicas-related events for a Partition.
            </summary>
            <remarks>
            The response is list of ReplicaEvent objects.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="startTimeUtc">The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="endTimeUtc">The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="eventsTypesFilter">This is a comma separated string specifying the types of FabricEvents that should
            only be included in the response.</param>
            <param name ="excludeAnalysisEvents">This param disables the retrieval of AnalysisEvents if true is passed.
            </param>
            <param name ="skipCorrelationLookup">This param disables the search of CorrelatedEvents information if true is
            passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
            populated.
            </param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IEventsStoreClient.GetCorrelatedEventListAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all correlated events for a given event.
            </summary>
            <remarks>
            The response is list of FabricEvents.
            </remarks>
            <param name ="eventInstanceId">The EventInstanceId.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IFaultsClient">
            <summary>
            Interface containing methods for performing FaultsClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IFaultsClient.StartDataLossAsync(System.String,Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Guid},System.Nullable{Microsoft.ServiceFabric.Common.DataLossMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLossAsync API of
            the partition.
            </summary>
            <remarks>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the
            partition.
            Actual data loss will depend on the specified DataLossMode.
            
            - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual
            data loss depends on the presence of in-flight replication.
            - FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            
            This API should only be called with a stateful service as the target.
            
            Calling this API with a system service as the target is not advised.
            
            Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and
            clean up internal system state.
            It will not restore data if the command has progressed far enough to cause data loss.
            
            Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this
            API.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="operationId">A GUID that identifies a call of this API.  This is passed into the corresponding
            GetProgress API</param>
            <param name ="dataLossMode">This enum is passed to the StartDataLoss API to indicate what type of data loss to
            induce. Possible values include: 'Invalid', 'PartialDataLoss', 'FullDataLoss'</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IFaultsClient.GetDataLossProgressAsync(System.String,Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Guid},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the progress of a partition data loss operation started using the StartDataLoss API.
            </summary>
            <remarks>
            Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="operationId">A GUID that identifies a call of this API.  This is passed into the corresponding
            GetProgress API</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IFaultsClient.StartQuorumLossAsync(System.String,Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Guid},System.Nullable{Microsoft.ServiceFabric.Common.QuorumLossMode},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Induces quorum loss for a given stateful service partition.
            </summary>
            <remarks>
            This API is useful for a temporary quorum loss situation on your service.
            
            Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with
            this API.
            
            This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless
            services or stateful in-memory only services.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="operationId">A GUID that identifies a call of this API.  This is passed into the corresponding
            GetProgress API</param>
            <param name ="quorumLossMode">This enum is passed to the StartQuorumLoss API to indicate what type of quorum loss
            to induce. Possible values include: 'Invalid', 'QuorumReplicas', 'AllReplicas'</param>
            <param name ="quorumLossDuration">The amount of time for which the partition will be kept in quorum loss.  This
            must be specified in seconds.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IFaultsClient.GetQuorumLossProgressAsync(System.String,Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Guid},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the progress of a quorum loss operation on a partition started using the StartQuorumLoss API.
            </summary>
            <remarks>
            Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="operationId">A GUID that identifies a call of this API.  This is passed into the corresponding
            GetProgress API</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IFaultsClient.StartPartitionRestartAsync(System.String,Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Guid},System.Nullable{Microsoft.ServiceFabric.Common.RestartPartitionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            This API will restart some or all replicas or instances of the specified partition.
            </summary>
            <remarks>
            This API is useful for testing failover.
            
            If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
            
            Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="operationId">A GUID that identifies a call of this API.  This is passed into the corresponding
            GetProgress API</param>
            <param name ="restartPartitionMode">Describe which partitions to restart. Possible values include: 'Invalid',
            'AllReplicasOrInstances', 'OnlyActiveSecondaries'</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IFaultsClient.GetPartitionRestartProgressAsync(System.String,Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Guid},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the progress of a PartitionRestart operation started using StartPartitionRestart.
            </summary>
            <remarks>
            Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="operationId">A GUID that identifies a call of this API.  This is passed into the corresponding
            GetProgress API</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IFaultsClient.StartNodeTransitionAsync(Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Guid},System.Nullable{Microsoft.ServiceFabric.Common.NodeTransitionType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Starts or stops a cluster node.
            </summary>
            <remarks>
            Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in
            "Start" for the NodeTransitionType parameter.
            To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This API starts the operation - when the API
            returns the node may not have finished transitioning yet.
            Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="operationId">A GUID that identifies a call of this API.  This is passed into the corresponding
            GetProgress API</param>
            <param name ="nodeTransitionType">Indicates the type of transition to perform.  NodeTransitionType.Start will start
            a stopped node.  NodeTransitionType.Stop will stop a node that is up. Possible values include: 'Invalid', 'Start',
            'Stop'</param>
            <param name ="nodeInstanceId">The node instance ID of the target node.  This can be determined through GetNodeInfo
            API.</param>
            <param name ="stopDurationInSeconds">The duration, in seconds, to keep the node stopped.  The minimum value is 600,
            the maximum is 14400.  After this time expires, the node will automatically come back up.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IFaultsClient.GetNodeTransitionProgressAsync(Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Guid},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the progress of an operation started using StartNodeTransition.
            </summary>
            <remarks>
            Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="operationId">A GUID that identifies a call of this API.  This is passed into the corresponding
            GetProgress API</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IFaultsClient.GetFaultOperationListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets a list of user-induced fault operations filtered by provided input.
            </summary>
            <remarks>
            Gets the list of user-induced fault operations filtered by provided input.
            </remarks>
            <param name ="typeFilter">Used to filter on OperationType for user-induced operations.
            
            - 65535 - select all
            - 1 - select PartitionDataLoss.
            - 2 - select PartitionQuorumLoss.
            - 4 - select PartitionRestart.
            - 8 - select NodeTransition.
            </param>
            <param name ="stateFilter">Used to filter on OperationState's for user-induced operations.
            
            - 65535 - select All
            - 1 - select Running
            - 2 - select RollingBack
            - 8 - select Completed
            - 16 - select Faulted
            - 32 - select Cancelled
            - 64 - select ForceCancelled
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IFaultsClient.CancelOperationAsync(System.Nullable{System.Guid},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a user-induced fault operation.
            </summary>
            <remarks>
            The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss,
            StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
            
            If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force
            is true, the command will be aborted, and some internal state
            may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is
            not allowed until this API has already
            been called on the same test command with force set to false first, or unless the test command already has an
            OperationState of OperationState.RollingBack.
            Clarification: OperationState.RollingBack means that the system will be/is cleaning up internal system state caused
            by executing the command.  It will not restore data if the
            test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will
            only clean up internal state from running the command.
            It will not restore the target partition's data, if the command progressed far enough to cause data loss.
            
            Important note:  if this API is invoked with force==true, internal state may be left behind.
            </remarks>
            <param name ="operationId">A GUID that identifies a call of this API.  This is passed into the corresponding
            GetProgress API</param>
            <param name ="force">Indicates whether to gracefully roll back and clean up internal system state modified by
            executing the user-induced operation.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IInfrastructureClient">
            <summary>
            Interface containing methods for performing InfrastructureClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IInfrastructureClient.InvokeInfrastructureCommandAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Invokes an administrative command on the given Infrastructure Service instance.
            </summary>
            <remarks>
            For clusters that have one or more instances of the Infrastructure Service configured,
            this API provides a way to send infrastructure-specific commands to a particular
            instance of the Infrastructure Service.
            
            Available commands and their corresponding response formats vary depending upon
            the infrastructure on which the cluster is running.
            
            This API supports the Service Fabric platform; it is not meant to be used directly from your code.
            </remarks>
            <param name ="command">The text of the command to be invoked. The content of the command is
            infrastructure-specific.</param>
            <param name ="serviceId">The identity of the infrastructure service. This is the full name of the infrastructure
            service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one
            instance of infrastructure service running.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IInfrastructureClient.InvokeInfrastructureQueryAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Invokes a read-only query on the given infrastructure service instance.
            </summary>
            <remarks>
            For clusters that have one or more instances of the Infrastructure Service configured,
            this API provides a way to send infrastructure-specific queries to a particular
            instance of the Infrastructure Service.
            
            Available commands and their corresponding response formats vary depending upon
            the infrastructure on which the cluster is running.
            
            This API supports the Service Fabric platform; it is not meant to be used directly from your code.
            </remarks>
            <param name ="command">The text of the command to be invoked. The content of the command is
            infrastructure-specific.</param>
            <param name ="serviceId">The identity of the infrastructure service. This is the full name of the infrastructure
            service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one
            instance of infrastructure service running.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IMeshCodePackagesClient">
            <summary>
            Interface containing methods for performing MeshCodePackagesClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshCodePackagesClient.GetContainerLogsAsync(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the logs from the container.
            </summary>
            <remarks>
            Gets the logs for the container of the specified code package of the service replica.
            </remarks>
            <param name ="applicationResourceName">The identity of the application.</param>
            <param name ="serviceResourceName">The identity of the service.</param>
            <param name ="replicaName">Service Fabric replica name.
            </param>
            <param name ="codePackageName">The name of code package of the service.</param>
            <param name ="tail">Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete
            logs.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IMeshServiceReplicasClient">
            <summary>
            Interface containing methods for performing MeshServiceReplicasClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshServiceReplicasClient.GetAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the given replica of the service of an application.
            </summary>
            <remarks>
            Gets the information about the service replica with the given name. The information include the description and
            other properties of the service replica.
            </remarks>
            <param name ="applicationResourceName">The identity of the application.</param>
            <param name ="serviceResourceName">The identity of the service.</param>
            <param name ="replicaName">Service Fabric replica name.
            </param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshServiceReplicasClient.ListAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Lists all the replicas of a service.
            </summary>
            <remarks>
            Gets the information about all replicas of a service. The information include the description and other properties
            of the service replica.
            </remarks>
            <param name ="applicationResourceName">The identity of the application.</param>
            <param name ="serviceResourceName">The identity of the service.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IMeshServicesClient">
            <summary>
            Interface containing methods for performing MeshServicesClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshServicesClient.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the Service resource with the given name.
            </summary>
            <remarks>
            Gets the information about the Service resource with the given name. The information include the description and
            other properties of the Service.
            </remarks>
            <param name ="applicationResourceName">The identity of the application.</param>
            <param name ="serviceResourceName">The identity of the service.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IMeshServicesClient.ListAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Lists all the service resources.
            </summary>
            <remarks>
            Gets the information about all services of an application resource. The information include the description and
            other properties of the Service.
            </remarks>
            <param name ="applicationResourceName">The identity of the application.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.INodeClient">
            <summary>
            Interface containing methods for performing NodeClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.INodeClient.GetNodeInfoListAsync(Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{Microsoft.ServiceFabric.Common.NodeStatusFilter},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the list of nodes in the Service Fabric cluster.
            </summary>
            <remarks>
            The response includes the name, status, ID, health, uptime, and other details about the nodes.
            </remarks>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="nodeStatusFilter">Allows filtering the nodes based on the NodeStatus. Only the nodes that are
            matching the specified filter value will be returned. The filter value can be one of the following. Possible values
            include: 'default', 'all', 'up', 'down', 'enabling', 'disabling', 'disabled', 'unknown', 'removed'</param>
            <param name ="maxResults">The maximum number of results to be returned as part of the paged queries. This parameter
            defines the upper bound on the number of results returned. The results returned can be less than the specified
            maximum results if they do not fit in the message as per the max message size restrictions defined in the
            configuration. If this parameter is zero or not specified, the paged query includes as many results as possible
            that fit in the return message.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.INodeClient.GetNodeInfoAsync(Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the information about a specific node in the Service Fabric cluster.
            </summary>
            <remarks>
            The response includes the name, status, ID, health, uptime, and other details about the node.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.INodeClient.GetNodeHealthAsync(Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the health of a Service Fabric node.
            </summary>
            <remarks>
            Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events
            reported on the node based on the health state. If the node that you specify by name does not exist in the health
            store, this returns an error.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="eventsHealthStateFilter">Allows filtering the collection of HealthEvent objects returned based on
            health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then
            all of the events with HealthState value of OK (2) and Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.INodeClient.GetNodeHealthUsingPolicyAsync(Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.ClusterHealthPolicy,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the health of a Service Fabric node, by using the specified health policy.
            </summary>
            <remarks>
            Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events
            reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health
            policies used to evaluate the health. If the node that you specify by name does not exist in the health store, this
            returns an error.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="eventsHealthStateFilter">Allows filtering the collection of HealthEvent objects returned based on
            health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then
            all of the events with HealthState value of OK (2) and Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="clusterHealthPolicy">Describes the health policies used to evaluate the health of a cluster or node.
            If not present, the health evaluation uses the health policy from cluster manifest or the default health
            policy.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.INodeClient.ReportNodeHealthAsync(Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.HealthInformation,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Sends a health report on the Service Fabric node.
            </summary>
            <remarks>
            Reports health state of the specified Service Fabric node. The report must contain the information about the source
            of the health report and property on which it is reported.
            The report is sent to a Service Fabric gateway node, which forwards to the health store.
            The report may be accepted by the gateway, but rejected by the health store after extra validation.
            For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
            To see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in
            the HealthEvents section.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="healthInformation">Describes the health information for the health report. This information needs to
            be present in all of the health reports sent to the health manager.</param>
            <param name ="immediate">A flag that indicates whether the report should be sent immediately.
            A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
            If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of
            the fabric client settings that the HTTP Gateway Application is using.
            This is useful for critical reports that should be sent as soon as possible.
            Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is
            closed or the message doesn't reach the Gateway.
            If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway.
            Therefore, it will be batched according to the HealthReportSendInterval configuration.
            This is the recommended setting because it allows the health client to optimize health reporting messages to health
            store as well as health report processing.
            By default, reports are not sent immediately.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.INodeClient.GetNodeLoadInfoAsync(Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the load information of a Service Fabric node.
            </summary>
            <remarks>
            Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.INodeClient.DisableNodeAsync(Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.DeactivationIntentDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Deactivate a Service Fabric cluster node with the specified deactivation intent.
            </summary>
            <remarks>
            Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in
            progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated with
            the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be reactivated
            using the Activate a node operation any time after they are deactivated. If the deactivation is not complete, this
            will cancel the deactivation. A node that goes down and comes back up while deactivated will still need to be
            reactivated before services will be placed on that node.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="deactivationIntentDescription">Describes the intent or reason for deactivating the node.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.INodeClient.EnableNodeAsync(Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Activate a Service Fabric cluster node that is currently deactivated.
            </summary>
            <remarks>
            Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become a
            viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.INodeClient.RemoveNodeStateAsync(Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Notifies Service Fabric that the persisted state on a node has been permanently removed or lost.
            </summary>
            <remarks>
            This implies that it is not possible to recover the persisted state of that node. This generally happens if a hard
            disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be successful.
            This operation lets Service Fabric know that the replicas on that node no longer exist, and that Service Fabric
            should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the node has not
            been removed and the node can come back up with its state intact. Starting from Service Fabric 6.5, in order to use
            this API for seed nodes, please change the seed nodes to regular (non-seed) nodes and then invoke this API to
            remove the node state. If the cluster is running on Azure, after the seed node goes down, Service Fabric will try
            to change it to a non-seed node automatically. To make this happen, make sure the number of non-seed nodes in the
            primary node type is no less than the number of Down seed nodes. If necessary, add more nodes to the primary node
            type to achieve this. For standalone cluster, if the Down seed node is not expected to come back up with its state
            intact, please remove the node from the cluster, see
            https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.INodeClient.RestartNodeAsync(Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.RestartNodeDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Restarts a Service Fabric cluster node.
            </summary>
            <remarks>
            Restarts a Service Fabric cluster node that is already started.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="restartNodeDescription">The instance of the node to be restarted and a flag indicating the need to
            take dump of the fabric process.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.INodeClient.RemoveConfigurationOverridesAsync(Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Removes configuration overrides on the specified node.
            </summary>
            <remarks>
            This api allows removing all existing configuration overrides on specified node.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.INodeClient.GetConfigurationOverridesAsync(Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the list of configuration overrides on the specified node.
            </summary>
            <remarks>
            This api allows getting all existing configuration overrides on the specified node.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.INodeClient.AddConfigurationParameterOverridesAsync(Microsoft.ServiceFabric.Common.NodeName,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ConfigParameterOverride},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Adds the list of configuration overrides on the specified node.
            </summary>
            <remarks>
            This api allows adding all existing configuration overrides on the specified node.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="configParameterOverrideList">Description for adding list of configuration overrides.</param>
            <param name ="force">Force adding configuration overrides on specified nodes.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.INodeClient.RemoveNodeTagsAsync(Microsoft.ServiceFabric.Common.NodeName,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Removes the list of tags from the specified node.
            </summary>
            <remarks>
            This api allows removing set of tags from the specified node.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="nodeTags">Description for adding list of node tags.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.INodeClient.AddNodeTagsAsync(Microsoft.ServiceFabric.Common.NodeName,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Adds the list of tags on the specified node.
            </summary>
            <remarks>
            This api allows adding tags to the specified node.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="nodeTags">Description for adding list of node tags.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IPartitionClient">
            <summary>
            Interface containing methods for performing PartitionClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPartitionClient.GetLoadedPartitionInfoListAsync(System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.Ordering},System.Nullable{System.Int64},Microsoft.ServiceFabric.Common.ContinuationToken,System.Threading.CancellationToken)">
            <summary>
            Gets ordered list of partitions.
            </summary>
            <remarks>
            Retrieves partitions which are most/least loaded according to specified metric.
            </remarks>
            <param name ="metricName">Name of the metric based on which to get ordered list of partitions.</param>
            <param name ="serviceName">The name of a service.</param>
            <param name ="ordering">Ordering of partitions' load. Possible values include: 'Desc', 'Asc'</param>
            <param name ="maxResults">The maximum number of results to be returned as part of the paged queries. This parameter
            defines the upper bound on the number of results returned. The results returned can be less than the specified
            maximum results if they do not fit in the message as per the max message size restrictions defined in the
            configuration. If this parameter is zero or not specified, the paged query includes as many results as possible
            that fit in the return message.</param>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPartitionClient.GetPartitionInfoListAsync(System.String,Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the list of partitions of a Service Fabric service.
            </summary>
            <remarks>
            The response includes the partition ID, partitioning scheme information, keys supported by the partition, status,
            health, and other details about the partition.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPartitionClient.GetPartitionInfoAsync(Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the information about a Service Fabric partition.
            </summary>
            <remarks>
            Gets the information about the specified partition. The response includes the partition ID, partitioning scheme
            information, keys supported by the partition, status, health, and other details about the partition.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPartitionClient.GetServiceNameInfoAsync(Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the name of the Service Fabric service for a partition.
            </summary>
            <remarks>
            Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist in
            the cluster.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPartitionClient.GetPartitionHealthAsync(Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the health of the specified Service Fabric partition.
            </summary>
            <remarks>
            Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health
            state.
            Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition.
            If you specify a partition that does not exist in the health store, this request returns an error.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="eventsHealthStateFilter">Allows filtering the collection of HealthEvent objects returned based on
            health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then
            all of the events with HealthState value of OK (2) and Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="replicasHealthStateFilter">Allows filtering the collection of ReplicaHealthState objects on the
            partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only
            replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state.
            If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a
            combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all
            of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this
            parameter include integer value of one of the following health states.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="excludeHealthStatistics">Indicates whether the health statistics should be returned as part of the
            query result. False by default.
            The statistics show the number of children entities in health state Ok, Warning, and Error.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPartitionClient.GetPartitionHealthUsingPolicyAsync(Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.ApplicationHealthPolicy,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the health of the specified Service Fabric partition, by using the specified health policy.
            </summary>
            <remarks>
            Gets the health information of the specified partition.
            If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
            If the policy is not specified, the health evaluation uses the application health policy defined in the application
            manifest, or the default health policy, if no policy is defined in the manifest.
            Use EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health
            state.
            Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use
            ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health.
            If you specify a partition that does not exist in the health store, this request returns an error.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="eventsHealthStateFilter">Allows filtering the collection of HealthEvent objects returned based on
            health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then
            all of the events with HealthState value of OK (2) and Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="replicasHealthStateFilter">Allows filtering the collection of ReplicaHealthState objects on the
            partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only
            replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state.
            If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a
            combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all
            of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this
            parameter include integer value of one of the following health states.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="applicationHealthPolicy">Describes the health policies used to evaluate the health of an application
            or one of its children.
            If not present, the health evaluation uses the health policy from application manifest or the default health
            policy.
            </param>
            <param name ="excludeHealthStatistics">Indicates whether the health statistics should be returned as part of the
            query result. False by default.
            The statistics show the number of children entities in health state Ok, Warning, and Error.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPartitionClient.ReportPartitionHealthAsync(Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.HealthInformation,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Sends a health report on the Service Fabric partition.
            </summary>
            <remarks>
            Reports health state of the specified Service Fabric partition. The report must contain the information about the
            source of the health report and property on which it is reported.
            The report is sent to a Service Fabric gateway Partition, which forwards to the health store.
            The report may be accepted by the gateway, but rejected by the health store after extra validation.
            For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
            To see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears
            in the HealthEvents section.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="healthInformation">Describes the health information for the health report. This information needs to
            be present in all of the health reports sent to the health manager.</param>
            <param name ="immediate">A flag that indicates whether the report should be sent immediately.
            A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
            If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of
            the fabric client settings that the HTTP Gateway Application is using.
            This is useful for critical reports that should be sent as soon as possible.
            Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is
            closed or the message doesn't reach the Gateway.
            If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway.
            Therefore, it will be batched according to the HealthReportSendInterval configuration.
            This is the recommended setting because it allows the health client to optimize health reporting messages to health
            store as well as health report processing.
            By default, reports are not sent immediately.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPartitionClient.GetPartitionLoadInformationAsync(Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the load information of the specified Service Fabric partition.
            </summary>
            <remarks>
            Returns information about the load of a specified partition.
            The response includes a list of load reports for a Service Fabric partition.
            Each report includes the load metric name, value, and last reported time in UTC.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPartitionClient.ResetPartitionLoadAsync(Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Resets the current load of a Service Fabric partition.
            </summary>
            <remarks>
            Resets the current load of a Service Fabric partition to the default load for the service.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPartitionClient.RecoverPartitionAsync(Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Indicates to the Service Fabric cluster that it should attempt to recover a specific partition that is currently
            stuck in quorum loss.
            </summary>
            <remarks>
            This operation should only be performed if it is known that the replicas that are down cannot be recovered.
            Incorrect use of this API can cause potential data loss.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPartitionClient.RecoverServicePartitionsAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently
            stuck in quorum loss.
            </summary>
            <remarks>
            Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently
            stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot
            be recovered. Incorrect use of this API can cause potential data loss.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPartitionClient.RecoverSystemPartitionsAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently
            stuck in quorum loss.
            </summary>
            <remarks>
            Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently
            stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot
            be recovered. Incorrect use of this API can cause potential data loss.
            </remarks>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPartitionClient.RecoverAllPartitionsAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Indicates to the Service Fabric cluster that it should attempt to recover any services (including system services)
            which are currently stuck in quorum loss.
            </summary>
            <remarks>
            This operation should only be performed if it is known that the replicas that are down cannot be recovered.
            Incorrect use of this API can cause potential data loss.
            </remarks>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPartitionClient.MovePrimaryReplicaAsync(Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Moves the primary replica of a partition of a stateful service.
            </summary>
            <remarks>
            This command moves the primary replica of a partition of a stateful service, respecting all constraints.
            If NodeName parameter is specified, primary will be moved to the specified node (if constraints allow it).
            If NodeName parameter is not specified, primary replica will be moved to a random node in the cluster.
            If IgnoreConstraints parameter is specified and set to true, then primary will be moved regardless of the
            constraints.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="nodeName">The name of the node.</param>
            <param name ="ignoreConstraints">Ignore constraints when moving a replica or instance. If this parameter is not
            specified, all constraints are honored.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPartitionClient.MoveSecondaryReplicaAsync(Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Moves the secondary replica of a partition of a stateful service.
            </summary>
            <remarks>
            This command moves the secondary replica of a partition of a stateful service, respecting all constraints.
            CurrentNodeName parameter must be specified to identify the replica that is moved.
            Source node name must be specified, but new node name can be omitted, and in that case replica is moved to a random
            node.
            If IgnoreConstraints parameter is specified and set to true, then secondary will be moved regardless of the
            constraints.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="currentNodeName">The name of the source node for secondary replica move.</param>
            <param name ="newNodeName">The name of the target node for secondary replica or instance move. If not specified,
            replica or instance is moved to a random node.</param>
            <param name ="ignoreConstraints">Ignore constraints when moving a replica or instance. If this parameter is not
            specified, all constraints are honored.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPartitionClient.UpdatePartitionLoadAsync(System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.PartitionMetricLoadDescription},Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Update the loads of provided partitions for specific metrics.
            </summary>
            <remarks>
            Updates the load value and predicted load value for all the partitions provided for specified metrics.
            </remarks>
            <param name ="partitionMetricLoadDescriptionList">Description of updating load for list of partitions.</param>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="maxResults">The maximum number of results to be returned as part of the paged queries. This parameter
            defines the upper bound on the number of results returned. The results returned can be less than the specified
            maximum results if they do not fit in the message as per the max message size restrictions defined in the
            configuration. If this parameter is zero or not specified, the paged query includes as many results as possible
            that fit in the return message.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IPartitionClient.MoveInstanceAsync(System.String,Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Moves the instance of a partition of a stateless service.
            </summary>
            <remarks>
            This command moves the instance of a partition of a stateless service, respecting all constraints.
            Partition id and service name must be specified to be able to move the instance.
            CurrentNodeName when specified identifies the instance that is moved. If not specified, random instance will be
            moved
            New node name can be omitted, and in that case instance is moved to a random node.
            If IgnoreConstraints parameter is specified and set to true, then instance will be moved regardless of the
            constraints.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="currentNodeName">The name of the source node for instance move. If not specified, instance is moved
            from a random node.</param>
            <param name ="newNodeName">The name of the target node for secondary replica or instance move. If not specified,
            replica or instance is moved to a random node.</param>
            <param name ="ignoreConstraints">Ignore constraints when moving a replica or instance. If this parameter is not
            specified, all constraints are honored.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IRepairManagementClient">
            <summary>
            Interface containing methods for performing RepairManagementClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IRepairManagementClient.CreateRepairTaskAsync(Microsoft.ServiceFabric.Common.RepairTask,System.Threading.CancellationToken)">
            <summary>
            Creates a new repair task.
            </summary>
            <remarks>
            For clusters that have the Repair Manager Service configured,
            this API provides a way to create repair tasks that run automatically or manually.
            For repair tasks that run automatically, an appropriate repair executor
            must be running for each repair action to run automatically.
            These are currently only available in specially-configured Azure Cloud Services.
            
            To create a manual repair task, provide the set of impacted node names and the
            expected impact. When the state of the created repair task changes to approved,
            you can safely perform repair actions on those nodes.
            
            This API supports the Service Fabric platform; it is not meant to be used directly from your code.
            </remarks>
            <param name ="repairTask">Describes the repair task to be created or updated.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IRepairManagementClient.CancelRepairTaskAsync(Microsoft.ServiceFabric.Common.RepairTaskCancelDescription,System.Threading.CancellationToken)">
            <summary>
            Requests the cancellation of the given repair task.
            </summary>
            <remarks>
            This API supports the Service Fabric platform; it is not meant to be used directly from your code.
            </remarks>
            <param name ="repairTaskCancelDescription">Describes the repair task to be cancelled.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IRepairManagementClient.DeleteRepairTaskAsync(Microsoft.ServiceFabric.Common.RepairTaskDeleteDescription,System.Threading.CancellationToken)">
            <summary>
            Deletes a completed repair task.
            </summary>
            <remarks>
            This API supports the Service Fabric platform; it is not meant to be used directly from your code.
            </remarks>
            <param name ="repairTaskDeleteDescription">Describes the repair task to be deleted.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IRepairManagementClient.GetRepairTaskListAsync(System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of repair tasks matching the given filters.
            </summary>
            <remarks>
            This API supports the Service Fabric platform; it is not meant to be used directly from your code.
            </remarks>
            <param name ="taskIdFilter">The repair task ID prefix to be matched.</param>
            <param name ="stateFilter">A bitwise-OR of the following values, specifying which task states should be included in
            the result list.
            
            - 1 - Created
            - 2 - Claimed
            - 4 - Preparing
            - 8 - Approved
            - 16 - Executing
            - 32 - Restoring
            - 64 - Completed
            </param>
            <param name ="executorFilter">The name of the repair executor whose claimed tasks should be included in the
            list.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IRepairManagementClient.ForceApproveRepairTaskAsync(Microsoft.ServiceFabric.Common.RepairTaskApproveDescription,System.Threading.CancellationToken)">
            <summary>
            Forces the approval of the given repair task.
            </summary>
            <remarks>
            This API supports the Service Fabric platform; it is not meant to be used directly from your code.
            </remarks>
            <param name ="repairTaskApproveDescription">Describes the repair task to be approved.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IRepairManagementClient.UpdateRepairTaskHealthPolicyAsync(Microsoft.ServiceFabric.Common.RepairTaskUpdateHealthPolicyDescription,System.Threading.CancellationToken)">
            <summary>
            Updates the health policy of the given repair task.
            </summary>
            <remarks>
            This API supports the Service Fabric platform; it is not meant to be used directly from your code.
            </remarks>
            <param name ="repairTaskUpdateHealthPolicyDescription">Describes the repair task healthy policy to be
            updated.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IRepairManagementClient.UpdateRepairExecutionStateAsync(Microsoft.ServiceFabric.Common.RepairTask,System.Threading.CancellationToken)">
            <summary>
            Updates the execution state of a repair task.
            </summary>
            <remarks>
            This API supports the Service Fabric platform; it is not meant to be used directly from your code.
            </remarks>
            <param name ="repairTask">Describes the repair task to be created or updated.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IReplicaClient">
            <summary>
            Interface containing methods for performing ReplicaClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IReplicaClient.GetReplicaInfoListAsync(Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the information about replicas of a Service Fabric service partition.
            </summary>
            <remarks>
            The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes
            the ID, role, status, health, node name, uptime, and other details about the replica.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IReplicaClient.GetReplicaInfoAsync(Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the information about a replica of a Service Fabric partition.
            </summary>
            <remarks>
            The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="replicaId">The identifier of the replica.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IReplicaClient.GetReplicaHealthAsync(Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the health of a Service Fabric stateful service replica or stateless service instance.
            </summary>
            <remarks>
            Gets the health of a Service Fabric replica.
            Use EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health
            state.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="replicaId">The identifier of the replica.</param>
            <param name ="eventsHealthStateFilter">Allows filtering the collection of HealthEvent objects returned based on
            health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then
            all of the events with HealthState value of OK (2) and Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IReplicaClient.GetReplicaHealthUsingPolicyAsync(Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId,System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.ApplicationHealthPolicy,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the health of a Service Fabric stateful service replica or stateless service instance using the specified
            policy.
            </summary>
            <remarks>
            Gets the health of a Service Fabric stateful service replica or stateless service instance.
            Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
            state.
            Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only
            uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while
            evaluating the health of the replica.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="replicaId">The identifier of the replica.</param>
            <param name ="eventsHealthStateFilter">Allows filtering the collection of HealthEvent objects returned based on
            health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then
            all of the events with HealthState value of OK (2) and Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="applicationHealthPolicy">Describes the health policies used to evaluate the health of an application
            or one of its children.
            If not present, the health evaluation uses the health policy from application manifest or the default health
            policy.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IReplicaClient.ReportReplicaHealthAsync(Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId,System.Nullable{Microsoft.ServiceFabric.Common.ReplicaHealthReportServiceKind},Microsoft.ServiceFabric.Common.HealthInformation,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Sends a health report on the Service Fabric replica.
            </summary>
            <remarks>
            Reports health state of the specified Service Fabric replica. The report must contain the information about the
            source of the health report and property on which it is reported.
            The report is sent to a Service Fabric gateway Replica, which forwards to the health store.
            The report may be accepted by the gateway, but rejected by the health store after extra validation.
            For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
            To see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears
            in the HealthEvents section.
            </remarks>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="replicaId">The identifier of the replica.</param>
            <param name ="serviceKind">The kind of service replica (Stateless or Stateful) for which the health is being
            reported. Following are the possible values. Possible values include: 'Stateless', 'Stateful'</param>
            <param name ="healthInformation">Describes the health information for the health report. This information needs to
            be present in all of the health reports sent to the health manager.</param>
            <param name ="immediate">A flag that indicates whether the report should be sent immediately.
            A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
            If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of
            the fabric client settings that the HTTP Gateway Application is using.
            This is useful for critical reports that should be sent as soon as possible.
            Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is
            closed or the message doesn't reach the Gateway.
            If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway.
            Therefore, it will be batched according to the HealthReportSendInterval configuration.
            This is the recommended setting because it allows the health client to optimize health reporting messages to health
            store as well as health report processing.
            By default, reports are not sent immediately.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IReplicaClient.GetDeployedServiceReplicaInfoListAsync(Microsoft.ServiceFabric.Common.NodeName,System.String,Microsoft.ServiceFabric.Common.PartitionId,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the list of replicas deployed on a Service Fabric node.
            </summary>
            <remarks>
            Gets the list containing the information about replicas deployed on a Service Fabric node. The information include
            partition ID, replica ID, status of the replica, name of the service, name of the service type, and other
            information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed
            replicas matching the specified values for those parameters.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="serviceManifestName">The name of a service manifest registered as part of an application type in a
            Service Fabric cluster.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IReplicaClient.GetDeployedServiceReplicaDetailInfoAsync(Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the details of replica deployed on a Service Fabric node.
            </summary>
            <remarks>
            Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service
            name, current service operation, current service operation start date time, partition ID, replica/instance ID,
            reported load, and other information.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="replicaId">The identifier of the replica.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IReplicaClient.GetDeployedServiceReplicaDetailInfoByPartitionIdAsync(Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the details of replica deployed on a Service Fabric node.
            </summary>
            <remarks>
            Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service
            name, current service operation, current service operation start date time, partition ID, replica/instance ID,
            reported load, and other information.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IReplicaClient.RestartReplicaAsync(Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Restarts a service replica of a persisted service running on a node.
            </summary>
            <remarks>
            Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks performed
            when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="replicaId">The identifier of the replica.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IReplicaClient.RemoveReplicaAsync(Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Removes a service replica running on a node.
            </summary>
            <remarks>
            This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The
            removal closes the replica, transitions the replica to the role None, and then removes all of the state information
            of the replica from the cluster. This API tests the replica state removal path, and simulates the report fault
            permanent path through client APIs. Warning - There are no safety checks performed when this API is used. Incorrect
            use of this API can lead to data loss for stateful services. In addition, the forceRemove flag impacts all other
            replicas hosted in the same process.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="replicaId">The identifier of the replica.</param>
            <param name ="forceRemove">Remove a Service Fabric application or service forcefully without going through the
            graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which
            delete is timing out due to issues in the service code that prevents graceful close of replicas.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IServiceClient">
            <summary>
            Interface containing methods for performing ServiceClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServiceClient.GetServiceInfoListAsync(System.String,System.String,Microsoft.ServiceFabric.Common.ContinuationToken,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the information about all services belonging to the application specified by the application ID.
            </summary>
            <remarks>
            Returns the information about all services belonging to the application specified by the application ID.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="serviceTypeName">The service type name used to filter the services to query for.</param>
            <param name ="continuationToken">The continuation token to obtain next set of results</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServiceClient.GetServiceInfoAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the information about the specific service belonging to the Service Fabric application.
            </summary>
            <remarks>
            Returns the information about the specified service belonging to the specified Service Fabric application.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServiceClient.GetApplicationNameInfoAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the name of the Service Fabric application for a service.
            </summary>
            <remarks>
            Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned
            if a service with the provided service ID does not exist.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServiceClient.CreateServiceAsync(System.String,Microsoft.ServiceFabric.Common.ServiceDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Creates the specified Service Fabric service.
            </summary>
            <remarks>
            This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric
            application. The description for creating the service includes partitioning information and optional properties for
            placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="serviceDescription">The information necessary to create a service.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServiceClient.CreateServiceFromTemplateAsync(System.String,Microsoft.ServiceFabric.Common.ServiceFromTemplateDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Creates a Service Fabric service from the service template.
            </summary>
            <remarks>
            Creates a Service Fabric service from the service template defined in the application manifest. A service template
            contains the properties that will be same for the service instance of the same type. The API allows overriding the
            properties that are usually different for different services of the same service type.
            </remarks>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="serviceFromTemplateDescription">Describes the service that needs to be created from the template
            defined in the application manifest.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServiceClient.DeleteServiceAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Deletes an existing Service Fabric service.
            </summary>
            <remarks>
            A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas
            in a graceful manner and then delete the service. However, if the service is having issues closing the replica
            gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the
            graceful close sequence and forcefully delete the service.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="forceRemove">Remove a Service Fabric application or service forcefully without going through the
            graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which
            delete is timing out due to issues in the service code that prevents graceful close of replicas.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServiceClient.UpdateServiceAsync(System.String,Microsoft.ServiceFabric.Common.ServiceUpdateDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Updates a Service Fabric service using the specified update description.
            </summary>
            <remarks>
            This API allows updating properties of a running Service Fabric service. The set of properties that can be updated
            are a subset of the properties that were specified at the time of creating the service. The current set of
            properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running
            service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long
            running background operation that involves moving the application from one version to another, one upgrade domain
            at a time, whereas update applies the new properties immediately to the service.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="serviceUpdateDescription">The information necessary to update a service.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServiceClient.GetServiceDescriptionAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the description of an existing Service Fabric service.
            </summary>
            <remarks>
            Gets the description of an existing Service Fabric service. A service must be created before its description can be
            obtained.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServiceClient.GetServiceHealthAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the health of the specified Service Fabric service.
            </summary>
            <remarks>
            Gets the health information of the specified service.
            Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health
            state.
            Use PartitionsHealthStateFilter to filter the collection of partitions returned.
            If you specify a service that does not exist in the health store, this request returns an error.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="eventsHealthStateFilter">Allows filtering the collection of HealthEvent objects returned based on
            health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then
            all of the events with HealthState value of OK (2) and Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="partitionsHealthStateFilter">Allows filtering of the partitions health state objects returned in the
            result of service health query based on their health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health
            state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these value
            obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with
            HealthState value of OK (2) and Warning (4) will be returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="excludeHealthStatistics">Indicates whether the health statistics should be returned as part of the
            query result. False by default.
            The statistics show the number of children entities in health state Ok, Warning, and Error.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServiceClient.GetServiceHealthUsingPolicyAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.ApplicationHealthPolicy,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the health of the specified Service Fabric service, by using the specified health policy.
            </summary>
            <remarks>
            Gets the health information of the specified service.
            If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
            If the policy is not specified, the health evaluation uses the application health policy defined in the application
            manifest, or the default health policy, if no policy is defined in the manifest.
            Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health
            state.
            Use PartitionsHealthStateFilter to filter the collection of partitions returned.
            If you specify a service that does not exist in the health store, this request returns an error.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="eventsHealthStateFilter">Allows filtering the collection of HealthEvent objects returned based on
            health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then
            all of the events with HealthState value of OK (2) and Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="partitionsHealthStateFilter">Allows filtering of the partitions health state objects returned in the
            result of service health query based on their health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health
            state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these value
            obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with
            HealthState value of OK (2) and Warning (4) will be returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="applicationHealthPolicy">Describes the health policies used to evaluate the health of an application
            or one of its children.
            If not present, the health evaluation uses the health policy from application manifest or the default health
            policy.
            </param>
            <param name ="excludeHealthStatistics">Indicates whether the health statistics should be returned as part of the
            query result. False by default.
            The statistics show the number of children entities in health state Ok, Warning, and Error.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServiceClient.ReportServiceHealthAsync(System.String,Microsoft.ServiceFabric.Common.HealthInformation,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Sends a health report on the Service Fabric service.
            </summary>
            <remarks>
            Reports health state of the specified Service Fabric service. The report must contain the information about the
            source of the health report and property on which it is reported.
            The report is sent to a Service Fabric gateway Service, which forwards to the health store.
            The report may be accepted by the gateway, but rejected by the health store after extra validation.
            For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
            To see whether the report was applied in the health store, run GetServiceHealth and check that the report appears
            in the HealthEvents section.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="healthInformation">Describes the health information for the health report. This information needs to
            be present in all of the health reports sent to the health manager.</param>
            <param name ="immediate">A flag that indicates whether the report should be sent immediately.
            A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
            If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of
            the fabric client settings that the HTTP Gateway Application is using.
            This is useful for critical reports that should be sent as soon as possible.
            Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is
            closed or the message doesn't reach the Gateway.
            If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway.
            Therefore, it will be batched according to the HealthReportSendInterval configuration.
            This is the recommended setting because it allows the health client to optimize health reporting messages to health
            store as well as health report processing.
            By default, reports are not sent immediately.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServiceClient.ResolveServiceAsync(System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Resolve a Service Fabric partition.
            </summary>
            <remarks>
            Resolve a Service Fabric service partition to get the endpoints of the service replicas.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="partitionKeyType">Key type for the partition. This parameter is required if the partition scheme for
            the service is Int64Range or Named. The possible values are following.
            - None (1) - Indicates that the PartitionKeyValue parameter is not specified. This is valid for the partitions with
            partitioning scheme as Singleton. This is the default value. The value is 1.
            - Int64Range (2) - Indicates that the PartitionKeyValue parameter is an int64 partition key. This is valid for the
            partitions with partitioning scheme as Int64Range. The value is 2.
            - Named (3) - Indicates that the PartitionKeyValue parameter is a name of the partition. This is valid for the
            partitions with partitioning scheme as Named. The value is 3.
            </param>
            <param name ="partitionKeyValue">Partition key. This is required if the partition scheme for the service is
            Int64Range or Named.
            This is not the partition ID, but rather, either the integer key value, or the name of the partition ID.
            For example, if your service is using ranged partitions from 0 to 10, then they PartitionKeyValue would be an
            integer in that range. Query service description to see the range or name.
            </param>
            <param name ="previousRspVersion">The value in the Version field of the response that was received previously. This
            is required if the user knows that the result that was gotten previously is stale.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServiceClient.GetUnplacedReplicaInformationAsync(System.String,Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the information about unplaced replica of the service.
            </summary>
            <remarks>
            Returns the information about the unplaced replicas of the service.
            If PartitionId is specified, then result will contain information only about unplaced replicas for that partition.
            If PartitionId is not specified, then result will contain information about unplaced replicas for all partitions of
            that service.
            If OnlyQueryPrimaries is set to true, then result will contain information only about primary replicas, and will
            ignore unplaced secondary replicas.
            </remarks>
            <param name ="serviceId">The identity of the service. This ID is typically the full name of the service without the
            'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
            6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name ="partitionId">The identity of the partition.</param>
            <param name ="onlyQueryPrimaries">Indicates that unplaced replica information will be queries only for primary
            replicas.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IServicePackageClient">
            <summary>
            Interface containing methods for performing ServicePackageClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServicePackageClient.GetDeployedServicePackageInfoListAsync(Microsoft.ServiceFabric.Common.NodeName,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the list of service packages deployed on a Service Fabric node.
            </summary>
            <remarks>
            Returns the information about the service packages deployed on a Service Fabric node for the given application.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServicePackageClient.GetDeployedServicePackageInfoListByNameAsync(Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the list of service packages deployed on a Service Fabric node matching exactly the specified name.
            </summary>
            <remarks>
            Returns the information about the service packages deployed on a Service Fabric node for the given application.
            These results are of service packages whose name match exactly the service package name specified as the parameter.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="servicePackageName">The name of the service package.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServicePackageClient.GetDeployedServicePackageHealthAsync(Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the information about health of a service package for a specific application deployed for a Service Fabric
            node and application.
            </summary>
            <remarks>
            Gets the information about health of a service package for a specific application deployed on a Service Fabric
            node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the
            deployed service package based on health state.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="servicePackageName">The name of the service package.</param>
            <param name ="eventsHealthStateFilter">Allows filtering the collection of HealthEvent objects returned based on
            health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then
            all of the events with HealthState value of OK (2) and Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServicePackageClient.GetDeployedServicePackageHealthUsingPolicyAsync(Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.ApplicationHealthPolicy,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the information about health of service package for a specific application deployed on a Service Fabric node
            using the specified policy.
            </summary>
            <remarks>
            Gets the information about health of a service package for a specific application deployed on a Service Fabric
            node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of
            HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy to
            optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError'
            field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the
            deployed service package.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="servicePackageName">The name of the service package.</param>
            <param name ="eventsHealthStateFilter">Allows filtering the collection of HealthEvent objects returned based on
            health state.
            The possible values for this parameter include integer value of one of the following health states.
            Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
            If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
            combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then
            all of the events with HealthState value of OK (2) and Warning (4) are returned.
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name ="applicationHealthPolicy">Describes the health policies used to evaluate the health of an application
            or one of its children.
            If not present, the health evaluation uses the health policy from application manifest or the default health
            policy.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServicePackageClient.ReportDeployedServicePackageHealthAsync(Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,Microsoft.ServiceFabric.Common.HealthInformation,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Sends a health report on the Service Fabric deployed service package.
            </summary>
            <remarks>
            Reports health state of the service package of the application deployed on a Service Fabric node. The report must
            contain the information about the source of the health report and property on which it is reported.
            The report is sent to a Service Fabric gateway Service, which forwards to the health store.
            The report may be accepted by the gateway, but rejected by the health store after extra validation.
            For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
            To see whether the report was applied in the health store, get deployed service package health and check that the
            report appears in the HealthEvents section.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="servicePackageName">The name of the service package.</param>
            <param name ="healthInformation">Describes the health information for the health report. This information needs to
            be present in all of the health reports sent to the health manager.</param>
            <param name ="immediate">A flag that indicates whether the report should be sent immediately.
            A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
            If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of
            the fabric client settings that the HTTP Gateway Application is using.
            This is useful for critical reports that should be sent as soon as possible.
            Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is
            closed or the message doesn't reach the Gateway.
            If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway.
            Therefore, it will be batched according to the HealthReportSendInterval configuration.
            This is the recommended setting because it allows the health client to optimize health reporting messages to health
            store as well as health report processing.
            By default, reports are not sent immediately.
            </param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServicePackageClient.DeployServicePackageToNodeAsync(Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.DeployServicePackageToNodeDescription,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Downloads all of the code packages associated with specified service manifest on the specified node.
            </summary>
            <remarks>
            This API provides a way to download code packages including the container images on a specific node outside of the
            normal application deployment and upgrade path. This is useful for the large code packages and container images to
            be present on the node before the actual application deployment and upgrade, thus significantly reducing the total
            time required for the deployment or upgrade.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="deployServicePackageToNodeDescription">Describes information for deploying a service package to a
            Service Fabric node.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IServiceTypeClient">
            <summary>
            Interface containing methods for performing ServiceTypeClient operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServiceTypeClient.GetServiceTypeInfoListAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the list containing the information about service types that are supported by a provisioned application type
            in a Service Fabric cluster.
            </summary>
            <remarks>
            Gets the list containing the information about service types that are supported by a provisioned application type
            in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
            </remarks>
            <param name ="applicationTypeName">The name of the application type.</param>
            <param name ="applicationTypeVersion">The version of the application type.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServiceTypeClient.GetServiceTypeInfoByNameAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the information about a specific service type that is supported by a provisioned application type in a Service
            Fabric cluster.
            </summary>
            <remarks>
            Gets the information about a specific service type that is supported by a provisioned application type in a Service
            Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204 response is
            returned if the specified service type is not found in the cluster.
            </remarks>
            <param name ="applicationTypeName">The name of the application type.</param>
            <param name ="applicationTypeVersion">The version of the application type.</param>
            <param name ="serviceTypeName">Specifies the name of a Service Fabric service type.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServiceTypeClient.GetServiceManifestAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the manifest describing a service type.
            </summary>
            <remarks>
            Gets the manifest describing a service type. The response contains the service manifest XML as a string.
            </remarks>
            <param name ="applicationTypeName">The name of the application type.</param>
            <param name ="applicationTypeVersion">The version of the application type.</param>
            <param name ="serviceManifestName">The name of a service manifest registered as part of an application type in a
            Service Fabric cluster.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServiceTypeClient.GetDeployedServiceTypeInfoListAsync(Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the list containing the information about service types from the applications deployed on a node in a Service
            Fabric cluster.
            </summary>
            <remarks>
            Gets the list containing the information about service types from the applications deployed on a node in a Service
            Fabric cluster. The response includes the name of the service type, its registration status, the code package that
            registered it and activation ID of the service package.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="serviceManifestName">The name of the service manifest to filter the list of deployed service type
            information. If specified, the response will only contain the information about service types that are defined in
            this service manifest.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.IServiceTypeClient.GetDeployedServiceTypeInfoByNameAsync(Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the information about a specified service type of the application deployed on a node in a Service Fabric
            cluster.
            </summary>
            <remarks>
            Gets the list containing the information about a specific service type from the applications deployed on a node in
            a Service Fabric cluster. The response includes the name of the service type, its registration status, the code
            package that registered it and activation ID of the service package. Each entry represents one activation of a
            service type, differentiated by the activation ID.
            </remarks>
            <param name ="nodeName">The name of the node.</param>
            <param name ="applicationId">The identity of the application. This is typically the full name of the application
            without the 'fabric:' URI scheme.
            Starting from version 6.0, hierarchical names are delimited with the "~" character.
            For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in
            6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name ="serviceTypeName">Specifies the name of a Service Fabric service type.</param>
            <param name ="serviceManifestName">The name of the service manifest to filter the list of deployed service type
            information. If specified, the response will only contain the information about service types that are defined in
            this service manifest.</param>
            <param name ="serverTimeout">The server timeout for performing the operation in seconds. This timeout specifies the
            time duration that the client is willing to wait for the requested operation to complete. The default value for
            this parameter is 60 seconds.</param>
            <param name ="cancellationToken">Cancels the client-side operation.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.InvalidCredentialsException">Thrown when invalid credentials are used while making request to cluster.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Client.Exceptions.ServiceFabricRequestException">Thrown when request to Service Fabric cluster failed due to an underlying issue such as network connectivity, DNS failure or timeout.</exception>
            <exception cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">Thrown when the requested operation failed at server. Exception contains Error code <see cref="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode"/>, message indicating the failure. It also contains a flag wether the exception is transient or not, client operations can be retried if its transient.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when cancellation is requested for the cancellation token.</exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.IServiceFabricClient">
            <summary>
            Interface for Service Fabric client.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.Applications">
            <summary>
            Gets Application Client to performs management operations on applications.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IApplicationClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.ApplicationTypes">
            <summary>
            Gets ApplicationType Client to performs management operations on application types.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IApplicationTypeClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.BackupRestore">
            <summary>
            Gets BackupRestore to perform backup and restore operations.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IBackupRestoreClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.ChaosClient">
            <summary>
            Gets Chaos Client to perform chaos operations.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IChaosClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.Cluster">
            <summary>
            Gets Cluster Client to perform cluster operations.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IClusterClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.CodePackages">
            <summary>
            Gets CodePackage Client to perform operations on a code package.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.ICodePackageClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.ComposeDeployments">
            <summary>
            Gets ComposeDeployment Client to perform compose deployment related operations.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IComposeDeploymentClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.Faults">
            <summary>
            Gets Faults Client to perform Faults in the cluster application and services.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IFaultsClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.ImageStore">
            <summary>
            Gets ImageStore Client to performs management operations on image store.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IImageStoreClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.Infrastructure">
            <summary>
            Gets Infrastructure Client to perform operations for Infrastructure service..
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IInfrastructureClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.Nodes">
            <summary>
            Gets Node Client to performs management operations for nodes in the cluster.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.INodeClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.Partitions">
            <summary>
            Gets Partition Client to performs management operations on partitions.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IPartitionClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.Properties">
            <summary>
            Gets Property Client to manage properties.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IPropertyManagementClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.Replicas">
            <summary>
            Gets Replica Client to performs management operations on service replicas.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IReplicaClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.Repairs">
            <summary>
            Gets Repair management client to performs repair operations..
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IRepairManagementClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.Services">
            <summary>
            Gets Service Client to performs management operations on services.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IServiceClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.ServicePackages">
            <summary>
            Gets ServicePackage Client to performs management operations on service packages.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IServicePackageClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.ServiceTypes">
            <summary>
            Gets ServiceType Client to performs management operations on service types.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IServiceTypeClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.EventsStore">
            <summary>
            Gets EventStore Client to query events related to applciaitons, services replicas and contianers..
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IEventsStoreClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.MeshApplications">
            <summary>
            Gets ApplicationResource Client to perform management operations on application resources.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IMeshApplicationsClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.MeshVolumes">
            <summary>
            Gets VolumeResource Client to perform management operations on volume resources.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IMeshVolumesClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.MeshSecrets">
            <summary>
            Gets MeshSecrets Client to perform management operations on Secret resources.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IMeshSecretsClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.MeshSecretValues">
            <summary>
            Gets MeshSecretValues Client to perform management operations for Secret Values.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IMeshSecretsClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.MeshGateways">
            <summary>
            Gets MeshGateways Client to perform management operations for Gateways.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IMeshGatewaysClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.MeshNetworks">
            <summary>
            Gets MeshNetworks Client to perform management operations for Networks.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IMeshNetworksClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.MeshServices">
            <summary>
            Gets MeshServices Client to perform management operations for Services.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IMeshServicesClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.MeshServiceReplicas">
            <summary>
            Gets MeshServiceReplicas Client to perform management operations for Service Replicas.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IMeshServiceReplicasClient"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.IServiceFabricClient.MeshCodePackages">
            <summary>
            Gets MeshCodePackages to perform management operations for Service code packages.
            </summary>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.IMeshServiceReplicasClient"/></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.Resources.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.Resources.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.Resources.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.Resources.SR.ErrorClusterEndpointNotProvided">
            <summary>
              Looks up a localized string similar to Cluster endpoint is not provided. Collection must have atleast one endpoint..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.Resources.SR.ErrorDstsNotSupported">
            <summary>
              Looks up a localized string similar to DSTS option is not supported in the current configuration. Its supported only in internal Service Fabric tooling drops..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.Resources.SR.ErrorListenerNotFound">
            <summary>
              Looks up a localized string similar to Service replica did not publish an address for listener with name name &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.Resources.SR.ErrorServiceFabricObjectClosed">
            <summary>
              Looks up a localized string similar to The Service Fabric object has been closed. Attempting to use the object after it has been closed is not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.Resources.SR.ErrorServiceFabricObjectNotOpen">
            <summary>
              Looks up a localized string similar to The Service Fabric object has not been opened..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.Resources.SR.ErrorUrlCannotBeNull">
            <summary>
              Looks up a localized string similar to Cluster endpoint in collection cannot be null..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.Resources.SR.ErrorUrlScheme">
            <summary>
              Looks up a localized string similar to Cluster http management endpoint url scheme doesnt match with SecuritySettings type. Url scheme is {0}, expected as per security settings is {1}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.Resources.SR.ErrorUrlSchemeMismatch">
            <summary>
              Looks up a localized string similar to All management endponts must have same url scheme.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.ServerCertificateValidator">
            <summary>
            Class to verify the remote Secure Sockets Layer (SSL) certificate used for authentication.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Client.ServerCertificateValidator.slimRWLock">
            <summary>
            Protects upgrading the remoteX509SecuritySettings while Cert Validation callback is in progress.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ServerCertificateValidator.#ctor(Microsoft.ServiceFabric.Common.Security.RemoteX509SecuritySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Client.ServerCertificateValidator"/> class to perform remote certificate validation using <paramref name="remoteX509SecuritySettings"/>
            </summary>
            <param name="remoteX509SecuritySettings">Settings to validate remote certificate.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ServerCertificateValidator.UpdateSecuritySettings(Microsoft.ServiceFabric.Common.Security.RemoteX509SecuritySettings)">
            <summary>
            Updates the <see cref="T:Microsoft.ServiceFabric.Common.Security.RemoteX509SecuritySettings"/> to validate remote certificate.
            </summary>
            /// <param name="remoteX509SecuritySettings">Settings to validate remote certificate.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ServerCertificateValidator.ValidateCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Callback to Verify the remote Secure Sockets Layer (SSL) certificate used for authentication.
            </summary>
            <param name="sender">An object that contains state information for this validation.</param>
            <param name="cert">The certificate used to authenticate the remote party.</param>
            <param name="chain">The chain of certificate authorities associated with the remote certificate.</param>
            <param name="sslPolicyErrors">One or more errors associated with the remote certificate.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value that determines whether the specified certificate is accepted for authentication.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ServerCertificateValidator.ValidateServerCertificateX509Name(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Function to Verify the remote certificate used using <see cref="T:Microsoft.ServiceFabric.Common.Security.X509Name"/>
            </summary>
            <param name="cert">The certificate used to authenticate the remote party.</param>
            <param name="chain">The chain of certificate authorities associated with the remote certificate.</param>
            <param name="sslPolicyErrors">One or more errors associated with the remote certificate.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value that determines whether the specified certificate is accepted for authentication.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ServerCertificateValidator.ValidateServerCertificateWithThumbprint(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Function to Verify the remote certificate using thumbprints.
            </summary>
            <param name="cert">The certificate used to authenticate the remote party.</param>
            <param name="chain">The chain of certificate authorities associated with the remote certificate.</param>
            <param name="sslPolicyErrors">One or more errors associated with the remote certificate.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value that determines whether the specified certificate is accepted for authentication.
            </returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.ServiceFabricClient">
            <summary>
            Represents the base class for the Service Fabric client.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ServiceFabricClient.#ctor(System.Collections.Generic.IReadOnlyList{System.Uri},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.ServiceFabric.Common.Security.SecuritySettings}},Microsoft.ServiceFabric.Client.ClientSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Client.ServiceFabricClient"/> class.
            </summary>
            <param name="clusterEndpoints">Uris for Service Cluster management endpoint.</param>
            <param name="securitySettings">A delegate to get ClaimsSecuritySettings.</param>
            <param name="clientSettings">Client settings for connecting to cluster. Default value is null which means connecting to unsecured cluster.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.Applications">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.ApplicationTypes">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.BackupRestore">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.ChaosClient">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.Cluster">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.CodePackages">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.ComposeDeployments">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.Faults">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.ImageStore">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.Infrastructure">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.Nodes">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.Partitions">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.Properties">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.Replicas">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.Repairs">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.Services">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.ServicePackages">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.ServiceTypes">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.EventsStore">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.MeshApplications">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.MeshVolumes">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.MeshSecrets">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.MeshSecretValues">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.MeshNetworks">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.MeshGateways">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.MeshServices">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.MeshCodePackages">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.MeshServiceReplicas">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.ClientSettings">
            <summary>
            Gets the client settings for connecting to cluster.
            </summary>
            <value><see cref="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.ClientSettings"/> for connecting to cluster.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.SecuritySettingsFunc">
            <summary>
            Gets the delegate to create security settings for connecting to cluster.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Common.Security.SecuritySettings"/> for connecting to cluster.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClient.ClusterEndpoints">
            <summary>
            Gets the Uri for Service Cluster management endpoint.
            </summary>
            <value>Cluster endpoint <see cref="T:System.Uri"/> .</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ServiceFabricClient.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.ServiceFabric.Client.ServiceFabricClientBuilder">
            <summary>
            A Builder for IServiceFabricClient
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ServiceFabricClientBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Client.ServiceFabricClientBuilder"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClientBuilder.SecuritySettings">
            <summary>
            Gets delegate to create security settings for connecting to cluster.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClientBuilder.Endpoints">
            <summary>
            Gets endpoints for the cluster.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClientBuilder.ClientSettings">
            <summary>
            Gets the client settings for connecting to cluster.
            </summary>
            <value><see cref="P:Microsoft.ServiceFabric.Client.ServiceFabricClientBuilder.ClientSettings"/> for connecting to cluster.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Client.ServiceFabricClientBuilder.Container">
            <summary>
            Gets a container to hold objects needed which are not common to all client implementaions but are needed to Build specific clients.
            Using this Container, allows this assembly from not needing the extra references required by client implementations.
            eg: ServiceFabricHttpClient may need extra instaces like HjttpClientHandler and DelegatingHandler.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ServiceFabricClientBuilder.BuildAsync(System.Threading.CancellationToken)">
            <summary>
            Builds an <see cref="T:Microsoft.ServiceFabric.Client.IServiceFabricClient"/> to perform operations against a Service Fabric cluster.
            </summary>
            <param name="cancellationToken">A cancellation token to cancel the async operation.</param>
            <returns>IMplementation of <see cref="T:Microsoft.ServiceFabric.Client.IServiceFabricClient"/>.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ServiceFabricClientBuilder.UseAzureActiveDirectorySecurity(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.ServiceFabric.Common.Security.SecuritySettings}})">
            <summary>
            Configures <see cref="T:Microsoft.ServiceFabric.Client.IServiceFabricClient"/> to connect to a Service Fabric cluster secured with Azure Active Directory. Use this method if you dont have the metadata to get Token from AAD.
            </summary>
            <param name="securitySettings">A delegate to get AzureActiveDirectorySecuritySettings.</param>
            <returns>Returns an IServiceFabricClientBuilder.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ServiceFabricClientBuilder.UseClaimsSecurity(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.ServiceFabric.Common.Security.SecuritySettings}})">
            <summary>
            Configures <see cref="T:Microsoft.ServiceFabric.Client.IServiceFabricClient"/> to connect to a Service Fabric cluster secured with token acquired from a STS (security token service).
            </summary>
            <param name="securitySettings">A delegate to get ClaimsSecuritySettings.</param>
            <returns>Returns an IServiceFabricClientBuilder.</returns>
            <remarks>
            Security Settings for connecting to a secured cluster are created by calling the delegate <paramref name="securitySettings"/>.
            The delegate will be used to refresh security settings if needed by implementaions of <see cref="T:Microsoft.ServiceFabric.Client.IServiceFabricClient"/>.
            If client request fails because of Authentication, the delegate is invoked once again to get security settings, if the client call fails again because of Authentication after getting 
            security settings, the exception is thrown to the user. This allows applications to refresh Claims an X509 security credentials without restarting.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ServiceFabricClientBuilder.UseWindowsSecurity">
            <summary>
            Configures <see cref="T:Microsoft.ServiceFabric.Client.IServiceFabricClient"/> to connect to a Service Fabric cluster secured with Windows credentials.
            </summary>
            <returns>Returns an IServiceFabricClientBuilder.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ServiceFabricClientBuilder.UseX509Security(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.ServiceFabric.Common.Security.SecuritySettings}})">
            <summary>
            Configures <see cref="T:Microsoft.ServiceFabric.Client.IServiceFabricClient"/> to connect to a Service Fabric cluster secured with X509 certificates.
            </summary>
            <param name="securitySettings">A delegate to get X509SecuritySettings.</param>
            <returns>Returns an IServiceFabricClientBuilder.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ServiceFabricClientBuilder.UseEndpoints(System.Uri[])">
            <summary>
            Sets endpoints for the Service Fabric cluster to talk to.
            </summary>
            <param name="clusterEndpoints">Service Fabric cluster endpoints.</param>
            <returns>Returns an IServiceFabricClientBuilder.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Client.ServiceFabricClientBuilder.ConfigureClientSettings(System.Action{Microsoft.ServiceFabric.Client.ClientSettings})">
            <summary>
            Configures various timeout settings for the IServiceFabricClient.
            </summary>
            <param name="configureClientSettings">The delegate for configuring the <see cref="P:Microsoft.ServiceFabric.Client.ServiceFabricClientBuilder.ClientSettings"/>.</param>
            <returns>The <see cref="T:Microsoft.ServiceFabric.Client.ServiceFabricClientBuilder"/></returns>
        </member>
    </members>
</doc>
