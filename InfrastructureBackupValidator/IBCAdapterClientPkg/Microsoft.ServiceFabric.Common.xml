<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ServiceFabric.Common</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationName">
            <summary>
            Represents a Service Fabric application name.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.ApplicationName"/> class by using the value represented by the specified string.
            </summary>
            <param name="applicationName">A string for the application name.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationName.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.ApplicationName"/> class by using the value represented by the specified uri.
            </summary>
            <param name="applicationUri">A uri for the application name.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationName.op_Implicit(System.String)~Microsoft.ServiceFabric.Common.ApplicationName">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.ApplicationName"/> class by using the value represented by the specified string.
            </summary>
            <param name="applicationName">A string for the application name.</param>
            <value>New instance of the <see cref="T:Microsoft.ServiceFabric.Common.ApplicationName"/> class.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationName.op_Implicit(System.Uri)~Microsoft.ServiceFabric.Common.ApplicationName">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.ApplicationName"/> class by using the value represented by the specified uri.
            </summary>
            <param name="applicationName">A uri for the application name.</param>
            <value>New instance of the <see cref="T:Microsoft.ServiceFabric.Common.ApplicationName"/> class.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ArgumentVerifier">
            <summary>
            A utility class to perform argument validations. 
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ArgumentVerifier.ThrowIfNull(System.Object,System.String)">
            <summary>
            Throws ArgumentNullException if argument is null.
            </summary>
            <param name="value">Argument value to check.</param>
            <param name="name">Name of Argument.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ArgumentVerifier.CheckNotNull``1(``0,System.String)">
            <summary>
            Checks if the argument is null, throws ArgumentNullException if tis null else returns the value.
            </summary>
            <param name="value">Argument value to check.</param>
            <param name="name">Name of Argument.</param>
            <returns>Value returned if its not null.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ArgumentVerifier.ThrowIfOutOfInclusiveRange(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Throw ArgumentOutOfRangeException  if value is out of range
            </summary>
            <param name="value">Argument value to check.</param>
            <param name="name">Name of Argument.</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum Value.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ArgumentVerifier.ThrowIfLessThan(System.Int32,System.String,System.Int32)">
            <summary>
            Throw ArgumentOutOfRangeException  if value is less than min value
            </summary>
            <param name="value">Argument value to check.</param>
            <param name="name">Name of Argument.</param>
            <param name="minValue">Minimum value.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ArgumentVerifier.ThrowIfGreaterThan(System.Int32,System.String,System.Int32)">
            <summary>
            Throw ArgumentOutOfRangeException  if value is greater than max value
            </summary>
            <param name="value">Argument value to check.</param>
            <param name="name">Name of Argument.</param>
            <param name="maxValue">Maximum value.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ArgumentVerifier.ThrowIfOutOfInclusiveRange(System.Int64,System.String,System.Int64,System.Int64)">
            <summary>
            Throw ArgumentOutOfRangeException  if value is out of range
            </summary>
            <param name="value">Argument value to check.</param>
            <param name="name">Name of Argument.</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum Value.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ArgumentVerifier.ThrowIfLessThan(System.Int64,System.String,System.Int64)">
            <summary>
            Throw ArgumentOutOfRangeException  if value is less than min value
            </summary>
            <param name="value">Argument value to check.</param>
            <param name="name">Name of Argument.</param>
            <param name="minValue">Minimum value.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ArgumentVerifier.ThrowIfGreaterThan(System.Int64,System.String,System.Int64)">
            <summary>
            Throw ArgumentOutOfRangeException  if value is greater than max value
            </summary>
            <param name="value">Argument value to check.</param>
            <param name="name">Name of Argument.</param>
            <param name="maxValue">Maximum value.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ContinuationToken">
            <summary>
            A token that is used in paged data queries to move to the next page of data.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ContinuationToken.Empty">
            <summary>
            An empty continuation token instance.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ContinuationToken.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.ContinuationToken"/> class.
            </summary>
            <param name="token">token used to retrieve the next set of available results.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContinuationToken.Next">
            <summary>
            Gets a value indicating whether a paged data operation has more data available on the server.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ContinuationToken.Equals(Microsoft.ServiceFabric.Common.ContinuationToken)">
            <summary>
            Determines if this ContinuationToken instance is equal to another instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns>true if other object is a <see cref="T:Microsoft.ServiceFabric.Common.ContinuationToken"/> that has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ContinuationToken.Equals(System.Object)">
            <summary>
            Determines if this ContinuationToken instance is equal to another object.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns>true if other object is a <see cref="T:Microsoft.ServiceFabric.Common.ContinuationToken"/> that has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ContinuationToken.GetHashCode">
            <summary>
            Gets the hash code of this instance.
            </summary>
            <returns>An integer hash of this instance's value.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ContinuationToken.ToString">
            <summary>
            Gets the string value of this object
            </summary>
            <returns>A string representing this object's value</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Exceptions.ErrorCodeExceptionMap">
            <summary>
            Contains mapping of <see cref="T:Microsoft.ServiceFabric.Common.FabricErrorCodes"/> to exception types.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException">
            <summary>
            Exception for service fabric operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException" /> class with error code <see cref="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.UNKNOWN"/>.</para>
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of <see cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException" /> class with error code <see cref="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.UNKNOWN"/> and a specified error message.</para>
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException"/> class with a specified error
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException.#ctor(Microsoft.ServiceFabric.Common.FabricErrorCodes,System.Boolean)">
            <summary>
            <para>Initializes a new instance of <see cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException" /> class with a specified error code.</para>
            </summary>
            <param name="errorCode">The error code associated with the exception.</param>
            <param name="isTransient">True, if the exception is to be treated as an transient exception.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException.#ctor(System.String,Microsoft.ServiceFabric.Common.FabricErrorCodes,System.Boolean)">
            <summary>
            <para>Initializes a new instance of <see cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException" /> class with specified error message and error code.</para>
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="errorCode">The error code associated with the exception.</param>
            <param name="isTransient">Indicating if its an transient exception. </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException.#ctor(System.String,System.Exception,Microsoft.ServiceFabric.Common.FabricErrorCodes,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException" /> class
            with a specified error message, a reference to the inner exception that is the cause of this exception, and a specified error code.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception or null if no inner exception is specified. The <see cref="T:System.Exception" /> class provides more details about the inner exception..</param>
            <param name="errorCode">The error code associated with the exception.</param>
            <param name="isTransient">Indicating if its an transient exception. </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of <see cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException" /> class from a serialized object data, with a specified context.</para>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data of the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The context parameter is reserved for future use and can be null.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException.ErrorCode">
            <summary>
            Gets the error code parameter.
            </summary>
            <value>The error code associated with the <see cref="T:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException" /> exception.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException.IsTransient">
            <summary>
            Gets a value indicating whether gets exception is Transient and operation can be retried.
            </summary>
            <value>Value indicating whether the exception is transient or not.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Exceptions.ServiceFabricException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FabricError">
            <summary>
            The REST API operations for Service Fabric return standard HTTP status codes. This type defines the additional
            information returned from the Service Fabric API operations that are not successful.
            </summary>
            <summary>
            The REST API operations for Service Fabric return standard HTTP status codes. This type defines the additional
            information returned from the Service Fabric API operations that are not successful.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FabricError.ErrorCode">
            <summary>
            Gets ErrorCode.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FabricError.Message">
            <summary>
            Gets error message.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FabricError.#ctor(Microsoft.ServiceFabric.Common.FabricErrorError)">
            <summary>
            Initializes a new instance of the FabricError class.
            </summary>
            <param name="error">Error object containing error code and error message.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FabricError.Error">
            <summary>
            Gets error object containing error code and error message.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.TokenServiceMetadata">
            <summary>
            Token Service metadata used for secured connection to cluster. For internal use only by Service Fabric tooling.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.TokenServiceMetadata.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the TokenServiceMetadata class.
            </summary>
            <param name="metadata">The metadata for the secure token service.</param>
            <param name="serviceName">The Service Name.</param>
            <param name="serviceDnsName">The Service Dns name.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.TokenServiceMetadata.Metadata">
            <summary>
            Gets the metadata.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.TokenServiceMetadata.ServiceName">
            <summary>
            Gets the Service name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.TokenServiceMetadata.ServiceDnsName">
            <summary>
            Gets the Service DNS Name.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FabricName">
            <summary>
            Represents a Service Fabric name.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricName.InvalidCharacters">
            <summary>
            List of characters not allowed in ServiceFabric name
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FabricName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.FabricName"/> class by using the value represented by the specified string.
            </summary>
            <param name="name">A string for the Service Fabric name.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FabricName.#ctor(Microsoft.ServiceFabric.Common.FabricName)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.FabricName"/> class by using the value represented by the specified string.
            </summary>
            <param name="name">Service Fabric name to create this isntance from..</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FabricName.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.FabricName"/> class by using the value represented by the specified uri.
            </summary>
            <param name="name">A uri for the Service Fabric name.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FabricName.op_Implicit(System.String)~Microsoft.ServiceFabric.Common.FabricName">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.FabricName"/> class by using the value represented by the specified string.
            </summary>
            <param name="name">A string for the Service Fabric name.</param>
            <value>New instance of the <see cref="T:Microsoft.ServiceFabric.Common.FabricName"/> class.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FabricName.op_Implicit(System.Uri)~Microsoft.ServiceFabric.Common.FabricName">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.FabricName"/> class by using the value represented by the specified uri.
            </summary>
            <param name="name">A string for the Service Fabric name.</param>
            <value>New instance of the <see cref="T:Microsoft.ServiceFabric.Common.FabricName"/> class.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FabricName.op_Equality(Microsoft.ServiceFabric.Common.FabricName,Microsoft.ServiceFabric.Common.FabricName)">
            <summary>
            Indicates whether the values of two specified objects are equal.
            </summary>
            <param name="name1">The first object to compare.</param>
            <param name="name2">The second object to compare</param>
            <returns>true if name1 and name2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FabricName.op_Inequality(Microsoft.ServiceFabric.Common.FabricName,Microsoft.ServiceFabric.Common.FabricName)">
            <summary>
            Indicates whether the values of two specified objects are not equal.
            </summary>
            <param name="name1">The first object to compare.</param>
            <param name="name2">The second object to compare</param>
            <returns>true if name1 and name2 are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FabricName.ToString">
            <summary>
            Returns a string representation of the value of this instance.
            </summary>
            <returns>string representation of the value of this instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FabricName.Equals(Microsoft.ServiceFabric.Common.FabricName)">
            <summary>
            Returns a value indicating whether this instance and a specified object represent the same value.
            </summary>
            <param name="other">An object to compare to this instance.</param>
            <returns>true if this instance equal to other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FabricName.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether this instance is equal to a specified object.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns>true if other object  has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FabricName.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FabricName.GetId">
            <summary>
            Returns the name without the 'fabric:' URI scheme.
            </summary>
            <returns>FabricName without the 'fabric:' URI scheme.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AadMetadata">
            <summary>
            Azure Active Directory metadata used for secured connection to cluster.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.AadMetadata.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the AadMetadata class.
            </summary>
            <param name="authority">The AAD authority url.</param>
            <param name="client">The AAD client application Id.</param>
            <param name="cluster">The AAD cluster application Id.</param>
            <param name="login">The AAD login url.</param>
            <param name="redirect">The client application redirect address.</param>
            <param name="tenant">The AAD tenant Id.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AadMetadata.Authority">
            <summary>
            Gets the AAD authority url.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AadMetadata.Client">
            <summary>
            Gets the AAD client application Id.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AadMetadata.Cluster">
            <summary>
            Gets the AAD cluster application Id.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AadMetadata.Login">
            <summary>
            Gets the AAD login url.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AadMetadata.Redirect">
            <summary>
            Gets the client application redirect address.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AadMetadata.Tenant">
            <summary>
            Gets the AAD tenant Id.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AadMetadataObject">
            <summary>
            Azure Active Directory metadata object used for secured connection to cluster.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.AadMetadataObject.#ctor(System.String,Microsoft.ServiceFabric.Common.AadMetadata)">
            <summary>
            Initializes a new instance of the AadMetadataObject class.
            </summary>
            <param name="type">The client authentication method.</param>
            <param name="metadata">Azure Active Directory metadata used for secured connection to cluster.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AadMetadataObject.Type">
            <summary>
            Gets the client authentication method.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AadMetadataObject.Metadata">
            <summary>
            Gets azure Active Directory metadata used for secured connection to cluster.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AddRemoveIncrementalNamedPartitionScalingMechanism">
            <summary>
            Represents a scaling mechanism for adding or removing named partitions of a stateless service. Partition names are
            in the format '0','1''N-1'
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.AddRemoveIncrementalNamedPartitionScalingMechanism.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the AddRemoveIncrementalNamedPartitionScalingMechanism class.
            </summary>
            <param name="minPartitionCount">Minimum number of named partitions of the service.</param>
            <param name="maxPartitionCount">Maximum number of named partitions of the service.</param>
            <param name="scaleIncrement">The number of instances to add or remove during a scaling operation.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AddRemoveIncrementalNamedPartitionScalingMechanism.MinPartitionCount">
            <summary>
            Gets minimum number of named partitions of the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AddRemoveIncrementalNamedPartitionScalingMechanism.MaxPartitionCount">
            <summary>
            Gets maximum number of named partitions of the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AddRemoveIncrementalNamedPartitionScalingMechanism.ScaleIncrement">
            <summary>
            Gets the number of instances to add or remove during a scaling operation.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AddRemoveReplicaScalingMechanism">
            <summary>
            Describes the horizontal auto scaling mechanism that adds or removes replicas (containers or container groups).
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.AddRemoveReplicaScalingMechanism.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the AddRemoveReplicaScalingMechanism class.
            </summary>
            <param name="minCount">Minimum number of containers (scale down won't be performed below this number).</param>
            <param name="maxCount">Maximum number of containers (scale up won't be performed above this number).</param>
            <param name="scaleIncrement">Each time auto scaling is performed, this number of containers will be added or
            removed.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AddRemoveReplicaScalingMechanism.MinCount">
            <summary>
            Gets minimum number of containers (scale down won't be performed below this number).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AddRemoveReplicaScalingMechanism.MaxCount">
            <summary>
            Gets maximum number of containers (scale up won't be performed above this number).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AddRemoveReplicaScalingMechanism.ScaleIncrement">
            <summary>
            Gets each time auto scaling is performed, this number of containers will be added or removed.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AnalysisEventMetadata">
            <summary>
            Metadata about an Analysis Event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.AnalysisEventMetadata.#ctor(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the AnalysisEventMetadata class.
            </summary>
            <param name="delay">The analysis delay.</param>
            <param name="duration">The duration of analysis.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AnalysisEventMetadata.Delay">
            <summary>
            Gets the analysis delay.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AnalysisEventMetadata.Duration">
            <summary>
            Gets the duration of analysis.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationBackupConfigurationInfo">
            <summary>
            Backup configuration information for a specific Service Fabric application specifying what backup policy is being
            applied and suspend description, if any.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationBackupConfigurationInfo.#ctor(System.String,System.Nullable{Microsoft.ServiceFabric.Common.BackupPolicyScope},Microsoft.ServiceFabric.Common.BackupSuspensionInfo,Microsoft.ServiceFabric.Common.ApplicationName)">
            <summary>
            Initializes a new instance of the ApplicationBackupConfigurationInfo class.
            </summary>
            <param name="policyName">The name of the backup policy which is applicable to this Service Fabric application or
            service or partition.</param>
            <param name="policyInheritedFrom">Specifies the scope at which the backup policy is applied.
            . Possible values include: 'Invalid', 'Partition', 'Service', 'Application'</param>
            <param name="suspensionInfo">Describes the backup suspension details.
            </param>
            <param name="applicationName">The name of the application, including the 'fabric:' URI scheme.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationBackupConfigurationInfo.ApplicationName">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationBackupEntity">
            <summary>
            Identifies the Service Fabric application which is being backed up.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationBackupEntity.#ctor(Microsoft.ServiceFabric.Common.ApplicationName)">
            <summary>
            Initializes a new instance of the ApplicationBackupEntity class.
            </summary>
            <param name="applicationName">The name of the application, including the 'fabric:' URI scheme.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationBackupEntity.ApplicationName">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationCapacityDescription">
            <summary>
            Describes capacity information for services of this application. This description can be used for describing the
            following.
            - Reserving the capacity for the services on the nodes
            - Limiting the total number of nodes that services of this application can run on
            - Limiting the custom capacity metrics to limit the total consumption of this metric by the services of this
            application
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationCapacityDescription.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ApplicationMetricDescription})">
            <summary>
            Initializes a new instance of the ApplicationCapacityDescription class.
            </summary>
            <param name="minimumNodes">The minimum number of nodes where Service Fabric will reserve capacity for this
            application. Note that this does not mean that the services of this application will be placed on all of those
            nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more
            than the value of the MaximumNodes property.</param>
            <param name="maximumNodes">The maximum number of nodes where Service Fabric will reserve capacity for this
            application. Note that this does not mean that the services of this application will be placed on all of those
            nodes. By default, the value of this property is zero and it means that the services can be placed on any
            node.</param>
            <param name="applicationMetrics">List of application capacity metric description.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationCapacityDescription.MinimumNodes">
            <summary>
            Gets the minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this
            does not mean that the services of this application will be placed on all of those nodes. If this property is set
            to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes
            property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationCapacityDescription.MaximumNodes">
            <summary>
            Gets the maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this
            does not mean that the services of this application will be placed on all of those nodes. By default, the value of
            this property is zero and it means that the services can be placed on any node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationCapacityDescription.ApplicationMetrics">
            <summary>
            Gets list of application capacity metric description.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationContainerInstanceExitedEvent">
            <summary>
            Container Exited event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationContainerInstanceExitedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ApplicationContainerInstanceExitedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="applicationId">The identity of the application. This is an encoded representation of the application
            name. This is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="serviceName">Name of Service.</param>
            <param name="servicePackageName">Name of Service package.</param>
            <param name="servicePackageActivationId">Activation Id of Service package.</param>
            <param name="isExclusive">Indicates IsExclusive flag.</param>
            <param name="codePackageName">Name of Code package.</param>
            <param name="entryPointType">Type of EntryPoint.</param>
            <param name="imageName">Name of Container image.</param>
            <param name="containerName">Name of Container.</param>
            <param name="hostId">Host Id.</param>
            <param name="exitCode">Exit code of process.</param>
            <param name="unexpectedTermination">Indicates if termination is unexpected.</param>
            <param name="startTime">Start time of process.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationContainerInstanceExitedEvent.ServiceName">
            <summary>
            Gets name of Service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationContainerInstanceExitedEvent.ServicePackageName">
            <summary>
            Gets name of Service package.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationContainerInstanceExitedEvent.ServicePackageActivationId">
            <summary>
            Gets activation Id of Service package.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationContainerInstanceExitedEvent.IsExclusive">
            <summary>
            Gets indicates IsExclusive flag.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationContainerInstanceExitedEvent.CodePackageName">
            <summary>
            Gets name of Code package.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationContainerInstanceExitedEvent.EntryPointType">
            <summary>
            Gets type of EntryPoint.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationContainerInstanceExitedEvent.ImageName">
            <summary>
            Gets name of Container image.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationContainerInstanceExitedEvent.ContainerName">
            <summary>
            Gets name of Container.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationContainerInstanceExitedEvent.HostId">
            <summary>
            Gets host Id.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationContainerInstanceExitedEvent.ExitCode">
            <summary>
            Gets exit code of process.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationContainerInstanceExitedEvent.UnexpectedTermination">
            <summary>
            Gets indicates if termination is unexpected.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationContainerInstanceExitedEvent.StartTime">
            <summary>
            Gets start time of process.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationCreatedEvent">
            <summary>
            Application Created event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationCreatedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ApplicationCreatedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="applicationId">The identity of the application. This is an encoded representation of the application
            name. This is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="applicationTypeName">Application type name.</param>
            <param name="applicationTypeVersion">Application type version.</param>
            <param name="applicationDefinitionKind">Application definition kind.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationCreatedEvent.ApplicationTypeName">
            <summary>
            Gets application type name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationCreatedEvent.ApplicationTypeVersion">
            <summary>
            Gets application type version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationCreatedEvent.ApplicationDefinitionKind">
            <summary>
            Gets application definition kind.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationDefinitionKind">
            <summary>
            Defines values for ApplicationDefinitionKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationDefinitionKind.Invalid">
            <summary>
            Indicates the application definition kind is invalid. All Service Fabric enumerations have the invalid type. The
            value is 65535.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationDefinitionKind.ServiceFabricApplicationDescription">
            <summary>
            Indicates the application is defined by a Service Fabric application description. The value is 0.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationDefinitionKind.Compose">
            <summary>
            Indicates the application is defined by compose file(s). The value is 1.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationDeletedEvent">
            <summary>
            Application Deleted event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationDeletedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ApplicationDeletedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="applicationId">The identity of the application. This is an encoded representation of the application
            name. This is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="applicationTypeName">Application type name.</param>
            <param name="applicationTypeVersion">Application type version.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationDeletedEvent.ApplicationTypeName">
            <summary>
            Gets application type name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationDeletedEvent.ApplicationTypeVersion">
            <summary>
            Gets application type version.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationDescription">
            <summary>
            Describes a Service Fabric application.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationDescription.#ctor(Microsoft.ServiceFabric.Common.ApplicationName,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},Microsoft.ServiceFabric.Common.ApplicationCapacityDescription,Microsoft.ServiceFabric.Common.ManagedApplicationIdentityDescription)">
            <summary>
            Initializes a new instance of the ApplicationDescription class.
            </summary>
            <param name="name">The name of the application, including the 'fabric:' URI scheme.</param>
            <param name="typeName">The application type name as defined in the application manifest.</param>
            <param name="typeVersion">The version of the application type as defined in the application manifest.</param>
            <param name="parameters">List of application parameters with overridden values from their default values specified
            in the application manifest.</param>
            <param name="applicationCapacity">Describes capacity information for services of this application. This description
            can be used for describing the following.
            - Reserving the capacity for the services on the nodes
            - Limiting the total number of nodes that services of this application can run on
            - Limiting the custom capacity metrics to limit the total consumption of this metric by the services of this
            application
            </param>
            <param name="managedApplicationIdentity">Managed application identity description.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationDescription.Name">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationDescription.TypeName">
            <summary>
            Gets the application type name as defined in the application manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationDescription.TypeVersion">
            <summary>
            Gets the version of the application type as defined in the application manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationDescription.Parameters">
            <summary>
            Gets list of application parameters with overridden values from their default values specified in the application
            manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationDescription.ApplicationCapacity">
            <summary>
            Gets capacity information for services of this application. This description can be used for describing the
            following.
            - Reserving the capacity for the services on the nodes
            - Limiting the total number of nodes that services of this application can run on
            - Limiting the custom capacity metrics to limit the total consumption of this metric by the services of this
            application
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationDescription.ManagedApplicationIdentity">
            <summary>
            Gets managed application identity description.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationEvent">
            <summary>
            Represents the base for all Application Events.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.Nullable{Microsoft.ServiceFabric.Common.FabricEventKind},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ApplicationEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="kind">The kind of FabricEvent.</param>
            <param name="applicationId">The identity of the application. This is an encoded representation of the application
            name. This is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationEvent.ApplicationId">
            <summary>
            Gets the identity of the application. This is an encoded representation of the application name. This is used in
            the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationHealth">
            <summary>
            Represents the health of the application. Contains the application aggregated health state and the service and
            deployed application health states.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationHealth.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvent},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper},Microsoft.ServiceFabric.Common.HealthStatistics,Microsoft.ServiceFabric.Common.ApplicationName,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceHealthState},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.DeployedApplicationHealthState})">
            <summary>
            Initializes a new instance of the ApplicationHealth class.
            </summary>
            <param name="aggregatedHealthState">The HealthState representing the aggregated health state of the entity computed
            by Health Manager.
            The health evaluation of the entity reflects all events reported on the entity and its children (if any).
            The aggregation is done by applying the desired health policy.
            . Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            
            The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
            </param>
            <param name="healthEvents">The list of health events reported on the entity.</param>
            <param name="unhealthyEvaluations">The unhealthy evaluations that show why the current aggregated health state was
            returned by Health Manager.</param>
            <param name="healthStatistics">Shows the health statistics for all children types of the queried entity.</param>
            <param name="name">The name of the application, including the 'fabric:' URI scheme.</param>
            <param name="serviceHealthStates">Service health states as found in the health store.</param>
            <param name="deployedApplicationHealthStates">Deployed application health states as found in the health
            store.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealth.Name">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealth.ServiceHealthStates">
            <summary>
            Gets service health states as found in the health store.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealth.DeployedApplicationHealthStates">
            <summary>
            Gets deployed application health states as found in the health store.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationHealthEvaluation">
            <summary>
            Represents health evaluation for an application, containing information about the data and the algorithm used by
            the health store to evaluate health.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,Microsoft.ServiceFabric.Common.ApplicationName,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the ApplicationHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="applicationName">The name of the application, including the 'fabric:' URI scheme.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the current aggregated health state of
            the application. The types of the unhealthy evaluations can be DeployedApplicationsHealthEvaluation,
            ServicesHealthEvaluation or EventHealthEvaluation.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthEvaluation.ApplicationName">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the current aggregated health state of the application. The types of
            the unhealthy evaluations can be DeployedApplicationsHealthEvaluation, ServicesHealthEvaluation or
            EventHealthEvaluation.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationHealthPolicies">
            <summary>
            Defines the application health policy map used to evaluate the health of an application or one of its children
            entities.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationHealthPolicies.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ApplicationHealthPolicyMapItem})">
            <summary>
            Initializes a new instance of the ApplicationHealthPolicies class.
            </summary>
            <param name="applicationHealthPolicyMap">The wrapper that contains the map with application health policies used to
            evaluate specific applications in the cluster.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthPolicies.ApplicationHealthPolicyMap">
            <summary>
            Gets the wrapper that contains the map with application health policies used to evaluate specific applications in
            the cluster.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationHealthPolicy">
            <summary>
            Defines a health policy used to evaluate the health of an application or one of its children entities.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationHealthPolicy.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.ServiceTypeHealthPolicy,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceTypeHealthPolicyMapItem})">
            <summary>
            Initializes a new instance of the ApplicationHealthPolicy class.
            </summary>
            <param name="considerWarningAsError">Indicates whether warnings are treated with the same severity as
            errors.</param>
            <param name="maxPercentUnhealthyDeployedApplications">The maximum allowed percentage of unhealthy deployed
            applications. Allowed values are Byte values from zero to 100.
            The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before
            the application is considered in error.
            This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the
            application is currently deployed on in the cluster.
            The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
            </param>
            <param name="defaultServiceTypeHealthPolicy">The health policy used by default to evaluate the health of a service
            type.</param>
            <param name="serviceTypeHealthPolicyMap">The map with service type health policy per service type name. The map is
            empty by default.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthPolicy.ConsiderWarningAsError">
            <summary>
            Gets indicates whether warnings are treated with the same severity as errors.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthPolicy.MaxPercentUnhealthyDeployedApplications">
            <summary>
            Gets the maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to
            100.
            The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before
            the application is considered in error.
            This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the
            application is currently deployed on in the cluster.
            The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy">
            <summary>
            Gets the health policy used by default to evaluate the health of a service type.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthPolicy.ServiceTypeHealthPolicyMap">
            <summary>
            Gets the map with service type health policy per service type name. The map is empty by default.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationHealthPolicyMapItem">
            <summary>
            Defines an item in ApplicationHealthPolicyMap.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationHealthPolicyMapItem.#ctor(Microsoft.ServiceFabric.Common.ApplicationName,Microsoft.ServiceFabric.Common.ApplicationHealthPolicy)">
            <summary>
            Initializes a new instance of the ApplicationHealthPolicyMapItem class.
            </summary>
            <param name="key">The key of the application health policy map item. This is the name of the application.</param>
            <param name="value">The value of the application health policy map item. This is the ApplicationHealthPolicy for
            this application.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthPolicyMapItem.Key">
            <summary>
            Gets the key of the application health policy map item. This is the name of the application.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthPolicyMapItem.Value">
            <summary>
            Gets the value of the application health policy map item. This is the ApplicationHealthPolicy for this application.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationHealthPolicyMapObject">
            <summary>
            Represents the map of application health policies for a ServiceFabric cluster upgrade
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationHealthPolicyMapObject.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ApplicationHealthPolicyMapItem})">
            <summary>
            Initializes a new instance of the ApplicationHealthPolicyMapObject class.
            </summary>
            <param name="applicationHealthPolicyMap">Defines a map that contains specific application health policies for
            different applications.
            Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the
            application health.
            If an application is not specified in the map, the application health evaluation uses the ApplicationHealthPolicy
            found in its application manifest or the default application health policy (if no health policy is defined in the
            manifest).
            The map is empty by default.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthPolicyMapObject.ApplicationHealthPolicyMap">
            <summary>
            Gets defines a map that contains specific application health policies for different applications.
            Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the
            application health.
            If an application is not specified in the map, the application health evaluation uses the ApplicationHealthPolicy
            found in its application manifest or the default application health policy (if no health policy is defined in the
            manifest).
            The map is empty by default.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationHealthReportExpiredEvent">
            <summary>
            Application Health Report Expired event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationHealthReportExpiredEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ApplicationHealthReportExpiredEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="applicationId">The identity of the application. This is an encoded representation of the application
            name. This is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="applicationInstanceId">Id of Application instance.</param>
            <param name="sourceId">Id of report source.</param>
            <param name="property">Describes the property.</param>
            <param name="healthState">Describes the property health state.</param>
            <param name="timeToLiveMs">Time to live in milli-seconds.</param>
            <param name="sequenceNumber">Sequence number of report.</param>
            <param name="description">Description of report.</param>
            <param name="removeWhenExpired">Indicates the removal when it expires.</param>
            <param name="sourceUtcTimestamp">Source time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthReportExpiredEvent.ApplicationInstanceId">
            <summary>
            Gets id of Application instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthReportExpiredEvent.SourceId">
            <summary>
            Gets id of report source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthReportExpiredEvent.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthReportExpiredEvent.HealthState">
            <summary>
            Gets the property health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthReportExpiredEvent.TimeToLiveMs">
            <summary>
            Gets time to live in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthReportExpiredEvent.SequenceNumber">
            <summary>
            Gets sequence number of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthReportExpiredEvent.Description">
            <summary>
            Gets description of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthReportExpiredEvent.RemoveWhenExpired">
            <summary>
            Gets indicates the removal when it expires.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthReportExpiredEvent.SourceUtcTimestamp">
            <summary>
            Gets source time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationHealthState">
            <summary>
            Represents the health state of an application, which contains the application identifier and the aggregated health
            state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationHealthState.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},Microsoft.ServiceFabric.Common.ApplicationName)">
            <summary>
            Initializes a new instance of the ApplicationHealthState class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="name">The name of the application, including the 'fabric:' URI scheme.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthState.Name">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationHealthStateChunk">
            <summary>
            Represents the health state chunk of a application.
            The application health state chunk contains the application name, its aggregated health state and any children
            services and deployed applications that respect the filters in cluster health chunk query description.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationHealthStateChunk.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},Microsoft.ServiceFabric.Common.ApplicationName,System.String,Microsoft.ServiceFabric.Common.ServiceHealthStateChunkList,Microsoft.ServiceFabric.Common.DeployedApplicationHealthStateChunkList)">
            <summary>
            Initializes a new instance of the ApplicationHealthStateChunk class.
            </summary>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="applicationName">The name of the application, including the 'fabric:' URI scheme.</param>
            <param name="applicationTypeName">The application type name as defined in the application manifest.</param>
            <param name="serviceHealthStateChunks">The list of service health state chunks in the cluster that respect the
            filters in the cluster health chunk query description.
            </param>
            <param name="deployedApplicationHealthStateChunks">The list of deployed application health state chunks in the
            cluster that respect the filters in the cluster health chunk query description.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthStateChunk.ApplicationName">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthStateChunk.ApplicationTypeName">
            <summary>
            Gets the application type name as defined in the application manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthStateChunk.ServiceHealthStateChunks">
            <summary>
            Gets the list of service health state chunks in the cluster that respect the filters in the cluster health chunk
            query description.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthStateChunk.DeployedApplicationHealthStateChunks">
            <summary>
            Gets the list of deployed application health state chunks in the cluster that respect the filters in the cluster
            health chunk query description.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationHealthStateChunkList">
            <summary>
            The list of application health state chunks in the cluster that respect the input filters in the chunk query.
            Returned by get cluster health state chunks query.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationHealthStateChunkList.#ctor(System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ApplicationHealthStateChunk})">
            <summary>
            Initializes a new instance of the ApplicationHealthStateChunkList class.
            </summary>
            <param name="totalCount">Total number of entity health state objects that match the specified filters from the
            cluster health chunk query description.
            </param>
            <param name="items">The list of application health state chunks that respect the input filters in the chunk query.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthStateChunkList.Items">
            <summary>
            Gets the list of application health state chunks that respect the input filters in the chunk query.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationHealthStateFilter">
            <summary>
            Defines matching criteria to determine whether a application should be included in the cluster health chunk.
            One filter can match zero, one or multiple applications, depending on its properties.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationHealthStateFilter.#ctor(System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceHealthStateFilter},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.DeployedApplicationHealthStateFilter})">
            <summary>
            Initializes a new instance of the ApplicationHealthStateFilter class.
            </summary>
            <param name="applicationNameFilter">The name of the application that matches the filter, as a fabric uri. The
            filter is applied only to the specified application, if it exists.
            If the application doesn't exist, no application is returned in the cluster health chunk based on this filter.
            If the application exists, it is included in the cluster health chunk if it respects the other filter properties.
            If not specified, all applications are matched against the other filter members, like health state filter.
            </param>
            <param name="applicationTypeNameFilter">The name of the application type that matches the filter.
            If specified, the filter is applied only to applications of the selected application type, if any exists.
            If no applications of the specified application type exists, no application is returned in the cluster health chunk
            based on this filter.
            Each application of the specified application type is included in the cluster health chunk if it respects the other
            filter properties.
            If not specified, all applications are matched against the other filter members, like health state filter.
            </param>
            <param name="healthStateFilter">The filter for the health state of the applications. It allows selecting
            applications if they match the desired health states.
            The possible values are integer value of one of the following health states. Only applications that match the
            filter are returned. All applications are used to evaluate the cluster aggregated health state.
            If not specified, default value is None, unless the application name or the application type name are specified. If
            the filter has default value and application name is specified, the matching application is returned.
            The state values are flag-based enumeration, so the value could be a combination of these values obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6, it matches applications with HealthState value of OK (2) and Warning (4).
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name="serviceFilters">Defines a list of filters that specify which services to be included in the returned
            cluster health chunk as children of the application. The services are returned only if the parent application
            matches a filter.
            If the list is empty, no services are returned. All the services are used to evaluate the parent application
            aggregated health state, regardless of the input filters.
            The application filter may specify multiple service filters.
            For example, it can specify a filter to return all services with health state Error and another filter to always
            include a service identified by its service name.
            </param>
            <param name="deployedApplicationFilters">Defines a list of filters that specify which deployed applications to be
            included in the returned cluster health chunk as children of the application. The deployed applications are
            returned only if the parent application matches a filter.
            If the list is empty, no deployed applications are returned. All the deployed applications are used to evaluate the
            parent application aggregated health state, regardless of the input filters.
            The application filter may specify multiple deployed application filters.
            For example, it can specify a filter to return all deployed applications with health state Error and another filter
            to always include a deployed application on a specified node.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthStateFilter.ApplicationNameFilter">
            <summary>
            Gets the name of the application that matches the filter, as a fabric uri. The filter is applied only to the
            specified application, if it exists.
            If the application doesn't exist, no application is returned in the cluster health chunk based on this filter.
            If the application exists, it is included in the cluster health chunk if it respects the other filter properties.
            If not specified, all applications are matched against the other filter members, like health state filter.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthStateFilter.ApplicationTypeNameFilter">
            <summary>
            Gets the name of the application type that matches the filter.
            If specified, the filter is applied only to applications of the selected application type, if any exists.
            If no applications of the specified application type exists, no application is returned in the cluster health chunk
            based on this filter.
            Each application of the specified application type is included in the cluster health chunk if it respects the other
            filter properties.
            If not specified, all applications are matched against the other filter members, like health state filter.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthStateFilter.HealthStateFilter">
            <summary>
            Gets the filter for the health state of the applications. It allows selecting applications if they match the
            desired health states.
            The possible values are integer value of one of the following health states. Only applications that match the
            filter are returned. All applications are used to evaluate the cluster aggregated health state.
            If not specified, default value is None, unless the application name or the application type name are specified. If
            the filter has default value and application name is specified, the matching application is returned.
            The state values are flag-based enumeration, so the value could be a combination of these values obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6, it matches applications with HealthState value of OK (2) and Warning (4).
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthStateFilter.ServiceFilters">
            <summary>
            Gets defines a list of filters that specify which services to be included in the returned cluster health chunk as
            children of the application. The services are returned only if the parent application matches a filter.
            If the list is empty, no services are returned. All the services are used to evaluate the parent application
            aggregated health state, regardless of the input filters.
            The application filter may specify multiple service filters.
            For example, it can specify a filter to return all services with health state Error and another filter to always
            include a service identified by its service name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationHealthStateFilter.DeployedApplicationFilters">
            <summary>
            Gets defines a list of filters that specify which deployed applications to be included in the returned cluster
            health chunk as children of the application. The deployed applications are returned only if the parent application
            matches a filter.
            If the list is empty, no deployed applications are returned. All the deployed applications are used to evaluate the
            parent application aggregated health state, regardless of the input filters.
            The application filter may specify multiple deployed application filters.
            For example, it can specify a filter to return all deployed applications with health state Error and another filter
            to always include a deployed application on a specified node.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationInfo">
            <summary>
            Information about a Service Fabric application.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationInfo.#ctor(System.String,Microsoft.ServiceFabric.Common.ApplicationName,System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.ApplicationStatus},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Nullable{Microsoft.ServiceFabric.Common.ApplicationDefinitionKind},Microsoft.ServiceFabric.Common.ManagedApplicationIdentityDescription)">
            <summary>
            Initializes a new instance of the ApplicationInfo class.
            </summary>
            <param name="id">The identity of the application. This is an encoded representation of the application name. This
            is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="name">The name of the application, including the 'fabric:' URI scheme.</param>
            <param name="typeName">The application type name as defined in the application manifest.</param>
            <param name="typeVersion">The version of the application type as defined in the application manifest.</param>
            <param name="status">The status of the application.
            . Possible values include: 'Invalid', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'</param>
            <param name="parameters">List of application parameters with overridden values from their default values specified
            in the application manifest.</param>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="applicationDefinitionKind">The mechanism used to define a Service Fabric application.
            . Possible values include: 'Invalid', 'ServiceFabricApplicationDescription', 'Compose'</param>
            <param name="managedApplicationIdentity">Managed application identity description.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationInfo.Id">
            <summary>
            Gets the identity of the application. This is an encoded representation of the application name. This is used in
            the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationInfo.Name">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationInfo.TypeName">
            <summary>
            Gets the application type name as defined in the application manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationInfo.TypeVersion">
            <summary>
            Gets the version of the application type as defined in the application manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationInfo.Status">
            <summary>
            Gets the status of the application.
            . Possible values include: 'Invalid', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationInfo.Parameters">
            <summary>
            Gets list of application parameters with overridden values from their default values specified in the application
            manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationInfo.HealthState">
            <summary>
            Gets the health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica
            etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationInfo.ApplicationDefinitionKind">
            <summary>
            Gets the mechanism used to define a Service Fabric application.
            . Possible values include: 'Invalid', 'ServiceFabricApplicationDescription', 'Compose'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationInfo.ManagedApplicationIdentity">
            <summary>
            Gets managed application identity description.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationLoadInfo">
            <summary>
            Load Information about a Service Fabric application.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationLoadInfo.#ctor(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ApplicationLoadMetricInformation})">
            <summary>
            Initializes a new instance of the ApplicationLoadInfo class.
            </summary>
            <param name="id">The identity of the application. This is an encoded representation of the application name. This
            is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="minimumNodes">The minimum number of nodes for this application.
            It is the number of nodes where Service Fabric will reserve Capacity in the cluster which equals to ReservedLoad *
            MinimumNodes for this Application instance.
            For applications that do not have application capacity defined this value will be zero.
            </param>
            <param name="maximumNodes">The maximum number of nodes where this application can be instantiated.
            It is the number of nodes this application is allowed to span.
            For applications that do not have application capacity defined this value will be zero.
            </param>
            <param name="nodeCount">The number of nodes on which this application is instantiated.
            For applications that do not have application capacity defined this value will be zero.
            </param>
            <param name="applicationLoadMetricInformation">List of application load metric information.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationLoadInfo.Id">
            <summary>
            Gets the identity of the application. This is an encoded representation of the application name. This is used in
            the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationLoadInfo.MinimumNodes">
            <summary>
            Gets the minimum number of nodes for this application.
            It is the number of nodes where Service Fabric will reserve Capacity in the cluster which equals to ReservedLoad *
            MinimumNodes for this Application instance.
            For applications that do not have application capacity defined this value will be zero.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationLoadInfo.MaximumNodes">
            <summary>
            Gets the maximum number of nodes where this application can be instantiated.
            It is the number of nodes this application is allowed to span.
            For applications that do not have application capacity defined this value will be zero.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationLoadInfo.NodeCount">
            <summary>
            Gets the number of nodes on which this application is instantiated.
            For applications that do not have application capacity defined this value will be zero.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationLoadInfo.ApplicationLoadMetricInformation">
            <summary>
            Gets list of application load metric information.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationLoadMetricInformation">
            <summary>
            Describes load information for a custom resource balancing metric. This can be used to limit the total consumption
            of this metric by the services of this application.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationLoadMetricInformation.#ctor(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the ApplicationLoadMetricInformation class.
            </summary>
            <param name="name">The name of the metric.</param>
            <param name="reservationCapacity">This is the capacity reserved in the cluster for the application.
            It's the product of NodeReservationCapacity and MinimumNodes.
            If set to zero, no capacity is reserved for this metric.
            When setting application capacity or when updating application capacity this value must be smaller than or equal to
            MaximumCapacity for each metric.
            </param>
            <param name="applicationCapacity">Total capacity for this metric in this application instance.
            </param>
            <param name="applicationLoad">Current load for this metric in this application instance.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationLoadMetricInformation.Name">
            <summary>
            Gets the name of the metric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationLoadMetricInformation.ReservationCapacity">
            <summary>
            Gets this is the capacity reserved in the cluster for the application.
            It's the product of NodeReservationCapacity and MinimumNodes.
            If set to zero, no capacity is reserved for this metric.
            When setting application capacity or when updating application capacity this value must be smaller than or equal to
            MaximumCapacity for each metric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationLoadMetricInformation.ApplicationCapacity">
            <summary>
            Gets total capacity for this metric in this application instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationLoadMetricInformation.ApplicationLoad">
            <summary>
            Gets current load for this metric in this application instance.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationMetricDescription">
            <summary>
            Describes capacity information for a custom resource balancing metric. This can be used to limit the total
            consumption of this metric by the services of this application.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationMetricDescription.#ctor(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the ApplicationMetricDescription class.
            </summary>
            <param name="name">The name of the metric.</param>
            <param name="maximumCapacity">The maximum node capacity for Service Fabric application.
            This is the maximum Load for an instance of this application on a single node. Even if the capacity of node is
            greater than this value, Service Fabric will limit the total load of services within the application on each node
            to this value.
            If set to zero, capacity for this metric is unlimited on each node.
            When creating a new application with application capacity defined, the product of MaximumNodes and this value must
            always be smaller than or equal to TotalApplicationCapacity.
            When updating existing application with application capacity, the product of MaximumNodes and this value must
            always be smaller than or equal to TotalApplicationCapacity.
            </param>
            <param name="reservationCapacity">The node reservation capacity for Service Fabric application.
            This is the amount of load which is reserved on nodes which have instances of this application.
            If MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the
            application.
            If set to zero, no capacity is reserved for this metric.
            When setting application capacity or when updating application capacity; this value must be smaller than or equal
            to MaximumCapacity for each metric.
            </param>
            <param name="totalApplicationCapacity">The total metric capacity for Service Fabric application.
            This is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of
            loads of services within the application to this value.
            When creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity
            must always be smaller than or equal to this value.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationMetricDescription.Name">
            <summary>
            Gets the name of the metric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationMetricDescription.MaximumCapacity">
            <summary>
            Gets the maximum node capacity for Service Fabric application.
            This is the maximum Load for an instance of this application on a single node. Even if the capacity of node is
            greater than this value, Service Fabric will limit the total load of services within the application on each node
            to this value.
            If set to zero, capacity for this metric is unlimited on each node.
            When creating a new application with application capacity defined, the product of MaximumNodes and this value must
            always be smaller than or equal to TotalApplicationCapacity.
            When updating existing application with application capacity, the product of MaximumNodes and this value must
            always be smaller than or equal to TotalApplicationCapacity.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationMetricDescription.ReservationCapacity">
            <summary>
            Gets the node reservation capacity for Service Fabric application.
            This is the amount of load which is reserved on nodes which have instances of this application.
            If MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the
            application.
            If set to zero, no capacity is reserved for this metric.
            When setting application capacity or when updating application capacity; this value must be smaller than or equal
            to MaximumCapacity for each metric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationMetricDescription.TotalApplicationCapacity">
            <summary>
            Gets the total metric capacity for Service Fabric application.
            This is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of
            loads of services within the application to this value.
            When creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity
            must always be smaller than or equal to this value.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationNameInfo">
            <summary>
            Information about the application name.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationNameInfo.#ctor(System.String,Microsoft.ServiceFabric.Common.ApplicationName)">
            <summary>
            Initializes a new instance of the ApplicationNameInfo class.
            </summary>
            <param name="id">The identity of the application. This is an encoded representation of the application name. This
            is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="name">The name of the application, including the 'fabric:' URI scheme.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationNameInfo.Id">
            <summary>
            Gets the identity of the application. This is an encoded representation of the application name. This is used in
            the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationNameInfo.Name">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationNewHealthReportEvent">
            <summary>
            Application Health Report Created event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationNewHealthReportEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ApplicationNewHealthReportEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="applicationId">The identity of the application. This is an encoded representation of the application
            name. This is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="applicationInstanceId">Id of Application instance.</param>
            <param name="sourceId">Id of report source.</param>
            <param name="property">Describes the property.</param>
            <param name="healthState">Describes the property health state.</param>
            <param name="timeToLiveMs">Time to live in milli-seconds.</param>
            <param name="sequenceNumber">Sequence number of report.</param>
            <param name="description">Description of report.</param>
            <param name="removeWhenExpired">Indicates the removal when it expires.</param>
            <param name="sourceUtcTimestamp">Source time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationNewHealthReportEvent.ApplicationInstanceId">
            <summary>
            Gets id of Application instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationNewHealthReportEvent.SourceId">
            <summary>
            Gets id of report source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationNewHealthReportEvent.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationNewHealthReportEvent.HealthState">
            <summary>
            Gets the property health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationNewHealthReportEvent.TimeToLiveMs">
            <summary>
            Gets time to live in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationNewHealthReportEvent.SequenceNumber">
            <summary>
            Gets sequence number of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationNewHealthReportEvent.Description">
            <summary>
            Gets description of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationNewHealthReportEvent.RemoveWhenExpired">
            <summary>
            Gets indicates the removal when it expires.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationNewHealthReportEvent.SourceUtcTimestamp">
            <summary>
            Gets source time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationPackageCleanupPolicy">
            <summary>
            Defines values for ApplicationPackageCleanupPolicy.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationPackageCleanupPolicy.Invalid">
            <summary>
            Indicates that the application package cleanup policy is invalid. This value is default. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationPackageCleanupPolicy.Default">
            <summary>
            Indicates that the cleanup policy of application packages is based on the cluster setting
            "CleanupApplicationPackageOnProvisionSuccess." The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationPackageCleanupPolicy.Automatic">
            <summary>
            Indicates that the service fabric runtime determines when to do the application package cleanup. By default,
            cleanup is done on successful provision. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationPackageCleanupPolicy.Manual">
            <summary>
            Indicates that the user has to explicitly clean up the application package. The value is 3.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationProcessExitedEvent">
            <summary>
            Process Exited event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationProcessExitedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ApplicationProcessExitedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="applicationId">The identity of the application. This is an encoded representation of the application
            name. This is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="serviceName">Name of Service.</param>
            <param name="servicePackageName">Name of Service package.</param>
            <param name="servicePackageActivationId">Activation Id of Service package.</param>
            <param name="isExclusive">Indicates IsExclusive flag.</param>
            <param name="codePackageName">Name of Code package.</param>
            <param name="entryPointType">Type of EntryPoint.</param>
            <param name="exeName">Name of executable.</param>
            <param name="processId">Process Id.</param>
            <param name="hostId">Host Id.</param>
            <param name="exitCode">Exit code of process.</param>
            <param name="unexpectedTermination">Indicates if termination is unexpected.</param>
            <param name="startTime">Start time of process.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProcessExitedEvent.ServiceName">
            <summary>
            Gets name of Service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProcessExitedEvent.ServicePackageName">
            <summary>
            Gets name of Service package.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProcessExitedEvent.ServicePackageActivationId">
            <summary>
            Gets activation Id of Service package.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProcessExitedEvent.IsExclusive">
            <summary>
            Gets indicates IsExclusive flag.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProcessExitedEvent.CodePackageName">
            <summary>
            Gets name of Code package.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProcessExitedEvent.EntryPointType">
            <summary>
            Gets type of EntryPoint.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProcessExitedEvent.ExeName">
            <summary>
            Gets name of executable.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProcessExitedEvent.ProcessId">
            <summary>
            Gets process Id.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProcessExitedEvent.HostId">
            <summary>
            Gets host Id.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProcessExitedEvent.ExitCode">
            <summary>
            Gets exit code of process.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProcessExitedEvent.UnexpectedTermination">
            <summary>
            Gets indicates if termination is unexpected.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProcessExitedEvent.StartTime">
            <summary>
            Gets start time of process.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationProperties">
            <summary>
            Describes properties of a application resource.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationProperties.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceResourceDescription},Microsoft.ServiceFabric.Common.DiagnosticsDescription,System.String)">
            <summary>
            Initializes a new instance of the ApplicationProperties class.
            </summary>
            <param name="description">User readable description of the application.</param>
            <param name="services">Describes the services in the application. This property is used to create or modify
            services of the application. On get only the name of the service is returned. The service description can be
            obtained by querying for the service resource.</param>
            <param name="diagnostics">Describes the diagnostics definition and usage for an application resource.</param>
            <param name="debugParams">Internal - used by Visual Studio to setup the debugging session on the local development
            environment.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProperties.Description">
            <summary>
            Gets user readable description of the application.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProperties.Services">
            <summary>
            Gets the services in the application. This property is used to create or modify services of the application. On get
            only the name of the service is returned. The service description can be obtained by querying for the service
            resource.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProperties.Diagnostics">
            <summary>
            Gets the diagnostics definition and usage for an application resource.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProperties.DebugParams">
            <summary>
            Gets internal - used by Visual Studio to setup the debugging session on the local development environment.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProperties.ServiceNames">
            <summary>
            Gets names of the services in the application.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProperties.Status">
            <summary>
            Gets status of the application. Possible values include: 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting',
            'Failed'
            
            Status of the resource.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProperties.StatusDetails">
            <summary>
            Gets additional information about the current status of the application.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProperties.HealthState">
            <summary>
            Gets the health state of an application resource. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error',
            'Unknown'
            
            The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationProperties.UnhealthyEvaluation">
            <summary>
            Gets when the application's health state is not 'Ok', this additional details from service fabric Health Manager
            for the user to know why the application is marked unhealthy.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationResourceDescription">
            <summary>
            This type describes a application resource.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationResourceDescription.#ctor(System.String,Microsoft.ServiceFabric.Common.ApplicationProperties,Microsoft.ServiceFabric.Common.IdentityDescription)">
            <summary>
            Initializes a new instance of the ApplicationResourceDescription class.
            </summary>
            <param name="name">Name of the Application resource.</param>
            <param name="properties">Describes properties of a application resource.</param>
            <param name="identity">Describes the identity of the application.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationResourceDescription.Name">
            <summary>
            Gets name of the Application resource.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationResourceDescription.Properties">
            <summary>
            Gets properties of a application resource.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationResourceDescription.Identity">
            <summary>
            Gets the identity of the application.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeProgressInfo">
            <summary>
            This type describes an application resource upgrade.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeProgressInfo.#ctor(System.String,System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeState},System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceUpgradeProgress},System.Nullable{Microsoft.ServiceFabric.Common.RollingUpgradeMode},System.String,System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            Initializes a new instance of the ApplicationResourceUpgradeProgressInfo class.
            </summary>
            <param name="name">Name of the Application resource.</param>
            <param name="targetApplicationTypeVersion">The target application version for the application upgrade.</param>
            <param name="startTimestampUtc">The estimated UTC datetime when the upgrade started.</param>
            <param name="upgradeState">The state of the application resource upgrade.
            . Possible values include: 'Invalid', 'ProvisioningTarget', 'RollingForward', 'UnprovisioningCurrent',
            'CompletedRollforward', 'RollingBack', 'UnprovisioningTarget', 'CompletedRollback', 'Failed'</param>
            <param name="percentCompleted">The estimated percent of replicas are completed in the upgrade.</param>
            <param name="serviceUpgradeProgress">List of service upgrade progresses.</param>
            <param name="rollingUpgradeMode">The mode used to monitor health during a rolling upgrade. The values are
            UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto',
            'UnmonitoredManual', 'Monitored'</param>
            <param name="upgradeDuration">The estimated amount of time that the overall upgrade elapsed. It is first
            interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number
            representing the total number of milliseconds.</param>
            <param name="applicationUpgradeStatusDetails">Additional detailed information about the status of the pending
            upgrade.</param>
            <param name="upgradeReplicaSetCheckTimeoutInSeconds">The maximum amount of time to block processing of an upgrade
            domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of
            the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each
            upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).</param>
            <param name="failureTimestampUtc">The estimated UTC datetime when the upgrade failed and FailureAction was
            executed.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeProgressInfo.Name">
            <summary>
            Gets name of the Application resource.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeProgressInfo.TargetApplicationTypeVersion">
            <summary>
            Gets the target application version for the application upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeProgressInfo.StartTimestampUtc">
            <summary>
            Gets the estimated UTC datetime when the upgrade started.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeProgressInfo.UpgradeState">
            <summary>
            Gets the state of the application resource upgrade.
            . Possible values include: 'Invalid', 'ProvisioningTarget', 'RollingForward', 'UnprovisioningCurrent',
            'CompletedRollforward', 'RollingBack', 'UnprovisioningTarget', 'CompletedRollback', 'Failed'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeProgressInfo.PercentCompleted">
            <summary>
            Gets the estimated percent of replicas are completed in the upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeProgressInfo.ServiceUpgradeProgress">
            <summary>
            Gets list of service upgrade progresses.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeProgressInfo.RollingUpgradeMode">
            <summary>
            Gets the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual,
            and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeProgressInfo.UpgradeDuration">
            <summary>
            Gets the estimated amount of time that the overall upgrade elapsed. It is first interpreted as a string
            representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number
            of milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeProgressInfo.ApplicationUpgradeStatusDetails">
            <summary>
            Gets additional detailed information about the status of the pending upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeProgressInfo.UpgradeReplicaSetCheckTimeoutInSeconds">
            <summary>
            Gets the maximum amount of time to block processing of an upgrade domain and prevent loss of availability when
            there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of
            availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and
            42949672925 inclusive. (unsigned 32-bit integer).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeProgressInfo.FailureTimestampUtc">
            <summary>
            Gets the estimated UTC datetime when the upgrade failed and FailureAction was executed.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeState">
            <summary>
            Defines values for ApplicationResourceUpgradeState.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeState.Invalid">
            <summary>
            Indicates the upgrade state is invalid. All Service Fabric enumerations have the invalid type. The value is 0.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeState.ProvisioningTarget">
            <summary>
            The upgrade is in the progress of provisioning target application type version. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeState.RollingForward">
            <summary>
            The upgrade is rolling forward to the target version but is not complete yet. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeState.UnprovisioningCurrent">
            <summary>
            The upgrade is in the progress of unprovisioning current application type version and rolling forward to the target
            version is completed. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeState.CompletedRollforward">
            <summary>
            The upgrade has finished rolling forward. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeState.RollingBack">
            <summary>
            The upgrade is rolling back to the previous version but is not complete yet. The value is 5.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeState.UnprovisioningTarget">
            <summary>
            The upgrade is in the progress of unprovisioning target application type version and rolling back to the current
            version is completed. The value is 6.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeState.CompletedRollback">
            <summary>
            The upgrade has finished rolling back. The value is 7.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationResourceUpgradeState.Failed">
            <summary>
            The upgrade has failed and is unable to execute FailureAction. The value is 8.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationScopedVolume">
            <summary>
            Describes a volume whose lifetime is scoped to the application's lifetime.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationScopedVolume.#ctor(System.String,System.String,Microsoft.ServiceFabric.Common.ApplicationScopedVolumeCreationParameters,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ApplicationScopedVolume class.
            </summary>
            <param name="name">Name of the volume being referenced.</param>
            <param name="destinationPath">The path within the container at which the volume should be mounted. Only valid path
            characters are allowed.</param>
            <param name="creationParameters">Describes parameters for creating application-scoped volumes.</param>
            <param name="readOnly">The flag indicating whether the volume is read only. Default is 'false'.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationScopedVolume.CreationParameters">
            <summary>
            Gets parameters for creating application-scoped volumes.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationScopedVolumeCreationParameters">
            <summary>
            Describes parameters for creating application-scoped volumes.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationScopedVolumeCreationParameters.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ApplicationScopedVolumeKind},System.String)">
            <summary>
            Initializes a new instance of the ApplicationScopedVolumeCreationParameters class.
            </summary>
            <param name="kind">Specifies the application-scoped volume kind.</param>
            <param name="description">User readable description of the volume.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationScopedVolumeCreationParameters.Description">
            <summary>
            Gets user readable description of the volume.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationScopedVolumeCreationParameters.Kind">
            <summary>
            Gets specifies the application-scoped volume kind.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk">
            <summary>
            Describes parameters for creating application-scoped volumes provided by Service Fabric Volume Disks
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.SizeTypes},System.String)">
            <summary>
            Initializes a new instance of the ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk class.
            </summary>
            <param name="sizeDisk">Volume size. Possible values include: 'Small', 'Medium', 'Large'</param>
            <param name="description">User readable description of the volume.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.SizeDisk">
            <summary>
            Gets volume size. Possible values include: 'Small', 'Medium', 'Large'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationScopedVolumeKind">
            <summary>
            Defines values for ApplicationScopedVolumeKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationScopedVolumeKind.ServiceFabricVolumeDisk">
            <summary>
            Provides Service Fabric High Availability Volume Disk.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationsHealthEvaluation">
            <summary>
            Represents health evaluation for applications, containing health evaluations for each unhealthy application that
            impacted current aggregated health state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationsHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the ApplicationsHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="maxPercentUnhealthyApplications">Maximum allowed percentage of unhealthy applications from the
            ClusterHealthPolicy.</param>
            <param name="totalCount">Total number of applications from the health store.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the aggregated health state. Includes
            all the unhealthy ApplicationHealthEvaluation that impacted the aggregated health.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationsHealthEvaluation.MaxPercentUnhealthyApplications">
            <summary>
            Gets maximum allowed percentage of unhealthy applications from the ClusterHealthPolicy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationsHealthEvaluation.TotalCount">
            <summary>
            Gets total number of applications from the health store.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationsHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy
            ApplicationHealthEvaluation that impacted the aggregated health.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationStatus">
            <summary>
            Defines values for ApplicationStatus.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationStatus.Invalid">
            <summary>
            Indicates the application status is invalid. All Service Fabric enumerations have the invalid type. The value is
            zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationStatus.Ready">
            <summary>
            Indicates the application status is ready. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationStatus.Upgrading">
            <summary>
            Indicates the application status is upgrading. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationStatus.Creating">
            <summary>
            Indicates the application status is creating. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationStatus.Deleting">
            <summary>
            Indicates the application status is deleting. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationStatus.Failed">
            <summary>
            Indicates the creation or deletion of application was terminated due to persistent failures. Another create/delete
            request can be accepted to resume a failed application. The value is 5.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationTypeApplicationsHealthEvaluation">
            <summary>
            Represents health evaluation for applications of a particular application type. The application type applications
            evaluation can be returned when cluster health evaluation returns unhealthy aggregated health state, either Error
            or Warning. It contains health evaluations for each unhealthy application of the included application type that
            impacted current aggregated health state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationTypeApplicationsHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the ApplicationTypeApplicationsHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="applicationTypeName">The application type name as defined in the application manifest.</param>
            <param name="maxPercentUnhealthyApplications">Maximum allowed percentage of unhealthy applications for the
            application type, specified as an entry in ApplicationTypeHealthPolicyMap.</param>
            <param name="totalCount">Total number of applications of the application type found in the health store.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the aggregated health state. Includes
            all the unhealthy ApplicationHealthEvaluation of this application type that impacted the aggregated health.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationTypeApplicationsHealthEvaluation.ApplicationTypeName">
            <summary>
            Gets the application type name as defined in the application manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationTypeApplicationsHealthEvaluation.MaxPercentUnhealthyApplications">
            <summary>
            Gets maximum allowed percentage of unhealthy applications for the application type, specified as an entry in
            ApplicationTypeHealthPolicyMap.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationTypeApplicationsHealthEvaluation.TotalCount">
            <summary>
            Gets total number of applications of the application type found in the health store.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationTypeApplicationsHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy
            ApplicationHealthEvaluation of this application type that impacted the aggregated health.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationTypeDefinitionKind">
            <summary>
            Defines values for ApplicationTypeDefinitionKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationTypeDefinitionKind.Invalid">
            <summary>
            Indicates the application type definition kind is invalid. All Service Fabric enumerations have the invalid type.
            The value is 0.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationTypeDefinitionKind.ServiceFabricApplicationPackage">
            <summary>
            Indicates the application type is defined and created by a Service Fabric application package provided by the user.
            The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationTypeDefinitionKind.Compose">
            <summary>
            Indicates the application type is defined and created implicitly as part of a compose deployment. The value is 2.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationTypeHealthPolicyMapItem">
            <summary>
            Defines an item in ApplicationTypeHealthPolicyMap.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationTypeHealthPolicyMapItem.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the ApplicationTypeHealthPolicyMapItem class.
            </summary>
            <param name="key">The key of the application type health policy map item. This is the name of the application
            type.</param>
            <param name="value">The value of the application type health policy map item.
            The max percent unhealthy applications allowed for the application type. Must be between zero and 100.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationTypeHealthPolicyMapItem.Key">
            <summary>
            Gets the key of the application type health policy map item. This is the name of the application type.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationTypeHealthPolicyMapItem.Value">
            <summary>
            Gets the value of the application type health policy map item.
            The max percent unhealthy applications allowed for the application type. Must be between zero and 100.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationTypeImageStorePath">
            <summary>
            Path description for the application package in the image store specified during the prior copy operation.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationTypeImageStorePath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ApplicationTypeImageStorePath class.
            </summary>
            <param name="applicationTypeBuildPath">The relative image store path to the application package.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationTypeImageStorePath.ApplicationTypeBuildPath">
            <summary>
            Gets the relative image store path to the application package.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationTypeInfo">
            <summary>
            Information about an application type.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationTypeInfo.#ctor(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Nullable{Microsoft.ServiceFabric.Common.ApplicationTypeStatus},System.String,System.Nullable{Microsoft.ServiceFabric.Common.ApplicationTypeDefinitionKind})">
            <summary>
            Initializes a new instance of the ApplicationTypeInfo class.
            </summary>
            <param name="name">The application type name as defined in the application manifest.</param>
            <param name="version">The version of the application type as defined in the application manifest.</param>
            <param name="defaultParameterList">List of application type parameters that can be overridden when creating or
            updating the application.</param>
            <param name="status">The status of the application type.
            . Possible values include: 'Invalid', 'Provisioning', 'Available', 'Unprovisioning', 'Failed'</param>
            <param name="statusDetails">Additional detailed information about the status of the application type.</param>
            <param name="applicationTypeDefinitionKind">The mechanism used to define a Service Fabric application type.
            . Possible values include: 'Invalid', 'ServiceFabricApplicationPackage', 'Compose'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationTypeInfo.Name">
            <summary>
            Gets the application type name as defined in the application manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationTypeInfo.Version">
            <summary>
            Gets the version of the application type as defined in the application manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationTypeInfo.DefaultParameterList">
            <summary>
            Gets list of application type parameters that can be overridden when creating or updating the application.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationTypeInfo.Status">
            <summary>
            Gets the status of the application type.
            . Possible values include: 'Invalid', 'Provisioning', 'Available', 'Unprovisioning', 'Failed'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationTypeInfo.StatusDetails">
            <summary>
            Gets additional detailed information about the status of the application type.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationTypeInfo.ApplicationTypeDefinitionKind">
            <summary>
            Gets the mechanism used to define a Service Fabric application type.
            . Possible values include: 'Invalid', 'ServiceFabricApplicationPackage', 'Compose'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationTypeManifest">
            <summary>
            Contains the manifest describing an application type registered in a Service Fabric cluster.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationTypeManifest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ApplicationTypeManifest class.
            </summary>
            <param name="manifest">The XML manifest as a string.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationTypeManifest.Manifest">
            <summary>
            Gets the XML manifest as a string.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationTypeStatus">
            <summary>
            Defines values for ApplicationTypeStatus.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationTypeStatus.Invalid">
            <summary>
            Indicates the application type status is invalid. All Service Fabric enumerations have the invalid type. The value
            is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationTypeStatus.Provisioning">
            <summary>
            Indicates that the application type is being provisioned in the cluster. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationTypeStatus.Available">
            <summary>
            Indicates that the application type is fully provisioned and is available for use. An application of this type and
            version can be created. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationTypeStatus.Unprovisioning">
            <summary>
            Indicates that the application type is in process of being unprovisioned from the cluster. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ApplicationTypeStatus.Failed">
            <summary>
            Indicates that the application type provisioning failed and it is unavailable for use. The failure details can be
            obtained from the application type information query. The failed application type information remains in the
            cluster until it is unprovisioned or reprovisioned successfully. The value is 4.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationUpgradeCompletedEvent">
            <summary>
            Application Upgrade Completed event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationUpgradeCompletedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Double},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ApplicationUpgradeCompletedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="applicationId">The identity of the application. This is an encoded representation of the application
            name. This is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="applicationTypeName">Application type name.</param>
            <param name="applicationTypeVersion">Application type version.</param>
            <param name="overallUpgradeElapsedTimeInMs">Overall upgrade time in milli-seconds.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeCompletedEvent.ApplicationTypeName">
            <summary>
            Gets application type name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeCompletedEvent.ApplicationTypeVersion">
            <summary>
            Gets application type version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeCompletedEvent.OverallUpgradeElapsedTimeInMs">
            <summary>
            Gets overall upgrade time in milli-seconds.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationUpgradeDescription">
            <summary>
            Describes the parameters for an application upgrade. Note that upgrade description replaces the existing
            application description. This means that if the parameters are not specified, the existing parameters on the
            applications will be overwritten with the empty parameters list. This would result in the application using the
            default value of the parameters from the application manifest. If you do not want to change any existing parameter
            values, please get the application parameters first using the GetApplicationInfo query and then supply those values
            as Parameters in this ApplicationUpgradeDescription.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationUpgradeDescription.#ctor(System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.UpgradeKind},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Nullable{Microsoft.ServiceFabric.Common.UpgradeMode},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{Microsoft.ServiceFabric.Common.UpgradeSortOrder},Microsoft.ServiceFabric.Common.MonitoringPolicyDescription,Microsoft.ServiceFabric.Common.ApplicationHealthPolicy,System.Nullable{System.Int64},Microsoft.ServiceFabric.Common.ManagedApplicationIdentityDescription)">
            <summary>
            Initializes a new instance of the ApplicationUpgradeDescription class.
            </summary>
            <param name="name">The name of the target application, including the 'fabric:' URI scheme.</param>
            <param name="targetApplicationTypeVersion">The target application type version (found in the application manifest)
            for the application upgrade.</param>
            <param name="upgradeKind">The kind of upgrade out of the following possible values. Possible values include:
            'Invalid', 'Rolling'</param>
            <param name="parameters">List of application parameters with overridden values from their default values specified
            in the application manifest.</param>
            <param name="rollingUpgradeMode">The mode used to monitor health during a rolling upgrade. The values are
            UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto',
            'UnmonitoredManual', 'Monitored'</param>
            <param name="upgradeReplicaSetCheckTimeoutInSeconds">The maximum amount of time to block processing of an upgrade
            domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of
            the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each
            upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).</param>
            <param name="forceRestart">If true, then processes are forcefully restarted during upgrade even when the code
            version has not changed (the upgrade only changes configuration or data).</param>
            <param name="sortOrder">Defines the order in which an upgrade proceeds through the cluster. Possible values
            include: 'Invalid', 'Default', 'Numeric', 'Lexicographical', 'ReverseNumeric', 'ReverseLexicographical'</param>
            <param name="monitoringPolicy">Describes the parameters for monitoring an upgrade in Monitored mode.</param>
            <param name="applicationHealthPolicy">Defines a health policy used to evaluate the health of an application or one
            of its children entities.
            </param>
            <param name="instanceCloseDelayDurationInSeconds">Duration in seconds, to wait before a stateless instance is
            closed, to allow the active requests to drain gracefully. This would be effective when the instance is closing
            during the application/cluster
            upgrade, only for those instances which have a non-zero delay duration configured in the service description. See
            InstanceCloseDelayDurationSeconds property in $ref: "#/definitions/StatelessServiceDescription.yaml" for details.
            Note, the default value of InstanceCloseDelayDurationInSeconds is 4294967295, which indicates that the behavior
            will entirely depend on the delay configured in the stateless service description.
            </param>
            <param name="managedApplicationIdentity">Managed application identity description.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeDescription.Name">
            <summary>
            Gets the name of the target application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeDescription.TargetApplicationTypeVersion">
            <summary>
            Gets the target application type version (found in the application manifest) for the application upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeDescription.Parameters">
            <summary>
            Gets list of application parameters with overridden values from their default values specified in the application
            manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeDescription.UpgradeKind">
            <summary>
            Gets the kind of upgrade out of the following possible values. Possible values include: 'Invalid', 'Rolling'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeDescription.RollingUpgradeMode">
            <summary>
            Gets the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual,
            and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeDescription.UpgradeReplicaSetCheckTimeoutInSeconds">
            <summary>
            Gets the maximum amount of time to block processing of an upgrade domain and prevent loss of availability when
            there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of
            availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and
            42949672925 inclusive. (unsigned 32-bit integer).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeDescription.ForceRestart">
            <summary>
            Gets if true, then processes are forcefully restarted during upgrade even when the code version has not changed
            (the upgrade only changes configuration or data).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeDescription.SortOrder">
            <summary>
            Gets defines the order in which an upgrade proceeds through the cluster. Possible values include: 'Invalid',
            'Default', 'Numeric', 'Lexicographical', 'ReverseNumeric', 'ReverseLexicographical'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeDescription.MonitoringPolicy">
            <summary>
            Gets the parameters for monitoring an upgrade in Monitored mode.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeDescription.ApplicationHealthPolicy">
            <summary>
            Gets defines a health policy used to evaluate the health of an application or one of its children entities.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeDescription.InstanceCloseDelayDurationInSeconds">
            <summary>
            Gets duration in seconds, to wait before a stateless instance is closed, to allow the active requests to drain
            gracefully. This would be effective when the instance is closing during the application/cluster
            upgrade, only for those instances which have a non-zero delay duration configured in the service description. See
            InstanceCloseDelayDurationSeconds property in $ref: "#/definitions/StatelessServiceDescription.yaml" for details.
            Note, the default value of InstanceCloseDelayDurationInSeconds is 4294967295, which indicates that the behavior
            will entirely depend on the delay configured in the stateless service description.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeDescription.ManagedApplicationIdentity">
            <summary>
            Gets managed application identity description.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationUpgradeDomainCompletedEvent">
            <summary>
            Application Upgrade Domain Completed event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationUpgradeDomainCompletedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ApplicationUpgradeDomainCompletedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="applicationId">The identity of the application. This is an encoded representation of the application
            name. This is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="applicationTypeName">Application type name.</param>
            <param name="currentApplicationTypeVersion">Current Application type version.</param>
            <param name="applicationTypeVersion">Target Application type version.</param>
            <param name="upgradeState">State of upgrade.</param>
            <param name="upgradeDomains">Upgrade domains.</param>
            <param name="upgradeDomainElapsedTimeInMs">Upgrade time of domain in milli-seconds.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeDomainCompletedEvent.ApplicationTypeName">
            <summary>
            Gets application type name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeDomainCompletedEvent.CurrentApplicationTypeVersion">
            <summary>
            Gets current Application type version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeDomainCompletedEvent.ApplicationTypeVersion">
            <summary>
            Gets target Application type version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeDomainCompletedEvent.UpgradeState">
            <summary>
            Gets state of upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeDomainCompletedEvent.UpgradeDomains">
            <summary>
            Gets upgrade domains.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeDomainCompletedEvent.UpgradeDomainElapsedTimeInMs">
            <summary>
            Gets upgrade time of domain in milli-seconds.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo">
            <summary>
            Describes the parameters for an application upgrade.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.UpgradeDomainInfo},System.Nullable{Microsoft.ServiceFabric.Common.UpgradeState},System.String,System.Nullable{Microsoft.ServiceFabric.Common.UpgradeMode},Microsoft.ServiceFabric.Common.ApplicationUpgradeDescription,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper},Microsoft.ServiceFabric.Common.CurrentUpgradeDomainProgressInfo,System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.FailureReason},Microsoft.ServiceFabric.Common.FailureUpgradeDomainProgressInfo,System.String)">
            <summary>
            Initializes a new instance of the ApplicationUpgradeProgressInfo class.
            </summary>
            <param name="name">The name of the target application, including the 'fabric:' URI scheme.</param>
            <param name="typeName">The application type name as defined in the application manifest.</param>
            <param name="targetApplicationTypeVersion">The target application type version (found in the application manifest)
            for the application upgrade.</param>
            <param name="upgradeDomains">List of upgrade domains and their statuses.</param>
            <param name="upgradeState">The state of the upgrade domain. Possible values include: 'Invalid',
            'RollingBackInProgress', 'RollingBackCompleted', 'RollingForwardPending', 'RollingForwardInProgress',
            'RollingForwardCompleted', 'Failed'</param>
            <param name="nextUpgradeDomain">The name of the next upgrade domain to be processed.</param>
            <param name="rollingUpgradeMode">The mode used to monitor health during a rolling upgrade. The values are
            UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto',
            'UnmonitoredManual', 'Monitored'</param>
            <param name="upgradeDescription">Describes the parameters for an application upgrade. Note that upgrade description
            replaces the existing application description. This means that if the parameters are not specified, the existing
            parameters on the applications will be overwritten with the empty parameters list. This would result in the
            application using the default value of the parameters from the application manifest. If you do not want to change
            any existing parameter values, please get the application parameters first using the GetApplicationInfo query and
            then supply those values as Parameters in this ApplicationUpgradeDescription.</param>
            <param name="upgradeDurationInMilliseconds">The estimated total amount of time spent processing the overall
            upgrade.</param>
            <param name="upgradeDomainDurationInMilliseconds">The estimated total amount of time spent processing the current
            upgrade domain.</param>
            <param name="unhealthyEvaluations">List of health evaluations that resulted in the current aggregated health
            state.</param>
            <param name="currentUpgradeDomainProgress">Information about the current in-progress upgrade domain.</param>
            <param name="startTimestampUtc">The estimated UTC datetime when the upgrade started.</param>
            <param name="failureTimestampUtc">The estimated UTC datetime when the upgrade failed and FailureAction was
            executed.</param>
            <param name="failureReason">The cause of an upgrade failure that resulted in FailureAction being executed. Possible
            values include: 'None', 'Interrupted', 'HealthCheck', 'UpgradeDomainTimeout', 'OverallUpgradeTimeout'</param>
            <param name="upgradeDomainProgressAtFailure">Information about the upgrade domain progress at the time of upgrade
            failure.</param>
            <param name="upgradeStatusDetails">Additional detailed information about the status of the pending upgrade.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo.Name">
            <summary>
            Gets the name of the target application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo.TypeName">
            <summary>
            Gets the application type name as defined in the application manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo.TargetApplicationTypeVersion">
            <summary>
            Gets the target application type version (found in the application manifest) for the application upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo.UpgradeDomains">
            <summary>
            Gets list of upgrade domains and their statuses.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo.UpgradeState">
            <summary>
            Gets the state of the upgrade domain. Possible values include: 'Invalid', 'RollingBackInProgress',
            'RollingBackCompleted', 'RollingForwardPending', 'RollingForwardInProgress', 'RollingForwardCompleted', 'Failed'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo.NextUpgradeDomain">
            <summary>
            Gets the name of the next upgrade domain to be processed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo.RollingUpgradeMode">
            <summary>
            Gets the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual,
            and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo.UpgradeDescription">
            <summary>
            Gets the parameters for an application upgrade. Note that upgrade description replaces the existing application
            description. This means that if the parameters are not specified, the existing parameters on the applications will
            be overwritten with the empty parameters list. This would result in the application using the default value of the
            parameters from the application manifest. If you do not want to change any existing parameter values, please get
            the application parameters first using the GetApplicationInfo query and then supply those values as Parameters in
            this ApplicationUpgradeDescription.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo.UpgradeDurationInMilliseconds">
            <summary>
            Gets the estimated total amount of time spent processing the overall upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo.UpgradeDomainDurationInMilliseconds">
            <summary>
            Gets the estimated total amount of time spent processing the current upgrade domain.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo.UnhealthyEvaluations">
            <summary>
            Gets list of health evaluations that resulted in the current aggregated health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo.CurrentUpgradeDomainProgress">
            <summary>
            Gets information about the current in-progress upgrade domain.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo.StartTimestampUtc">
            <summary>
            Gets the estimated UTC datetime when the upgrade started.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo.FailureTimestampUtc">
            <summary>
            Gets the estimated UTC datetime when the upgrade failed and FailureAction was executed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo.FailureReason">
            <summary>
            Gets the cause of an upgrade failure that resulted in FailureAction being executed. Possible values include:
            'None', 'Interrupted', 'HealthCheck', 'UpgradeDomainTimeout', 'OverallUpgradeTimeout'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo.UpgradeDomainProgressAtFailure">
            <summary>
            Gets information about the upgrade domain progress at the time of upgrade failure.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeProgressInfo.UpgradeStatusDetails">
            <summary>
            Gets additional detailed information about the status of the pending upgrade.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationUpgradeRollbackCompletedEvent">
            <summary>
            Application Upgrade Rollback Completed event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationUpgradeRollbackCompletedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ApplicationUpgradeRollbackCompletedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="applicationId">The identity of the application. This is an encoded representation of the application
            name. This is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="applicationTypeName">Application type name.</param>
            <param name="applicationTypeVersion">Application type version.</param>
            <param name="failureReason">Describes reason of failure.</param>
            <param name="overallUpgradeElapsedTimeInMs">Overall upgrade time in milli-seconds.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeRollbackCompletedEvent.ApplicationTypeName">
            <summary>
            Gets application type name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeRollbackCompletedEvent.ApplicationTypeVersion">
            <summary>
            Gets application type version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeRollbackCompletedEvent.FailureReason">
            <summary>
            Gets reason of failure.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeRollbackCompletedEvent.OverallUpgradeElapsedTimeInMs">
            <summary>
            Gets overall upgrade time in milli-seconds.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationUpgradeRollbackStartedEvent">
            <summary>
            Application Upgrade Rollback Started event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationUpgradeRollbackStartedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ApplicationUpgradeRollbackStartedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="applicationId">The identity of the application. This is an encoded representation of the application
            name. This is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="applicationTypeName">Application type name.</param>
            <param name="currentApplicationTypeVersion">Current Application type version.</param>
            <param name="applicationTypeVersion">Target Application type version.</param>
            <param name="failureReason">Describes reason of failure.</param>
            <param name="overallUpgradeElapsedTimeInMs">Overall upgrade time in milli-seconds.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeRollbackStartedEvent.ApplicationTypeName">
            <summary>
            Gets application type name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeRollbackStartedEvent.CurrentApplicationTypeVersion">
            <summary>
            Gets current Application type version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeRollbackStartedEvent.ApplicationTypeVersion">
            <summary>
            Gets target Application type version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeRollbackStartedEvent.FailureReason">
            <summary>
            Gets reason of failure.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeRollbackStartedEvent.OverallUpgradeElapsedTimeInMs">
            <summary>
            Gets overall upgrade time in milli-seconds.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationUpgradeStartedEvent">
            <summary>
            Application Upgrade Started event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationUpgradeStartedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ApplicationUpgradeStartedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="applicationId">The identity of the application. This is an encoded representation of the application
            name. This is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="applicationTypeName">Application type name.</param>
            <param name="currentApplicationTypeVersion">Current Application type version.</param>
            <param name="applicationTypeVersion">Target Application type version.</param>
            <param name="upgradeType">Type of upgrade.</param>
            <param name="rollingUpgradeMode">Mode of upgrade.</param>
            <param name="failureAction">Action if failed.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeStartedEvent.ApplicationTypeName">
            <summary>
            Gets application type name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeStartedEvent.CurrentApplicationTypeVersion">
            <summary>
            Gets current Application type version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeStartedEvent.ApplicationTypeVersion">
            <summary>
            Gets target Application type version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeStartedEvent.UpgradeType">
            <summary>
            Gets type of upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeStartedEvent.RollingUpgradeMode">
            <summary>
            Gets mode of upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeStartedEvent.FailureAction">
            <summary>
            Gets action if failed.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ApplicationUpgradeUpdateDescription">
            <summary>
            Describes the parameters for updating an ongoing application upgrade.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ApplicationUpgradeUpdateDescription.#ctor(Microsoft.ServiceFabric.Common.ApplicationName,System.Nullable{Microsoft.ServiceFabric.Common.UpgradeKind},Microsoft.ServiceFabric.Common.ApplicationHealthPolicy,Microsoft.ServiceFabric.Common.RollingUpgradeUpdateDescription)">
            <summary>
            Initializes a new instance of the ApplicationUpgradeUpdateDescription class.
            </summary>
            <param name="name">The name of the application, including the 'fabric:' URI scheme.</param>
            <param name="upgradeKind">The kind of upgrade out of the following possible values. Possible values include:
            'Invalid', 'Rolling'</param>
            <param name="applicationHealthPolicy">Defines a health policy used to evaluate the health of an application or one
            of its children entities.
            </param>
            <param name="updateDescription">Describes the parameters for updating a rolling upgrade of application or
            cluster.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeUpdateDescription.Name">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeUpdateDescription.UpgradeKind">
            <summary>
            Gets the kind of upgrade out of the following possible values. Possible values include: 'Invalid', 'Rolling'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeUpdateDescription.ApplicationHealthPolicy">
            <summary>
            Gets defines a health policy used to evaluate the health of an application or one of its children entities.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ApplicationUpgradeUpdateDescription.UpdateDescription">
            <summary>
            Gets the parameters for updating a rolling upgrade of application or cluster.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AutoScalingMechanism">
            <summary>
            Describes the mechanism for performing auto scaling operation. Derived classes will describe the actual mechanism.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.AutoScalingMechanism.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.AutoScalingMechanismKind})">
            <summary>
            Initializes a new instance of the AutoScalingMechanism class.
            </summary>
            <param name="kind">Enumerates the mechanisms for auto scaling.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AutoScalingMechanism.Kind">
            <summary>
            Gets enumerates the mechanisms for auto scaling.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AutoScalingMechanismKind">
            <summary>
            Defines values for AutoScalingMechanismKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.AutoScalingMechanismKind.AddRemoveReplica">
            <summary>
            Indicates that scaling should be performed by adding or removing replicas.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AutoScalingMetric">
            <summary>
            Describes the metric that is used for triggering auto scaling operation. Derived classes will describe resources or
            metrics.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.AutoScalingMetric.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.AutoScalingMetricKind})">
            <summary>
            Initializes a new instance of the AutoScalingMetric class.
            </summary>
            <param name="kind">Enumerates the metrics that are used for triggering auto scaling.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AutoScalingMetric.Kind">
            <summary>
            Gets enumerates the metrics that are used for triggering auto scaling.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AutoScalingMetricKind">
            <summary>
            Defines values for AutoScalingMetricKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.AutoScalingMetricKind.Resource">
            <summary>
            Indicates that the metric is one of resources, like cpu or memory.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AutoScalingPolicy">
            <summary>
            Describes the auto scaling policy
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.AutoScalingPolicy.#ctor(System.String,Microsoft.ServiceFabric.Common.AutoScalingTrigger,Microsoft.ServiceFabric.Common.AutoScalingMechanism)">
            <summary>
            Initializes a new instance of the AutoScalingPolicy class.
            </summary>
            <param name="name">The name of the auto scaling policy.</param>
            <param name="trigger">Determines when auto scaling operation will be invoked.</param>
            <param name="mechanism">The mechanism that is used to scale when auto scaling operation is invoked.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AutoScalingPolicy.Name">
            <summary>
            Gets the name of the auto scaling policy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AutoScalingPolicy.Trigger">
            <summary>
            Gets determines when auto scaling operation will be invoked.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AutoScalingPolicy.Mechanism">
            <summary>
            Gets the mechanism that is used to scale when auto scaling operation is invoked.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AutoScalingResourceMetric">
            <summary>
            Describes the resource that is used for triggering auto scaling.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.AutoScalingResourceMetric.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.AutoScalingResourceMetricName})">
            <summary>
            Initializes a new instance of the AutoScalingResourceMetric class.
            </summary>
            <param name="name">Name of the resource. Possible values include: 'cpu', 'memoryInGB'
            
            Enumerates the resources that are used for triggering auto scaling.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AutoScalingResourceMetric.Name">
            <summary>
            Gets name of the resource. Possible values include: 'cpu', 'memoryInGB'
            
            Enumerates the resources that are used for triggering auto scaling.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AutoScalingResourceMetricName">
            <summary>
            Defines values for AutoScalingResourceMetricName.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.AutoScalingResourceMetricName.Cpu">
            <summary>
            Indicates that the resource is CPU cores.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.AutoScalingResourceMetricName.MemoryInGB">
            <summary>
            Indicates that the resource is memory in GB.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AutoScalingTrigger">
            <summary>
            Describes the trigger for performing auto scaling operation.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.AutoScalingTrigger.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.AutoScalingTriggerKind})">
            <summary>
            Initializes a new instance of the AutoScalingTrigger class.
            </summary>
            <param name="kind">Enumerates the triggers for auto scaling.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AutoScalingTrigger.Kind">
            <summary>
            Gets enumerates the triggers for auto scaling.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AutoScalingTriggerKind">
            <summary>
            Defines values for AutoScalingTriggerKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.AutoScalingTriggerKind.AverageLoad">
            <summary>
            Indicates that scaling should be performed based on average load of all replicas in the service.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AverageLoadScalingTrigger">
            <summary>
            Describes the average load trigger used for auto scaling.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.AverageLoadScalingTrigger.#ctor(Microsoft.ServiceFabric.Common.AutoScalingMetric,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the AverageLoadScalingTrigger class.
            </summary>
            <param name="metric">Description of the metric that is used for scaling.</param>
            <param name="lowerLoadThreshold">Lower load threshold (if average load is below this threshold, service will scale
            down).</param>
            <param name="upperLoadThreshold">Upper load threshold (if average load is above this threshold, service will scale
            up).</param>
            <param name="scaleIntervalInSeconds">Scale interval that indicates how often will this trigger be checked.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AverageLoadScalingTrigger.Metric">
            <summary>
            Gets description of the metric that is used for scaling.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AverageLoadScalingTrigger.LowerLoadThreshold">
            <summary>
            Gets lower load threshold (if average load is below this threshold, service will scale down).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AverageLoadScalingTrigger.UpperLoadThreshold">
            <summary>
            Gets upper load threshold (if average load is above this threshold, service will scale up).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AverageLoadScalingTrigger.ScaleIntervalInSeconds">
            <summary>
            Gets scale interval that indicates how often will this trigger be checked.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AveragePartitionLoadScalingTrigger">
            <summary>
            Represents a scaling trigger related to an average load of a metric/resource of a partition.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.AveragePartitionLoadScalingTrigger.#ctor(System.String,System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the AveragePartitionLoadScalingTrigger class.
            </summary>
            <param name="metricName">The name of the metric for which usage should be tracked.</param>
            <param name="lowerLoadThreshold">The lower limit of the load below which a scale in operation should be
            performed.</param>
            <param name="upperLoadThreshold">The upper limit of the load beyond which a scale out operation should be
            performed.</param>
            <param name="scaleIntervalInSeconds">The period in seconds on which a decision is made whether to scale or
            not.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AveragePartitionLoadScalingTrigger.MetricName">
            <summary>
            Gets the name of the metric for which usage should be tracked.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AveragePartitionLoadScalingTrigger.LowerLoadThreshold">
            <summary>
            Gets the lower limit of the load below which a scale in operation should be performed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AveragePartitionLoadScalingTrigger.UpperLoadThreshold">
            <summary>
            Gets the upper limit of the load beyond which a scale out operation should be performed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AveragePartitionLoadScalingTrigger.ScaleIntervalInSeconds">
            <summary>
            Gets the period in seconds on which a decision is made whether to scale or not.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AverageServiceLoadScalingTrigger">
            <summary>
            Represents a scaling policy related to an average load of a metric/resource of a service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.AverageServiceLoadScalingTrigger.#ctor(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the AverageServiceLoadScalingTrigger class.
            </summary>
            <param name="metricName">The name of the metric for which usage should be tracked.</param>
            <param name="lowerLoadThreshold">The lower limit of the load below which a scale in operation should be
            performed.</param>
            <param name="upperLoadThreshold">The upper limit of the load beyond which a scale out operation should be
            performed.</param>
            <param name="scaleIntervalInSeconds">The period in seconds on which a decision is made whether to scale or
            not.</param>
            <param name="useOnlyPrimaryLoad">Flag determines whether only the load of primary replica should be considered for
            scaling.
            If set to true, then trigger will only consider the load of primary replicas of stateful service.
            If set to false, trigger will consider load of all replicas.
            This parameter cannot be set to true for stateless service.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AverageServiceLoadScalingTrigger.MetricName">
            <summary>
            Gets the name of the metric for which usage should be tracked.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AverageServiceLoadScalingTrigger.LowerLoadThreshold">
            <summary>
            Gets the lower limit of the load below which a scale in operation should be performed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AverageServiceLoadScalingTrigger.UpperLoadThreshold">
            <summary>
            Gets the upper limit of the load beyond which a scale out operation should be performed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AverageServiceLoadScalingTrigger.ScaleIntervalInSeconds">
            <summary>
            Gets the period in seconds on which a decision is made whether to scale or not.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AverageServiceLoadScalingTrigger.UseOnlyPrimaryLoad">
            <summary>
            Gets flag determines whether only the load of primary replica should be considered for scaling.
            If set to true, then trigger will only consider the load of primary replicas of stateful service.
            If set to false, trigger will consider load of all replicas.
            This parameter cannot be set to true for stateless service.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AzureBlobBackupStorageDescription">
            <summary>
            Describes the parameters for Azure blob store used for storing and enumerating backups.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.AzureBlobBackupStorageDescription.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the AzureBlobBackupStorageDescription class.
            </summary>
            <param name="connectionString">The connection string to connect to the Azure blob store.</param>
            <param name="containerName">The name of the container in the blob store to store and enumerate backups
            from.</param>
            <param name="friendlyName">Friendly name for this backup storage.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AzureBlobBackupStorageDescription.ConnectionString">
            <summary>
            Gets the connection string to connect to the Azure blob store.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AzureBlobBackupStorageDescription.ContainerName">
            <summary>
            Gets the name of the container in the blob store to store and enumerate backups from.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.AzureInternalMonitoringPipelineSinkDescription">
            <summary>
            Diagnostics settings for Geneva.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.AzureInternalMonitoringPipelineSinkDescription.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the AzureInternalMonitoringPipelineSinkDescription class.
            </summary>
            <param name="name">Name of the sink. This value is referenced by DiagnosticsReferenceDescription</param>
            <param name="description">A description of the sink.</param>
            <param name="accountName">Azure Internal monitoring pipeline account.</param>
            <param name="namespaceProperty">Azure Internal monitoring pipeline account namespace.</param>
            <param name="maConfigUrl">Azure Internal monitoring agent configuration.</param>
            <param name="fluentdConfigUrl">Azure Internal monitoring agent fluentd configuration.</param>
            <param name="autoKeyConfigUrl">Azure Internal monitoring pipeline autokey associated with the certificate.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AzureInternalMonitoringPipelineSinkDescription.AccountName">
            <summary>
            Gets azure Internal monitoring pipeline account.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AzureInternalMonitoringPipelineSinkDescription.NamespaceProperty">
            <summary>
            Gets azure Internal monitoring pipeline account namespace.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AzureInternalMonitoringPipelineSinkDescription.MaConfigUrl">
            <summary>
            Gets azure Internal monitoring agent configuration.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AzureInternalMonitoringPipelineSinkDescription.FluentdConfigUrl">
            <summary>
            Gets azure Internal monitoring agent fluentd configuration.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.AzureInternalMonitoringPipelineSinkDescription.AutoKeyConfigUrl">
            <summary>
            Gets azure Internal monitoring pipeline autokey associated with the certificate.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BackupConfigurationInfo">
            <summary>
            Describes the backup configuration information.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.BackupConfigurationInfo.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.BackupEntityKind},System.String,System.Nullable{Microsoft.ServiceFabric.Common.BackupPolicyScope},Microsoft.ServiceFabric.Common.BackupSuspensionInfo)">
            <summary>
            Initializes a new instance of the BackupConfigurationInfo class.
            </summary>
            <param name="kind">The entity type of a Service Fabric entity such as Application, Service or a Partition where
            periodic backups can be enabled.
            </param>
            <param name="policyName">The name of the backup policy which is applicable to this Service Fabric application or
            service or partition.</param>
            <param name="policyInheritedFrom">Specifies the scope at which the backup policy is applied.
            . Possible values include: 'Invalid', 'Partition', 'Service', 'Application'</param>
            <param name="suspensionInfo">Describes the backup suspension details.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupConfigurationInfo.PolicyName">
            <summary>
            Gets the name of the backup policy which is applicable to this Service Fabric application or service or partition.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupConfigurationInfo.PolicyInheritedFrom">
            <summary>
            Gets specifies the scope at which the backup policy is applied.
            . Possible values include: 'Invalid', 'Partition', 'Service', 'Application'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupConfigurationInfo.SuspensionInfo">
            <summary>
            Gets the backup suspension details.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupConfigurationInfo.Kind">
            <summary>
            Gets the entity type of a Service Fabric entity such as Application, Service or a Partition where periodic backups
            can be enabled.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BackupEntity">
            <summary>
            Describes the Service Fabric entity that is configured for backup.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.BackupEntity.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.BackupEntityKind})">
            <summary>
            Initializes a new instance of the BackupEntity class.
            </summary>
            <param name="entityKind">The entity type of a Service Fabric entity such as Application, Service or a Partition
            where periodic backups can be enabled.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupEntity.EntityKind">
            <summary>
            Gets the entity type of a Service Fabric entity such as Application, Service or a Partition where periodic backups
            can be enabled.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BackupEntityKind">
            <summary>
            Defines values for BackupEntityKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupEntityKind.Invalid">
            <summary>
            Indicates an invalid entity kind. All Service Fabric enumerations have the invalid type.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupEntityKind.Partition">
            <summary>
            Indicates the entity is a Service Fabric partition.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupEntityKind.Service">
            <summary>
            Indicates the entity is a Service Fabric service.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupEntityKind.Application">
            <summary>
            Indicates the entity is a Service Fabric application.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BackupInfo">
            <summary>
            Represents a backup point which can be used to trigger a restore.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.BackupInfo.#ctor(System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.String,Microsoft.ServiceFabric.Common.PartitionInformation,System.String,System.Nullable{Microsoft.ServiceFabric.Common.BackupType},Microsoft.ServiceFabric.Common.Epoch,System.String,System.Nullable{System.DateTime},System.String,Microsoft.ServiceFabric.Common.FabricErrorError)">
            <summary>
            Initializes a new instance of the BackupInfo class.
            </summary>
            <param name="backupId">Unique backup ID .</param>
            <param name="backupChainId">Unique backup chain ID. All backups part of the same chain has the same backup chain
            id. A backup chain is comprised of 1 full backup and multiple incremental backups.</param>
            <param name="applicationName">Name of the Service Fabric application this partition backup belongs to.</param>
            <param name="serviceName">Name of the Service Fabric service this partition backup belongs to.</param>
            <param name="partitionInformation">Information about the partition to which this backup belongs to</param>
            <param name="backupLocation">Location of the backup, relative to the backup store.</param>
            <param name="backupType">Describes the type of backup, whether its full or incremental.
            . Possible values include: 'Invalid', 'Full', 'Incremental'</param>
            <param name="epochOfLastBackupRecord">Epoch of the last record in this backup.</param>
            <param name="lsnOfLastBackupRecord">LSN of the last record in this backup.</param>
            <param name="creationTimeUtc">The date time when this backup was taken.</param>
            <param name="serviceManifestVersion">Manifest Version of the service this partition backup belongs to.</param>
            <param name="failureError">Denotes the failure encountered in getting backup point information.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupInfo.BackupId">
            <summary>
            Gets unique backup ID .
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupInfo.BackupChainId">
            <summary>
            Gets unique backup chain ID. All backups part of the same chain has the same backup chain id. A backup chain is
            comprised of 1 full backup and multiple incremental backups.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupInfo.ApplicationName">
            <summary>
            Gets name of the Service Fabric application this partition backup belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupInfo.ServiceName">
            <summary>
            Gets name of the Service Fabric service this partition backup belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupInfo.PartitionInformation">
            <summary>
            Gets information about the partition to which this backup belongs to
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupInfo.BackupLocation">
            <summary>
            Gets location of the backup, relative to the backup store.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupInfo.BackupType">
            <summary>
            Gets the type of backup, whether its full or incremental.
            . Possible values include: 'Invalid', 'Full', 'Incremental'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupInfo.EpochOfLastBackupRecord">
            <summary>
            Gets epoch of the last record in this backup.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupInfo.LsnOfLastBackupRecord">
            <summary>
            Gets LSN of the last record in this backup.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupInfo.CreationTimeUtc">
            <summary>
            Gets the date time when this backup was taken.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupInfo.ServiceManifestVersion">
            <summary>
            Gets manifest Version of the service this partition backup belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupInfo.FailureError">
            <summary>
            Gets denotes the failure encountered in getting backup point information.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BackupPartitionDescription">
            <summary>
            Describes the parameters for triggering partition's backup.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.BackupPartitionDescription.#ctor(Microsoft.ServiceFabric.Common.BackupStorageDescription)">
            <summary>
            Initializes a new instance of the BackupPartitionDescription class.
            </summary>
            <param name="backupStorage">Specifies the details of the backup storage where to save the backup.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupPartitionDescription.BackupStorage">
            <summary>
            Gets specifies the details of the backup storage where to save the backup.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BackupPolicyDescription">
            <summary>
            Describes a backup policy for configuring periodic backup.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.BackupPolicyDescription.#ctor(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.BackupScheduleDescription,Microsoft.ServiceFabric.Common.BackupStorageDescription,Microsoft.ServiceFabric.Common.RetentionPolicyDescription)">
            <summary>
            Initializes a new instance of the BackupPolicyDescription class.
            </summary>
            <param name="name">The unique name identifying this backup policy.</param>
            <param name="autoRestoreOnDataLoss">Specifies whether to trigger restore automatically using the latest available
            backup in case the partition experiences a data loss event.</param>
            <param name="maxIncrementalBackups">Defines the maximum number of incremental backups to be taken between two full
            backups. This is just the upper limit. A full backup may be taken before specified number of incremental backups
            are completed in one of the following conditions
            - The replica has never taken a full backup since it has become primary,
            - Some of the log records since the last backup has been truncated, or
            - Replica passed the MaxAccumulatedBackupLogSizeInMB limit.
            </param>
            <param name="schedule">Describes the backup schedule parameters.</param>
            <param name="storage">Describes the details of backup storage where to store the periodic backups.</param>
            <param name="retentionPolicy">Describes the policy to retain backups in storage.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupPolicyDescription.Name">
            <summary>
            Gets the unique name identifying this backup policy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupPolicyDescription.AutoRestoreOnDataLoss">
            <summary>
            Gets specifies whether to trigger restore automatically using the latest available backup in case the partition
            experiences a data loss event.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupPolicyDescription.MaxIncrementalBackups">
            <summary>
            Gets defines the maximum number of incremental backups to be taken between two full backups. This is just the upper
            limit. A full backup may be taken before specified number of incremental backups are completed in one of the
            following conditions
            - The replica has never taken a full backup since it has become primary,
            - Some of the log records since the last backup has been truncated, or
            - Replica passed the MaxAccumulatedBackupLogSizeInMB limit.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupPolicyDescription.Schedule">
            <summary>
            Gets the backup schedule parameters.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupPolicyDescription.Storage">
            <summary>
            Gets the details of backup storage where to store the periodic backups.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupPolicyDescription.RetentionPolicy">
            <summary>
            Gets the policy to retain backups in storage.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BackupPolicyScope">
            <summary>
            Defines values for BackupPolicyScope.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupPolicyScope.Invalid">
            <summary>
            Indicates an invalid backup policy scope type. All Service Fabric enumerations have the invalid type.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupPolicyScope.Partition">
            <summary>
            Indicates the backup policy is applied at partition level. Hence overriding any policy which may have applied at
            partition's service or application level.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupPolicyScope.Service">
            <summary>
            Indicates the backup policy is applied at service level. All partitions of the service inherit this policy unless
            explicitly overridden at partition level.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupPolicyScope.Application">
            <summary>
            Indicates the backup policy is applied at application level. All services and partitions of the application inherit
            this policy unless explicitly overridden at service or partition level.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BackupProgressInfo">
            <summary>
            Describes the progress of a partition's backup.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.BackupProgressInfo.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.BackupState},System.Nullable{System.DateTime},System.Nullable{System.Guid},System.String,Microsoft.ServiceFabric.Common.Epoch,System.String,Microsoft.ServiceFabric.Common.FabricErrorError)">
            <summary>
            Initializes a new instance of the BackupProgressInfo class.
            </summary>
            <param name="backupState">Represents the current state of the partition backup operation.
            . Possible values include: 'Invalid', 'Accepted', 'BackupInProgress', 'Success', 'Failure', 'Timeout'</param>
            <param name="timeStampUtc">TimeStamp in UTC when operation succeeded or failed.</param>
            <param name="backupId">Unique ID of the newly created backup.</param>
            <param name="backupLocation">Location, relative to the backup store, of the newly created backup.</param>
            <param name="epochOfLastBackupRecord">Specifies the epoch of the last record included in backup.</param>
            <param name="lsnOfLastBackupRecord">The LSN of last record included in backup.</param>
            <param name="failureError">Denotes the failure encountered in performing backup operation.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupProgressInfo.BackupState">
            <summary>
            Gets represents the current state of the partition backup operation.
            . Possible values include: 'Invalid', 'Accepted', 'BackupInProgress', 'Success', 'Failure', 'Timeout'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupProgressInfo.TimeStampUtc">
            <summary>
            Gets timeStamp in UTC when operation succeeded or failed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupProgressInfo.BackupId">
            <summary>
            Gets unique ID of the newly created backup.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupProgressInfo.BackupLocation">
            <summary>
            Gets location, relative to the backup store, of the newly created backup.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupProgressInfo.EpochOfLastBackupRecord">
            <summary>
            Gets specifies the epoch of the last record included in backup.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupProgressInfo.LsnOfLastBackupRecord">
            <summary>
            Gets the LSN of last record included in backup.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupProgressInfo.FailureError">
            <summary>
            Gets denotes the failure encountered in performing backup operation.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BackupScheduleDescription">
            <summary>
            Describes the backup schedule parameters.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.BackupScheduleDescription.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.BackupScheduleKind})">
            <summary>
            Initializes a new instance of the BackupScheduleDescription class.
            </summary>
            <param name="scheduleKind">The kind of backup schedule, time based or frequency based.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupScheduleDescription.ScheduleKind">
            <summary>
            Gets the kind of backup schedule, time based or frequency based.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BackupScheduleFrequencyType">
            <summary>
            Defines values for BackupScheduleFrequencyType.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupScheduleFrequencyType.Invalid">
            <summary>
            Indicates an invalid backup schedule frequency type. All Service Fabric enumerations have the invalid type.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupScheduleFrequencyType.Daily">
            <summary>
            Indicates that the time based backup schedule is repeated at a daily frequency.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupScheduleFrequencyType.Weekly">
            <summary>
            Indicates that the time based backup schedule is repeated at a weekly frequency.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BackupScheduleKind">
            <summary>
            Defines values for BackupScheduleKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupScheduleKind.Invalid">
            <summary>
            Indicates an invalid backup schedule kind. All Service Fabric enumerations have the invalid type.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupScheduleKind.TimeBased">
            <summary>
            Indicates a time-based backup schedule.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupScheduleKind.FrequencyBased">
            <summary>
            Indicates a frequency-based backup schedule.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BackupState">
            <summary>
            Defines values for BackupState.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupState.Invalid">
            <summary>
            Indicates an invalid backup state. All Service Fabric enumerations have the invalid type.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupState.Accepted">
            <summary>
            Operation has been validated and accepted. Backup is yet to be triggered.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupState.BackupInProgress">
            <summary>
            Backup operation has been triggered and is under process.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupState.Success">
            <summary>
            Operation completed with success.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupState.Failure">
            <summary>
            Operation completed with failure.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupState.Timeout">
            <summary>
            Operation timed out.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BackupStorageDescription">
            <summary>
            Describes the parameters for the backup storage.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.BackupStorageDescription.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.BackupStorageKind},System.String)">
            <summary>
            Initializes a new instance of the BackupStorageDescription class.
            </summary>
            <param name="storageKind">The kind of backup storage, where backups are saved.
            </param>
            <param name="friendlyName">Friendly name for this backup storage.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupStorageDescription.FriendlyName">
            <summary>
            Gets friendly name for this backup storage.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupStorageDescription.StorageKind">
            <summary>
            Gets the kind of backup storage, where backups are saved.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BackupStorageKind">
            <summary>
            Defines values for BackupStorageKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupStorageKind.Invalid">
            <summary>
            Indicates an invalid backup storage kind. All Service Fabric enumerations have the invalid type.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupStorageKind.FileShare">
            <summary>
            Indicates file/ SMB share to be used as backup storage.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupStorageKind.AzureBlobStore">
            <summary>
            Indicates Azure blob store to be used as backup storage.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupStorageKind.DsmsAzureBlobStore">
            <summary>
            Indicates Dsms Azure blob store to be used as backup storage.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupStorageKind.ManagedIdentityAzureBlobStore">
            <summary>
            Indicates Azure blob store to be used as backup storage using managed identity.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BackupSuspensionInfo">
            <summary>
            Describes the backup suspension details.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.BackupSuspensionInfo.#ctor(System.Nullable{System.Boolean},System.Nullable{Microsoft.ServiceFabric.Common.BackupSuspensionScope})">
            <summary>
            Initializes a new instance of the BackupSuspensionInfo class.
            </summary>
            <param name="isSuspended">Indicates whether periodic backup is suspended at this level or not.</param>
            <param name="suspensionInheritedFrom">Specifies the scope at which the backup suspension was applied.
            . Possible values include: 'Invalid', 'Partition', 'Service', 'Application'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupSuspensionInfo.IsSuspended">
            <summary>
            Gets indicates whether periodic backup is suspended at this level or not.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BackupSuspensionInfo.SuspensionInheritedFrom">
            <summary>
            Gets specifies the scope at which the backup suspension was applied.
            . Possible values include: 'Invalid', 'Partition', 'Service', 'Application'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BackupSuspensionScope">
            <summary>
            Defines values for BackupSuspensionScope.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupSuspensionScope.Invalid">
            <summary>
            Indicates an invalid backup suspension scope type also indicating entity is not suspended. All Service Fabric
            enumerations have the invalid type.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupSuspensionScope.Partition">
            <summary>
            Indicates the backup suspension is applied at partition level.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupSuspensionScope.Service">
            <summary>
            Indicates the backup suspension is applied at service level. All partitions of the service are hence suspended for
            backup.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupSuspensionScope.Application">
            <summary>
            Indicates the backup suspension is applied at application level. All services and partitions of the application are
            hence suspended for backup.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BackupType">
            <summary>
            Defines values for BackupType.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupType.Invalid">
            <summary>
            Indicates an invalid backup type. All Service Fabric enumerations have the invalid type.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupType.Full">
            <summary>
            Indicates a full backup.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.BackupType.Incremental">
            <summary>
            Indicates an incremental backup. A backup chain is comprised of a full backup followed by 0 or more incremental
            backups.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BasicRetentionPolicyDescription">
            <summary>
            Describes basic retention policy.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.BasicRetentionPolicyDescription.#ctor(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the BasicRetentionPolicyDescription class.
            </summary>
            <param name="retentionDuration">It is the minimum duration for which a backup created, will remain stored in the
            storage and might get deleted after that span of time. It should be specified in ISO8601 format.</param>
            <param name="minimumNumberOfBackups">It is the minimum number of backups to be retained at any point of time. If
            specified with a non zero value, backups will not be deleted even if the backups have gone past retention duration
            and have number of backups less than or equal to it.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BasicRetentionPolicyDescription.RetentionDuration">
            <summary>
            Gets it is the minimum duration for which a backup created, will remain stored in the storage and might get deleted
            after that span of time. It should be specified in ISO8601 format.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BasicRetentionPolicyDescription.MinimumNumberOfBackups">
            <summary>
            Gets it is the minimum number of backups to be retained at any point of time. If specified with a non zero value,
            backups will not be deleted even if the backups have gone past retention duration and have number of backups less
            than or equal to it.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.BinaryPropertyValue">
            <summary>
            Describes a Service Fabric property value of type Binary.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.BinaryPropertyValue.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the BinaryPropertyValue class.
            </summary>
            <param name="data">Array of bytes to be sent as an integer array. Each element of array is a number between 0 and
            255.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.BinaryPropertyValue.Data">
            <summary>
            Gets array of bytes to be sent as an integer array. Each element of array is a number between 0 and 255.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Chaos">
            <summary>
            Contains a description of Chaos.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Chaos.#ctor(Microsoft.ServiceFabric.Common.ChaosParameters,System.Nullable{Microsoft.ServiceFabric.Common.ChaosStatus},System.Nullable{Microsoft.ServiceFabric.Common.ChaosScheduleStatus})">
            <summary>
            Initializes a new instance of the Chaos class.
            </summary>
            <param name="chaosParameters">If Chaos is running, these are the parameters Chaos is running with.</param>
            <param name="status">Current status of the Chaos run.
            . Possible values include: 'Invalid', 'Running', 'Stopped'</param>
            <param name="scheduleStatus">Current status of the schedule.
            . Possible values include: 'Invalid', 'Stopped', 'Active', 'Expired', 'Pending'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Chaos.ChaosParameters">
            <summary>
            Gets if Chaos is running, these are the parameters Chaos is running with.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Chaos.Status">
            <summary>
            Gets current status of the Chaos run.
            . Possible values include: 'Invalid', 'Running', 'Stopped'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Chaos.ScheduleStatus">
            <summary>
            Gets current status of the schedule.
            . Possible values include: 'Invalid', 'Stopped', 'Active', 'Expired', 'Pending'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosCodePackageRestartScheduledEvent">
            <summary>
            Chaos Restart Code Package Fault Scheduled event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ChaosCodePackageRestartScheduledEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.Nullable{System.Guid},System.Nullable{System.Guid},Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ChaosCodePackageRestartScheduledEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="applicationId">The identity of the application. This is an encoded representation of the application
            name. This is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="faultGroupId">Id of fault group.</param>
            <param name="faultId">Id of fault.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="serviceManifestName">Service manifest name.</param>
            <param name="codePackageName">Code package name.</param>
            <param name="servicePackageActivationId">Id of Service package activation.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosCodePackageRestartScheduledEvent.FaultGroupId">
            <summary>
            Gets id of fault group.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosCodePackageRestartScheduledEvent.FaultId">
            <summary>
            Gets id of fault.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosCodePackageRestartScheduledEvent.NodeName">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosCodePackageRestartScheduledEvent.ServiceManifestName">
            <summary>
            Gets service manifest name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosCodePackageRestartScheduledEvent.CodePackageName">
            <summary>
            Gets code package name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosCodePackageRestartScheduledEvent.ServicePackageActivationId">
            <summary>
            Gets id of Service package activation.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosContext">
            <summary>
            Describes a map, which is a collection of (string, string) type key-value pairs. The map can be used to record
            information about
            the Chaos run. There cannot be more than 100 such pairs and each string (key or value) can be at most 4095
            characters long.
            This map is set by the starter of the Chaos run to optionally store the context about the specific run.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ChaosContext.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the ChaosContext class.
            </summary>
            <param name="map">Describes a map that contains a collection of ChaosContextMapItem's.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosContext.Map">
            <summary>
            Gets a map that contains a collection of ChaosContextMapItem's.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosEvent">
            <summary>
            Represents an event generated during a Chaos run.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ChaosEvent.#ctor(System.Nullable{System.DateTime},System.Nullable{Microsoft.ServiceFabric.Common.ChaosEventKind})">
            <summary>
            Initializes a new instance of the ChaosEvent class.
            </summary>
            <param name="timeStampUtc">The UTC timestamp when this Chaos event was generated.</param>
            <param name="kind">The kind of Chaos event.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosEvent.TimeStampUtc">
            <summary>
            Gets the UTC timestamp when this Chaos event was generated.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosEvent.Kind">
            <summary>
            Gets the kind of Chaos event.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosEventKind">
            <summary>
            Defines values for ChaosEventKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ChaosEventKind.Invalid">
            <summary>
            Indicates an invalid Chaos event kind. All Service Fabric enumerations have the invalid type.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ChaosEventKind.Started">
            <summary>
            Indicates a Chaos event that gets generated when Chaos is started.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ChaosEventKind.ExecutingFaults">
            <summary>
            Indicates a Chaos event that gets generated when Chaos has decided on the faults for an iteration. This Chaos event
            contains the details of the faults as a list of strings.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ChaosEventKind.Waiting">
            <summary>
            Indicates a Chaos event that gets generated when Chaos is waiting for the cluster to become ready for faulting, for
            example, Chaos may be waiting for the on-going upgrade to finish.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ChaosEventKind.ValidationFailed">
            <summary>
            Indicates a Chaos event that gets generated when the cluster entities do not become stable and healthy within
            ChaosParameters.MaxClusterStabilizationTimeoutInSeconds.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ChaosEventKind.TestError">
            <summary>
            Indicates a Chaos event that gets generated when an unexpected event has occurred in the Chaos engine, for example,
            due to the cluster snapshot being inconsistent, while faulting a faultable entity Chaos found that the entity was
            already faulted.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ChaosEventKind.Stopped">
            <summary>
            Indicates a Chaos event that gets generated when Chaos stops because either the user issued a stop or the time to
            run was up.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosEventWrapper">
            <summary>
            Wrapper object for Chaos event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ChaosEventWrapper.#ctor(Microsoft.ServiceFabric.Common.ChaosEvent)">
            <summary>
            Initializes a new instance of the ChaosEventWrapper class.
            </summary>
            <param name="chaosEvent">Represents an event generated during a Chaos run.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosEventWrapper.ChaosEvent">
            <summary>
            Gets represents an event generated during a Chaos run.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosNodeRestartScheduledEvent">
            <summary>
            Chaos Restart Node Fault Scheduled event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ChaosNodeRestartScheduledEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int64},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ChaosNodeRestartScheduledEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="nodeInstanceId">Id of Node instance.</param>
            <param name="faultGroupId">Id of fault group.</param>
            <param name="faultId">Id of fault.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosNodeRestartScheduledEvent.NodeInstanceId">
            <summary>
            Gets id of Node instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosNodeRestartScheduledEvent.FaultGroupId">
            <summary>
            Gets id of fault group.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosNodeRestartScheduledEvent.FaultId">
            <summary>
            Gets id of fault.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosParameters">
            <summary>
            Defines all the parameters to configure a Chaos run.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ChaosParameters.#ctor(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},Microsoft.ServiceFabric.Common.ClusterHealthPolicy,Microsoft.ServiceFabric.Common.ChaosContext,Microsoft.ServiceFabric.Common.ChaosTargetFilter)">
            <summary>
            Initializes a new instance of the ChaosParameters class.
            </summary>
            <param name="timeToRunInSeconds">Total time (in seconds) for which Chaos will run before automatically stopping.
            The maximum allowed value is 4,294,967,295 (System.UInt32.MaxValue).
            </param>
            <param name="maxClusterStabilizationTimeoutInSeconds">The maximum amount of time to wait for all cluster entities
            to become stable and healthy. Chaos executes in iterations and at the start of each iteration it validates the
            health of cluster entities.
            During validation if a cluster entity is not stable and healthy within MaxClusterStabilizationTimeoutInSeconds,
            Chaos generates a validation failed event.
            </param>
            <param name="maxConcurrentFaults">MaxConcurrentFaults is the maximum number of concurrent faults induced per
            iteration.
            Chaos executes in iterations and two consecutive iterations are separated by a validation phase.
            The higher the concurrency, the more aggressive the injection of faults, leading to inducing more complex series of
            states to uncover bugs.
            The recommendation is to start with a value of 2 or 3 and to exercise caution while moving up.
            </param>
            <param name="enableMoveReplicaFaults">Enables or disables the move primary and move secondary faults.
            </param>
            <param name="waitTimeBetweenFaultsInSeconds">Wait time (in seconds) between consecutive faults within a single
            iteration.
            The larger the value, the lower the overlapping between faults and the simpler the sequence of state transitions
            that the cluster goes through.
            The recommendation is to start with a value between 1 and 5 and exercise caution while moving up.
            </param>
            <param name="waitTimeBetweenIterationsInSeconds">Time-separation (in seconds) between two consecutive iterations of
            Chaos.
            The larger the value, the lower the fault injection rate.
            </param>
            <param name="clusterHealthPolicy">Passed-in cluster health policy is used to validate health of the cluster in
            between Chaos iterations. If the cluster health is in error or if an unexpected exception happens during fault
            execution--to provide the cluster with some time to recuperate--Chaos will wait for 30 minutes before the next
            health-check.
            </param>
            <param name="context">Describes a map, which is a collection of (string, string) type key-value pairs. The map can
            be used to record information about
            the Chaos run. There cannot be more than 100 such pairs and each string (key or value) can be at most 4095
            characters long.
            This map is set by the starter of the Chaos run to optionally store the context about the specific run.
            </param>
            <param name="chaosTargetFilter">List of cluster entities to target for Chaos faults.
            This filter can be used to target Chaos faults only to certain node types or only to certain application instances.
            If ChaosTargetFilter is not used, Chaos faults all cluster entities.
            If ChaosTargetFilter is used, Chaos faults only the entities that meet the ChaosTargetFilter specification.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosParameters.TimeToRunInSeconds">
            <summary>
            Gets total time (in seconds) for which Chaos will run before automatically stopping. The maximum allowed value is
            4,294,967,295 (System.UInt32.MaxValue).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosParameters.MaxClusterStabilizationTimeoutInSeconds">
            <summary>
            Gets the maximum amount of time to wait for all cluster entities to become stable and healthy. Chaos executes in
            iterations and at the start of each iteration it validates the health of cluster entities.
            During validation if a cluster entity is not stable and healthy within MaxClusterStabilizationTimeoutInSeconds,
            Chaos generates a validation failed event.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosParameters.MaxConcurrentFaults">
            <summary>
            Gets maxConcurrentFaults is the maximum number of concurrent faults induced per iteration.
            Chaos executes in iterations and two consecutive iterations are separated by a validation phase.
            The higher the concurrency, the more aggressive the injection of faults, leading to inducing more complex series of
            states to uncover bugs.
            The recommendation is to start with a value of 2 or 3 and to exercise caution while moving up.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosParameters.EnableMoveReplicaFaults">
            <summary>
            Gets enables or disables the move primary and move secondary faults.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosParameters.WaitTimeBetweenFaultsInSeconds">
            <summary>
            Gets wait time (in seconds) between consecutive faults within a single iteration.
            The larger the value, the lower the overlapping between faults and the simpler the sequence of state transitions
            that the cluster goes through.
            The recommendation is to start with a value between 1 and 5 and exercise caution while moving up.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosParameters.WaitTimeBetweenIterationsInSeconds">
            <summary>
            Gets time-separation (in seconds) between two consecutive iterations of Chaos.
            The larger the value, the lower the fault injection rate.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosParameters.ClusterHealthPolicy">
            <summary>
            Gets passed-in cluster health policy is used to validate health of the cluster in between Chaos iterations. If the
            cluster health is in error or if an unexpected exception happens during fault execution--to provide the cluster
            with some time to recuperate--Chaos will wait for 30 minutes before the next health-check.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosParameters.Context">
            <summary>
            Gets a map, which is a collection of (string, string) type key-value pairs. The map can be used to record
            information about
            the Chaos run. There cannot be more than 100 such pairs and each string (key or value) can be at most 4095
            characters long.
            This map is set by the starter of the Chaos run to optionally store the context about the specific run.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosParameters.ChaosTargetFilter">
            <summary>
            Gets list of cluster entities to target for Chaos faults.
            This filter can be used to target Chaos faults only to certain node types or only to certain application instances.
            If ChaosTargetFilter is not used, Chaos faults all cluster entities.
            If ChaosTargetFilter is used, Chaos faults only the entities that meet the ChaosTargetFilter specification.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosParametersDictionaryItem">
            <summary>
            Defines an item in ChaosParametersDictionary of the Chaos Schedule.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ChaosParametersDictionaryItem.#ctor(System.String,Microsoft.ServiceFabric.Common.ChaosParameters)">
            <summary>
            Initializes a new instance of the ChaosParametersDictionaryItem class.
            </summary>
            <param name="key">The key identifying the Chaos Parameter in the dictionary. This key is referenced by Chaos
            Schedule Jobs.</param>
            <param name="value">Defines all the parameters to configure a Chaos run.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosParametersDictionaryItem.Key">
            <summary>
            Gets the key identifying the Chaos Parameter in the dictionary. This key is referenced by Chaos Schedule Jobs.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosParametersDictionaryItem.Value">
            <summary>
            Gets defines all the parameters to configure a Chaos run.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosPartitionPrimaryMoveScheduledEvent">
            <summary>
            Chaos Move Primary Fault Scheduled event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ChaosPartitionPrimaryMoveScheduledEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ChaosPartitionPrimaryMoveScheduledEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="faultGroupId">Id of fault group.</param>
            <param name="faultId">Id of fault.</param>
            <param name="serviceName">Service name.</param>
            <param name="nodeTo">The name of a Service Fabric node.</param>
            <param name="forcedMove">Indicates a forced move.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosPartitionPrimaryMoveScheduledEvent.FaultGroupId">
            <summary>
            Gets id of fault group.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosPartitionPrimaryMoveScheduledEvent.FaultId">
            <summary>
            Gets id of fault.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosPartitionPrimaryMoveScheduledEvent.ServiceName">
            <summary>
            Gets service name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosPartitionPrimaryMoveScheduledEvent.NodeTo">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosPartitionPrimaryMoveScheduledEvent.ForcedMove">
            <summary>
            Gets indicates a forced move.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosPartitionSecondaryMoveScheduledEvent">
            <summary>
            Chaos Move Secondary Fault Scheduled event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ChaosPartitionSecondaryMoveScheduledEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ChaosPartitionSecondaryMoveScheduledEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="faultGroupId">Id of fault group.</param>
            <param name="faultId">Id of fault.</param>
            <param name="serviceName">Service name.</param>
            <param name="sourceNode">The name of a Service Fabric node.</param>
            <param name="destinationNode">The name of a Service Fabric node.</param>
            <param name="forcedMove">Indicates a forced move.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosPartitionSecondaryMoveScheduledEvent.FaultGroupId">
            <summary>
            Gets id of fault group.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosPartitionSecondaryMoveScheduledEvent.FaultId">
            <summary>
            Gets id of fault.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosPartitionSecondaryMoveScheduledEvent.ServiceName">
            <summary>
            Gets service name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosPartitionSecondaryMoveScheduledEvent.SourceNode">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosPartitionSecondaryMoveScheduledEvent.DestinationNode">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosPartitionSecondaryMoveScheduledEvent.ForcedMove">
            <summary>
            Gets indicates a forced move.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosReplicaRemovalScheduledEvent">
            <summary>
            Chaos Remove Replica Fault Scheduled event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ChaosReplicaRemovalScheduledEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId,System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ChaosReplicaRemovalScheduledEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="replicaId">Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify
            a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a
            replica gets dropped and another replica gets created on the same node for the same partition, it will get a
            different value for the id. Sometimes the id of a stateless service instance is also referred as a replica
            id.</param>
            <param name="faultGroupId">Id of fault group.</param>
            <param name="faultId">Id of fault.</param>
            <param name="serviceUri">Service name.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosReplicaRemovalScheduledEvent.FaultGroupId">
            <summary>
            Gets id of fault group.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosReplicaRemovalScheduledEvent.FaultId">
            <summary>
            Gets id of fault.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosReplicaRemovalScheduledEvent.ServiceUri">
            <summary>
            Gets service name.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosReplicaRestartScheduledEvent">
            <summary>
            Chaos Restart Replica Fault Scheduled event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ChaosReplicaRestartScheduledEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId,System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ChaosReplicaRestartScheduledEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="replicaId">Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify
            a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a
            replica gets dropped and another replica gets created on the same node for the same partition, it will get a
            different value for the id. Sometimes the id of a stateless service instance is also referred as a replica
            id.</param>
            <param name="faultGroupId">Id of fault group.</param>
            <param name="faultId">Id of fault.</param>
            <param name="serviceUri">Service name.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosReplicaRestartScheduledEvent.FaultGroupId">
            <summary>
            Gets id of fault group.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosReplicaRestartScheduledEvent.FaultId">
            <summary>
            Gets id of fault.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosReplicaRestartScheduledEvent.ServiceUri">
            <summary>
            Gets service name.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosSchedule">
            <summary>
            Defines the schedule used by Chaos.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ChaosSchedule.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ChaosParametersDictionaryItem},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ChaosScheduleJob})">
            <summary>
            Initializes a new instance of the ChaosSchedule class.
            </summary>
            <param name="startDate">The date and time Chaos will start using this schedule.
            </param>
            <param name="expiryDate">The date and time Chaos will continue to use this schedule until.
            </param>
            <param name="chaosParametersDictionary">A mapping of string names to Chaos Parameters to be referenced by Chaos
            Schedule Jobs.
            </param>
            <param name="jobs">A list of all Chaos Schedule Jobs that will be automated by the schedule.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosSchedule.StartDate">
            <summary>
            Gets the date and time Chaos will start using this schedule.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosSchedule.ExpiryDate">
            <summary>
            Gets the date and time Chaos will continue to use this schedule until.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosSchedule.ChaosParametersDictionary">
            <summary>
            Gets a mapping of string names to Chaos Parameters to be referenced by Chaos Schedule Jobs.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosSchedule.Jobs">
            <summary>
            Gets a list of all Chaos Schedule Jobs that will be automated by the schedule.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosScheduleDescription">
            <summary>
            Defines the Chaos Schedule used by Chaos and the version of the Chaos Schedule. The version value wraps back to 0
            after surpassing 2,147,483,647.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ChaosScheduleDescription.#ctor(System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.ChaosSchedule)">
            <summary>
            Initializes a new instance of the ChaosScheduleDescription class.
            </summary>
            <param name="version">The version number of the Schedule.</param>
            <param name="schedule">Defines the schedule used by Chaos.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosScheduleDescription.Version">
            <summary>
            Gets the version number of the Schedule.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosScheduleDescription.Schedule">
            <summary>
            Gets defines the schedule used by Chaos.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosScheduleJob">
            <summary>
            Defines a repetition rule and parameters of Chaos to be used with the Chaos Schedule.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ChaosScheduleJob.#ctor(System.String,Microsoft.ServiceFabric.Common.ChaosScheduleJobActiveDaysOfWeek,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.TimeRange})">
            <summary>
            Initializes a new instance of the ChaosScheduleJob class.
            </summary>
            <param name="chaosParameters">A reference to which Chaos Parameters of the Chaos Schedule to use.
            </param>
            <param name="days">Defines the days of the week that a Chaos Schedule Job will run for.</param>
            <param name="times">A list of Time Ranges that specify when during active days that this job will run. The times
            are interpreted as UTC.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosScheduleJob.ChaosParameters">
            <summary>
            Gets a reference to which Chaos Parameters of the Chaos Schedule to use.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosScheduleJob.Days">
            <summary>
            Gets defines the days of the week that a Chaos Schedule Job will run for.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosScheduleJob.Times">
            <summary>
            Gets a list of Time Ranges that specify when during active days that this job will run. The times are interpreted
            as UTC.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosScheduleJobActiveDaysOfWeek">
            <summary>
            Defines the days of the week that a Chaos Schedule Job will run for.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ChaosScheduleJobActiveDaysOfWeek.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ChaosScheduleJobActiveDaysOfWeek class.
            </summary>
            <param name="sunday">Indicates if the Chaos Schedule Job will run on Sunday</param>
            <param name="monday">Indicates if the Chaos Schedule Job will run on Monday</param>
            <param name="tuesday">Indicates if the Chaos Schedule Job will run on Tuesday</param>
            <param name="wednesday">Indicates if the Chaos Schedule Job will run on Wednesday</param>
            <param name="thursday">Indicates if the Chaos Schedule Job will run on Thursday</param>
            <param name="friday">Indicates if the Chaos Schedule Job will run on Friday</param>
            <param name="saturday">Indicates if the Chaos Schedule Job will run on Saturday</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosScheduleJobActiveDaysOfWeek.Sunday">
            <summary>
            Gets indicates if the Chaos Schedule Job will run on Sunday
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosScheduleJobActiveDaysOfWeek.Monday">
            <summary>
            Gets indicates if the Chaos Schedule Job will run on Monday
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosScheduleJobActiveDaysOfWeek.Tuesday">
            <summary>
            Gets indicates if the Chaos Schedule Job will run on Tuesday
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosScheduleJobActiveDaysOfWeek.Wednesday">
            <summary>
            Gets indicates if the Chaos Schedule Job will run on Wednesday
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosScheduleJobActiveDaysOfWeek.Thursday">
            <summary>
            Gets indicates if the Chaos Schedule Job will run on Thursday
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosScheduleJobActiveDaysOfWeek.Friday">
            <summary>
            Gets indicates if the Chaos Schedule Job will run on Friday
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosScheduleJobActiveDaysOfWeek.Saturday">
            <summary>
            Gets indicates if the Chaos Schedule Job will run on Saturday
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosScheduleStatus">
            <summary>
            Defines values for ChaosScheduleStatus.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ChaosScheduleStatus.Invalid">
            <summary>
            Indicates an invalid Chaos Schedule status. All Service Fabric enumerations have the invalid type. The value is
            zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ChaosScheduleStatus.Stopped">
            <summary>
            Indicates that the schedule is stopped and not being used to schedule runs of chaos. The value is one.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ChaosScheduleStatus.Active">
            <summary>
            Indicates that the schedule is active and is being used to schedule runs of Chaos. The value is two.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ChaosScheduleStatus.Expired">
            <summary>
            Indicates that the schedule is expired and will no longer be used to schedule runs of Chaos. The value is three.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ChaosScheduleStatus.Pending">
            <summary>
            Indicates that the schedule is pending and is not yet being used to schedule runs of Chaos but will be used when
            the start time is passed. The value is four.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosStartedEvent">
            <summary>
            Chaos Started event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ChaosStartedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.Nullable{System.Int64},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ChaosStartedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="maxConcurrentFaults">Maximum number of concurrent faults.</param>
            <param name="timeToRunInSeconds">Time to run in seconds.</param>
            <param name="maxClusterStabilizationTimeoutInSeconds">Maximum timeout for cluster stabilization in seconds.</param>
            <param name="waitTimeBetweenIterationsInSeconds">Wait time between iterations in seconds.</param>
            <param name="waitTimeBetweenFaultsInSeconds">Wait time between faults in seconds.</param>
            <param name="moveReplicaFaultEnabled">Indicates MoveReplica fault is enabled.</param>
            <param name="includedNodeTypeList">List of included Node types.</param>
            <param name="includedApplicationList">List of included Applications.</param>
            <param name="clusterHealthPolicy">Health policy.</param>
            <param name="chaosContext">Chaos Context.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosStartedEvent.MaxConcurrentFaults">
            <summary>
            Gets maximum number of concurrent faults.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosStartedEvent.TimeToRunInSeconds">
            <summary>
            Gets time to run in seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosStartedEvent.MaxClusterStabilizationTimeoutInSeconds">
            <summary>
            Gets maximum timeout for cluster stabilization in seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosStartedEvent.WaitTimeBetweenIterationsInSeconds">
            <summary>
            Gets wait time between iterations in seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosStartedEvent.WaitTimeBetweenFaultsInSeconds">
            <summary>
            Gets wait time between faults in seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosStartedEvent.MoveReplicaFaultEnabled">
            <summary>
            Gets indicates MoveReplica fault is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosStartedEvent.IncludedNodeTypeList">
            <summary>
            Gets list of included Node types.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosStartedEvent.IncludedApplicationList">
            <summary>
            Gets list of included Applications.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosStartedEvent.ClusterHealthPolicy">
            <summary>
            Gets health policy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosStartedEvent.ChaosContext">
            <summary>
            Gets chaos Context.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosStatus">
            <summary>
            Defines values for ChaosStatus.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ChaosStatus.Invalid">
            <summary>
            Indicates an invalid Chaos status. All Service Fabric enumerations have the invalid type. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ChaosStatus.Running">
            <summary>
            Indicates that Chaos is not stopped. The value is one.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ChaosStatus.Stopped">
            <summary>
            Indicates that Chaos is not scheduling further faults. The value is two.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosStoppedEvent">
            <summary>
            Chaos Stopped event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ChaosStoppedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ChaosStoppedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="reason">Describes reason.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosStoppedEvent.Reason">
            <summary>
            Gets reason.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ChaosTargetFilter">
            <summary>
            Defines all filters for targeted Chaos faults, for example, faulting only certain node types or faulting only
            certain applications.
            If ChaosTargetFilter is not used, Chaos faults all cluster entities. If ChaosTargetFilter is used, Chaos faults
            only the entities that meet the ChaosTargetFilter
            specification. NodeTypeInclusionList and ApplicationInclusionList allow a union semantics only. It is not possible
            to specify an intersection
            of NodeTypeInclusionList and ApplicationInclusionList. For example, it is not possible to specify "fault this
            application only when it is on that node type."
            Once an entity is included in either NodeTypeInclusionList or ApplicationInclusionList, that entity cannot be
            excluded using ChaosTargetFilter. Even if
            applicationX does not appear in ApplicationInclusionList, in some Chaos iteration applicationX can be faulted
            because it happens to be on a node of nodeTypeY that is included
            in NodeTypeInclusionList. If both NodeTypeInclusionList and ApplicationInclusionList are null or empty, an
            ArgumentException is thrown.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ChaosTargetFilter.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the ChaosTargetFilter class.
            </summary>
            <param name="nodeTypeInclusionList">A list of node types to include in Chaos faults.
            All types of faults (restart node, restart code package, remove replica, restart replica, move primary, and move
            secondary) are enabled for the nodes of these node types.
            If a node type (say NodeTypeX) does not appear in the NodeTypeInclusionList, then node level faults (like
            NodeRestart) will never be enabled for the nodes of
            NodeTypeX, but code package and replica faults can still be enabled for NodeTypeX if an application in the
            ApplicationInclusionList.
            happens to reside on a node of NodeTypeX.
            At most 100 node type names can be included in this list, to increase this number, a config upgrade is required for
            MaxNumberOfNodeTypesInChaosEntityFilter configuration.
            </param>
            <param name="applicationInclusionList">A list of application URIs to include in Chaos faults.
            All replicas belonging to services of these applications are amenable to replica faults (restart replica, remove
            replica, move primary, and move secondary) by Chaos.
            Chaos may restart a code package only if the code package hosts replicas of these applications only.
            If an application does not appear in this list, it can still be faulted in some Chaos iteration if the application
            ends up on a node of a node type that is included in NodeTypeInclusionList.
            However, if applicationX is tied to nodeTypeY through placement constraints and applicationX is absent from
            ApplicationInclusionList and nodeTypeY is absent from NodeTypeInclusionList, then applicationX will never be
            faulted.
            At most 1000 application names can be included in this list, to increase this number, a config upgrade is required
            for MaxNumberOfApplicationsInChaosEntityFilter configuration.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosTargetFilter.NodeTypeInclusionList">
            <summary>
            Gets a list of node types to include in Chaos faults.
            All types of faults (restart node, restart code package, remove replica, restart replica, move primary, and move
            secondary) are enabled for the nodes of these node types.
            If a node type (say NodeTypeX) does not appear in the NodeTypeInclusionList, then node level faults (like
            NodeRestart) will never be enabled for the nodes of
            NodeTypeX, but code package and replica faults can still be enabled for NodeTypeX if an application in the
            ApplicationInclusionList.
            happens to reside on a node of NodeTypeX.
            At most 100 node type names can be included in this list, to increase this number, a config upgrade is required for
            MaxNumberOfNodeTypesInChaosEntityFilter configuration.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ChaosTargetFilter.ApplicationInclusionList">
            <summary>
            Gets a list of application URIs to include in Chaos faults.
            All replicas belonging to services of these applications are amenable to replica faults (restart replica, remove
            replica, move primary, and move secondary) by Chaos.
            Chaos may restart a code package only if the code package hosts replicas of these applications only.
            If an application does not appear in this list, it can still be faulted in some Chaos iteration if the application
            ends up on a node of a node type that is included in NodeTypeInclusionList.
            However, if applicationX is tied to nodeTypeY through placement constraints and applicationX is absent from
            ApplicationInclusionList and nodeTypeY is absent from NodeTypeInclusionList, then applicationX will never be
            faulted.
            At most 1000 application names can be included in this list, to increase this number, a config upgrade is required
            for MaxNumberOfApplicationsInChaosEntityFilter configuration.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.CheckExistsPropertyBatchOperation">
            <summary>
            Represents a PropertyBatchOperation that compares the Boolean existence of a property with the Exists argument.
            The PropertyBatchOperation operation fails if the property's existence is not equal to the Exists argument.
            The CheckExistsPropertyBatchOperation is generally used as a precondition for the write operations in the batch.
            Note that if one PropertyBatchOperation in a PropertyBatch fails,
            the entire batch fails and cannot be committed in a transactional manner.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.CheckExistsPropertyBatchOperation.#ctor(System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the CheckExistsPropertyBatchOperation class.
            </summary>
            <param name="propertyName">The name of the Service Fabric property.</param>
            <param name="exists">Whether or not the property should exist for the operation to pass.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CheckExistsPropertyBatchOperation.Exists">
            <summary>
            Gets whether or not the property should exist for the operation to pass.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.CheckSequencePropertyBatchOperation">
            <summary>
            Compares the Sequence Number of a property with the SequenceNumber argument.
            A property's sequence number can be thought of as that property's version.
            Every time the property is modified, its sequence number is increased.
            The sequence number can be found in a property's metadata.
            The comparison fails if the sequence numbers are not equal.
            CheckSequencePropertyBatchOperation is generally used as a precondition for the write operations in the batch.
            Note that if one PropertyBatchOperation in a PropertyBatch fails,
            the entire batch fails and cannot be committed in a transactional manner.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.CheckSequencePropertyBatchOperation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the CheckSequencePropertyBatchOperation class.
            </summary>
            <param name="propertyName">The name of the Service Fabric property.</param>
            <param name="sequenceNumber">The expected sequence number.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CheckSequencePropertyBatchOperation.SequenceNumber">
            <summary>
            Gets the expected sequence number.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.CheckValuePropertyBatchOperation">
            <summary>
            Represents a PropertyBatchOperation that compares the value of the property with the expected value.
            The CheckValuePropertyBatchOperation is generally used as a precondition for the write operations in the batch.
            Note that if one PropertyBatchOperation in a PropertyBatch fails,
            the entire batch fails and cannot be committed in a transactional manner.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.CheckValuePropertyBatchOperation.#ctor(System.String,Microsoft.ServiceFabric.Common.PropertyValue)">
            <summary>
            Initializes a new instance of the CheckValuePropertyBatchOperation class.
            </summary>
            <param name="propertyName">The name of the Service Fabric property.</param>
            <param name="value">The expected property value.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CheckValuePropertyBatchOperation.Value">
            <summary>
            Gets the expected property value.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterConfiguration">
            <summary>
            Information about the standalone cluster configuration.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ClusterConfiguration class.
            </summary>
            <param name="clusterConfigurationValue">The contents of the cluster configuration file.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterConfiguration.ClusterConfigurationValue">
            <summary>
            Gets the contents of the cluster configuration file.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeDescription">
            <summary>
            Describes the parameters for a standalone cluster configuration upgrade.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeDescription.#ctor(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.ApplicationHealthPolicies)">
            <summary>
            Initializes a new instance of the ClusterConfigurationUpgradeDescription class.
            </summary>
            <param name="clusterConfig">The cluster configuration as a JSON string. For example, [this
            file](https://github.com/Azure-Samples/service-fabric-dotnet-standalone-cluster-configuration/blob/master/Samples/ClusterConfig.Unsecure.DevCluster.json)
            contains JSON describing the [nodes and other properties of the
            cluster](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-manifest).</param>
            <param name="healthCheckRetryTimeout">The length of time between attempts to perform health checks if the
            application or cluster is not healthy.</param>
            <param name="healthCheckWaitDurationInSeconds">The length of time to wait after completing an upgrade domain before
            starting the health checks process.</param>
            <param name="healthCheckStableDurationInSeconds">The length of time that the application or cluster must remain
            healthy before the upgrade proceeds to the next upgrade domain.</param>
            <param name="upgradeDomainTimeoutInSeconds">The timeout for the upgrade domain.</param>
            <param name="upgradeTimeoutInSeconds">The upgrade timeout.</param>
            <param name="maxPercentUnhealthyApplications">The maximum allowed percentage of unhealthy applications during the
            upgrade. Allowed values are integer values from zero to 100.</param>
            <param name="maxPercentUnhealthyNodes">The maximum allowed percentage of unhealthy nodes during the upgrade.
            Allowed values are integer values from zero to 100.</param>
            <param name="maxPercentDeltaUnhealthyNodes">The maximum allowed percentage of delta health degradation during the
            upgrade. Allowed values are integer values from zero to 100.</param>
            <param name="maxPercentUpgradeDomainDeltaUnhealthyNodes">The maximum allowed percentage of upgrade domain delta
            health degradation during the upgrade. Allowed values are integer values from zero to 100.</param>
            <param name="applicationHealthPolicies">Defines the application health policy map used to evaluate the health of an
            application or one of its children entities.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeDescription.ClusterConfig">
            <summary>
            Gets the cluster configuration as a JSON string. For example, [this
            file](https://github.com/Azure-Samples/service-fabric-dotnet-standalone-cluster-configuration/blob/master/Samples/ClusterConfig.Unsecure.DevCluster.json)
            contains JSON describing the [nodes and other properties of the
            cluster](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-manifest).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeDescription.HealthCheckRetryTimeout">
            <summary>
            Gets the length of time between attempts to perform health checks if the application or cluster is not healthy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeDescription.HealthCheckWaitDurationInSeconds">
            <summary>
            Gets the length of time to wait after completing an upgrade domain before starting the health checks process.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeDescription.HealthCheckStableDurationInSeconds">
            <summary>
            Gets the length of time that the application or cluster must remain healthy before the upgrade proceeds to the next
            upgrade domain.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeDescription.UpgradeDomainTimeoutInSeconds">
            <summary>
            Gets the timeout for the upgrade domain.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeDescription.UpgradeTimeoutInSeconds">
            <summary>
            Gets the upgrade timeout.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeDescription.MaxPercentUnhealthyApplications">
            <summary>
            Gets the maximum allowed percentage of unhealthy applications during the upgrade. Allowed values are integer values
            from zero to 100.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeDescription.MaxPercentUnhealthyNodes">
            <summary>
            Gets the maximum allowed percentage of unhealthy nodes during the upgrade. Allowed values are integer values from
            zero to 100.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeDescription.MaxPercentDeltaUnhealthyNodes">
            <summary>
            Gets the maximum allowed percentage of delta health degradation during the upgrade. Allowed values are integer
            values from zero to 100.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeDescription.MaxPercentUpgradeDomainDeltaUnhealthyNodes">
            <summary>
            Gets the maximum allowed percentage of upgrade domain delta health degradation during the upgrade. Allowed values
            are integer values from zero to 100.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeDescription.ApplicationHealthPolicies">
            <summary>
            Gets defines the application health policy map used to evaluate the health of an application or one of its children
            entities.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeStatusInfo">
            <summary>
            Information about a standalone cluster configuration upgrade status.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeStatusInfo.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.UpgradeState},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Initializes a new instance of the ClusterConfigurationUpgradeStatusInfo class.
            </summary>
            <param name="upgradeState">The state of the upgrade domain. Possible values include: 'Invalid',
            'RollingBackInProgress', 'RollingBackCompleted', 'RollingForwardPending', 'RollingForwardInProgress',
            'RollingForwardCompleted', 'Failed'</param>
            <param name="progressStatus">The cluster manifest version.</param>
            <param name="configVersion">The cluster configuration version.</param>
            <param name="details">The cluster upgrade status details.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeStatusInfo.UpgradeState">
            <summary>
            Gets the state of the upgrade domain. Possible values include: 'Invalid', 'RollingBackInProgress',
            'RollingBackCompleted', 'RollingForwardPending', 'RollingForwardInProgress', 'RollingForwardCompleted', 'Failed'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeStatusInfo.ProgressStatus">
            <summary>
            Gets the cluster manifest version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeStatusInfo.ConfigVersion">
            <summary>
            Gets the cluster configuration version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterConfigurationUpgradeStatusInfo.Details">
            <summary>
            Gets the cluster upgrade status details.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterEvent">
            <summary>
            Represents the base for all Cluster Events.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.Nullable{Microsoft.ServiceFabric.Common.FabricEventKind},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ClusterEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="kind">The kind of FabricEvent.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterHealth">
            <summary>
            Represents the health of the cluster.
            Contains the cluster aggregated health state, the cluster application and node health states as well as the health
            events and the unhealthy evaluations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterHealth.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvent},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper},Microsoft.ServiceFabric.Common.HealthStatistics,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.NodeHealthState},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ApplicationHealthState})">
            <summary>
            Initializes a new instance of the ClusterHealth class.
            </summary>
            <param name="aggregatedHealthState">The HealthState representing the aggregated health state of the entity computed
            by Health Manager.
            The health evaluation of the entity reflects all events reported on the entity and its children (if any).
            The aggregation is done by applying the desired health policy.
            . Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            
            The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
            </param>
            <param name="healthEvents">The list of health events reported on the entity.</param>
            <param name="unhealthyEvaluations">The unhealthy evaluations that show why the current aggregated health state was
            returned by Health Manager.</param>
            <param name="healthStatistics">Shows the health statistics for all children types of the queried entity.</param>
            <param name="nodeHealthStates">Cluster node health states as found in the health store.</param>
            <param name="applicationHealthStates">Cluster application health states as found in the health store.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealth.NodeHealthStates">
            <summary>
            Gets cluster node health states as found in the health store.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealth.ApplicationHealthStates">
            <summary>
            Gets cluster application health states as found in the health store.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterHealthChunk">
            <summary>
            Represents the health chunk of the cluster.
            Contains the cluster aggregated health state, and the cluster entities that respect the input filter.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterHealthChunk.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},Microsoft.ServiceFabric.Common.NodeHealthStateChunkList,Microsoft.ServiceFabric.Common.ApplicationHealthStateChunkList)">
            <summary>
            Initializes a new instance of the ClusterHealthChunk class.
            </summary>
            <param name="healthState">The HealthState representing the aggregated health state of the cluster computed by
            Health Manager.
            The health evaluation of the entity reflects all events reported on the entity and its children (if any).
            The aggregation is done by applying the desired cluster health policy and the application health policies.
            . Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            
            The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
            </param>
            <param name="nodeHealthStateChunks">The list of node health state chunks in the cluster that respect the filters in
            the cluster health chunk query description.
            </param>
            <param name="applicationHealthStateChunks">The list of application health state chunks in the cluster that respect
            the filters in the cluster health chunk query description.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthChunk.HealthState">
            <summary>
            Gets the HealthState representing the aggregated health state of the cluster computed by Health Manager.
            The health evaluation of the entity reflects all events reported on the entity and its children (if any).
            The aggregation is done by applying the desired cluster health policy and the application health policies.
            . Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            
            The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthChunk.NodeHealthStateChunks">
            <summary>
            Gets the list of node health state chunks in the cluster that respect the filters in the cluster health chunk query
            description.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthChunk.ApplicationHealthStateChunks">
            <summary>
            Gets the list of application health state chunks in the cluster that respect the filters in the cluster health
            chunk query description.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterHealthChunkQueryDescription">
            <summary>
            The cluster health chunk query description, which can specify the health policies to evaluate cluster health and
            very expressive filters to select which cluster entities to include in response.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterHealthChunkQueryDescription.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.NodeHealthStateFilter},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ApplicationHealthStateFilter},Microsoft.ServiceFabric.Common.ClusterHealthPolicy,Microsoft.ServiceFabric.Common.ApplicationHealthPolicies)">
            <summary>
            Initializes a new instance of the ClusterHealthChunkQueryDescription class.
            </summary>
            <param name="nodeFilters">Defines a list of filters that specify which nodes to be included in the returned cluster
            health chunk.
            If no filters are specified, no nodes are returned. All the nodes are used to evaluate the cluster's aggregated
            health state, regardless of the input filters.
            The cluster health chunk query may specify multiple node filters.
            For example, it can specify a filter to return all nodes with health state Error and another filter to always
            include a node identified by its NodeName.
            </param>
            <param name="applicationFilters">Defines a list of filters that specify which applications to be included in the
            returned cluster health chunk.
            If no filters are specified, no applications are returned. All the applications are used to evaluate the cluster's
            aggregated health state, regardless of the input filters.
            The cluster health chunk query may specify multiple application filters.
            For example, it can specify a filter to return all applications with health state Error and another filter to
            always include applications of a specified application type.
            </param>
            <param name="clusterHealthPolicy">Defines a health policy used to evaluate the health of the cluster or of a
            cluster node.
            </param>
            <param name="applicationHealthPolicies">Defines the application health policy map used to evaluate the health of an
            application or one of its children entities.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthChunkQueryDescription.NodeFilters">
            <summary>
            Gets defines a list of filters that specify which nodes to be included in the returned cluster health chunk.
            If no filters are specified, no nodes are returned. All the nodes are used to evaluate the cluster's aggregated
            health state, regardless of the input filters.
            The cluster health chunk query may specify multiple node filters.
            For example, it can specify a filter to return all nodes with health state Error and another filter to always
            include a node identified by its NodeName.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthChunkQueryDescription.ApplicationFilters">
            <summary>
            Gets defines a list of filters that specify which applications to be included in the returned cluster health chunk.
            If no filters are specified, no applications are returned. All the applications are used to evaluate the cluster's
            aggregated health state, regardless of the input filters.
            The cluster health chunk query may specify multiple application filters.
            For example, it can specify a filter to return all applications with health state Error and another filter to
            always include applications of a specified application type.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthChunkQueryDescription.ClusterHealthPolicy">
            <summary>
            Gets defines a health policy used to evaluate the health of the cluster or of a cluster node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthChunkQueryDescription.ApplicationHealthPolicies">
            <summary>
            Gets defines the application health policy map used to evaluate the health of an application or one of its children
            entities.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterHealthPolicies">
            <summary>
            Health policies to evaluate cluster health.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterHealthPolicies.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ApplicationHealthPolicyMapItem},Microsoft.ServiceFabric.Common.ClusterHealthPolicy)">
            <summary>
            Initializes a new instance of the ClusterHealthPolicies class.
            </summary>
            <param name="applicationHealthPolicyMap">Defines a map that contains specific application health policies for
            different applications.
            Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the
            application health.
            If an application is not specified in the map, the application health evaluation uses the ApplicationHealthPolicy
            found in its application manifest or the default application health policy (if no health policy is defined in the
            manifest).
            The map is empty by default.
            </param>
            <param name="clusterHealthPolicy">Defines a health policy used to evaluate the health of the cluster or of a
            cluster node.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthPolicies.ApplicationHealthPolicyMap">
            <summary>
            Gets defines a map that contains specific application health policies for different applications.
            Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the
            application health.
            If an application is not specified in the map, the application health evaluation uses the ApplicationHealthPolicy
            found in its application manifest or the default application health policy (if no health policy is defined in the
            manifest).
            The map is empty by default.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthPolicies.ClusterHealthPolicy">
            <summary>
            Gets defines a health policy used to evaluate the health of the cluster or of a cluster node.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterHealthPolicy">
            <summary>
            Defines a health policy used to evaluate the health of the cluster or of a cluster node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterHealthPolicy.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ApplicationTypeHealthPolicyMapItem},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.NodeTypeHealthPolicyMapItem})">
            <summary>
            Initializes a new instance of the ClusterHealthPolicy class.
            </summary>
            <param name="considerWarningAsError">Indicates whether warnings are treated with the same severity as
            errors.</param>
            <param name="maxPercentUnhealthyNodes">The maximum allowed percentage of unhealthy nodes before reporting an error.
            For example, to allow 10% of nodes to be unhealthy, this value would be 10.
            
            The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is
            considered in error.
            If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
            The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the
            cluster.
            The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
            
            In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to
            tolerate that.
            </param>
            <param name="maxPercentUnhealthyApplications">The maximum allowed percentage of unhealthy applications before
            reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
            
            The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster
            is considered in error.
            If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
            This is calculated by dividing the number of unhealthy applications over the total number of application instances
            in the cluster, excluding applications of application types that are included in the
            ApplicationTypeHealthPolicyMap.
            The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
            </param>
            <param name="applicationTypeHealthPolicyMap">Defines a map with max percentage unhealthy applications for specific
            application types.
            Each entry specifies as key the application type name and as value an integer that represents the
            MaxPercentUnhealthyApplications percentage used to evaluate the applications of the specified application type.
            
            The application type health policy map can be used during cluster health evaluation to describe special application
            types.
            The application types included in the map are evaluated against the percentage specified in the map, and not with
            the global MaxPercentUnhealthyApplications defined in the cluster health policy.
            The applications of application types specified in the map are not counted against the global pool of applications.
            For example, if some applications of a type are critical, the cluster administrator can add an entry to the map for
            that application type
            and assign it a value of 0% (that is, do not tolerate any failures).
            All other applications can be evaluated with MaxPercentUnhealthyApplications set to 20% to tolerate some failures
            out of the thousands of application instances.
            The application type health policy map is used only if the cluster manifest enables application type health
            evaluation using the configuration entry for HealthManager/EnableApplicationTypeHealthEvaluation.
            </param>
            <param name="nodeTypeHealthPolicyMap">Defines a map with max percentage unhealthy nodes for specific node types.
            Each entry specifies as key the node type name and as value an integer that represents the MaxPercentUnhealthyNodes
            percentage used to evaluate the nodes of the specified node type.
            
            The node type health policy map can be used during cluster health evaluation to describe special node types.
            They are evaluated against the percentages associated with their node type name in the map.
            Setting this has no impact on the global pool of nodes used for MaxPercentUnhealthyNodes.
            The node type health policy map is used only if the cluster manifest enables node type health evaluation using the
            configuration entry for HealthManager/EnableNodeTypeHealthEvaluation.
            
            For example, given a cluster with many nodes of different types, with important work hosted on node type
            "SpecialNodeType" that should not tolerate any nodes down.
            You can specify global MaxPercentUnhealthyNodes to 20% to tolerate some failures for all nodes, but for the node
            type "SpecialNodeType", set the MaxPercentUnhealthyNodes to 0 by
            setting the value in the key value pair in NodeTypeHealthPolicyMapItem. The key is the node type name.
            This way, as long as no nodes of type "SpecialNodeType" are in Error state,
            even if some of the many nodes in the global pool are in Error state, but below the global unhealthy percentage,
            the cluster would be evaluated to Warning.
            A Warning health state does not impact cluster upgrade or other monitoring triggered by Error health state.
            But even one node of type SpecialNodeType in Error would make cluster unhealthy (in Error rather than Warning/Ok),
            which triggers rollback or pauses the cluster upgrade, depending on the upgrade configuration.
            
            Conversely, setting the global MaxPercentUnhealthyNodes to 0, and setting SpecialNodeType's max percent unhealthy
            nodes to 100,
            with one node of type SpecialNodeType in Error state would still put the cluster in an Error state, since the
            global restriction is more strict in this case.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthPolicy.ConsiderWarningAsError">
            <summary>
            Gets indicates whether warnings are treated with the same severity as errors.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthPolicy.MaxPercentUnhealthyNodes">
            <summary>
            Gets the maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of
            nodes to be unhealthy, this value would be 10.
            
            The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is
            considered in error.
            If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
            The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the
            cluster.
            The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
            
            In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to
            tolerate that.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthPolicy.MaxPercentUnhealthyApplications">
            <summary>
            Gets the maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10%
            of applications to be unhealthy, this value would be 10.
            
            The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster
            is considered in error.
            If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
            This is calculated by dividing the number of unhealthy applications over the total number of application instances
            in the cluster, excluding applications of application types that are included in the
            ApplicationTypeHealthPolicyMap.
            The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthPolicy.ApplicationTypeHealthPolicyMap">
            <summary>
            Gets defines a map with max percentage unhealthy applications for specific application types.
            Each entry specifies as key the application type name and as value an integer that represents the
            MaxPercentUnhealthyApplications percentage used to evaluate the applications of the specified application type.
            
            The application type health policy map can be used during cluster health evaluation to describe special application
            types.
            The application types included in the map are evaluated against the percentage specified in the map, and not with
            the global MaxPercentUnhealthyApplications defined in the cluster health policy.
            The applications of application types specified in the map are not counted against the global pool of applications.
            For example, if some applications of a type are critical, the cluster administrator can add an entry to the map for
            that application type
            and assign it a value of 0% (that is, do not tolerate any failures).
            All other applications can be evaluated with MaxPercentUnhealthyApplications set to 20% to tolerate some failures
            out of the thousands of application instances.
            The application type health policy map is used only if the cluster manifest enables application type health
            evaluation using the configuration entry for HealthManager/EnableApplicationTypeHealthEvaluation.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthPolicy.NodeTypeHealthPolicyMap">
            <summary>
            Gets defines a map with max percentage unhealthy nodes for specific node types.
            Each entry specifies as key the node type name and as value an integer that represents the MaxPercentUnhealthyNodes
            percentage used to evaluate the nodes of the specified node type.
            
            The node type health policy map can be used during cluster health evaluation to describe special node types.
            They are evaluated against the percentages associated with their node type name in the map.
            Setting this has no impact on the global pool of nodes used for MaxPercentUnhealthyNodes.
            The node type health policy map is used only if the cluster manifest enables node type health evaluation using the
            configuration entry for HealthManager/EnableNodeTypeHealthEvaluation.
            
            For example, given a cluster with many nodes of different types, with important work hosted on node type
            "SpecialNodeType" that should not tolerate any nodes down.
            You can specify global MaxPercentUnhealthyNodes to 20% to tolerate some failures for all nodes, but for the node
            type "SpecialNodeType", set the MaxPercentUnhealthyNodes to 0 by
            setting the value in the key value pair in NodeTypeHealthPolicyMapItem. The key is the node type name.
            This way, as long as no nodes of type "SpecialNodeType" are in Error state,
            even if some of the many nodes in the global pool are in Error state, but below the global unhealthy percentage,
            the cluster would be evaluated to Warning.
            A Warning health state does not impact cluster upgrade or other monitoring triggered by Error health state.
            But even one node of type SpecialNodeType in Error would make cluster unhealthy (in Error rather than Warning/Ok),
            which triggers rollback or pauses the cluster upgrade, depending on the upgrade configuration.
            
            Conversely, setting the global MaxPercentUnhealthyNodes to 0, and setting SpecialNodeType's max percent unhealthy
            nodes to 100,
            with one node of type SpecialNodeType in Error state would still put the cluster in an Error state, since the
            global restriction is more strict in this case.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterHealthReportExpiredEvent">
            <summary>
            Cluster Health Report Expired event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterHealthReportExpiredEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ClusterHealthReportExpiredEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="sourceId">Id of report source.</param>
            <param name="property">Describes the property.</param>
            <param name="healthState">Describes the property health state.</param>
            <param name="timeToLiveMs">Time to live in milli-seconds.</param>
            <param name="sequenceNumber">Sequence number of report.</param>
            <param name="description">Description of report.</param>
            <param name="removeWhenExpired">Indicates the removal when it expires.</param>
            <param name="sourceUtcTimestamp">Source time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthReportExpiredEvent.SourceId">
            <summary>
            Gets id of report source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthReportExpiredEvent.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthReportExpiredEvent.HealthState">
            <summary>
            Gets the property health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthReportExpiredEvent.TimeToLiveMs">
            <summary>
            Gets time to live in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthReportExpiredEvent.SequenceNumber">
            <summary>
            Gets sequence number of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthReportExpiredEvent.Description">
            <summary>
            Gets description of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthReportExpiredEvent.RemoveWhenExpired">
            <summary>
            Gets indicates the removal when it expires.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterHealthReportExpiredEvent.SourceUtcTimestamp">
            <summary>
            Gets source time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterLoadInfo">
            <summary>
            Information about load in a Service Fabric cluster. It holds a summary of all metrics and their load in a cluster.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterLoadInfo.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.LoadMetricInformation})">
            <summary>
            Initializes a new instance of the ClusterLoadInfo class.
            </summary>
            <param name="lastBalancingStartTimeUtc">The starting time of last resource balancing run.</param>
            <param name="lastBalancingEndTimeUtc">The end time of last resource balancing run.</param>
            <param name="loadMetricInformation">List that contains metrics and their load information in this cluster.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterLoadInfo.LastBalancingStartTimeUtc">
            <summary>
            Gets the starting time of last resource balancing run.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterLoadInfo.LastBalancingEndTimeUtc">
            <summary>
            Gets the end time of last resource balancing run.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterLoadInfo.LoadMetricInformation">
            <summary>
            Gets list that contains metrics and their load information in this cluster.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterManifest">
            <summary>
            Information about the cluster manifest.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterManifest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ClusterManifest class.
            </summary>
            <param name="manifest">The contents of the cluster manifest file.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterManifest.Manifest">
            <summary>
            Gets the contents of the cluster manifest file.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterNewHealthReportEvent">
            <summary>
            Cluster Health Report Created event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterNewHealthReportEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ClusterNewHealthReportEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="sourceId">Id of report source.</param>
            <param name="property">Describes the property.</param>
            <param name="healthState">Describes the property health state.</param>
            <param name="timeToLiveMs">Time to live in milli-seconds.</param>
            <param name="sequenceNumber">Sequence number of report.</param>
            <param name="description">Description of report.</param>
            <param name="removeWhenExpired">Indicates the removal when it expires.</param>
            <param name="sourceUtcTimestamp">Source time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterNewHealthReportEvent.SourceId">
            <summary>
            Gets id of report source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterNewHealthReportEvent.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterNewHealthReportEvent.HealthState">
            <summary>
            Gets the property health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterNewHealthReportEvent.TimeToLiveMs">
            <summary>
            Gets time to live in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterNewHealthReportEvent.SequenceNumber">
            <summary>
            Gets sequence number of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterNewHealthReportEvent.Description">
            <summary>
            Gets description of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterNewHealthReportEvent.RemoveWhenExpired">
            <summary>
            Gets indicates the removal when it expires.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterNewHealthReportEvent.SourceUtcTimestamp">
            <summary>
            Gets source time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterUpgradeCompletedEvent">
            <summary>
            Cluster Upgrade Completed event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterUpgradeCompletedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.Nullable{System.Double},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ClusterUpgradeCompletedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="targetClusterVersion">Target Cluster version.</param>
            <param name="overallUpgradeElapsedTimeInMs">Overall duration of upgrade in milli-seconds.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeCompletedEvent.TargetClusterVersion">
            <summary>
            Gets target Cluster version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeCompletedEvent.OverallUpgradeElapsedTimeInMs">
            <summary>
            Gets overall duration of upgrade in milli-seconds.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterUpgradeDescriptionObject">
            <summary>
            Represents a ServiceFabric cluster upgrade
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterUpgradeDescriptionObject.#ctor(System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.UpgradeKind},System.Nullable{Microsoft.ServiceFabric.Common.UpgradeMode},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{Microsoft.ServiceFabric.Common.UpgradeSortOrder},System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.MonitoringPolicyDescription,Microsoft.ServiceFabric.Common.ClusterHealthPolicy,Microsoft.ServiceFabric.Common.ClusterUpgradeHealthPolicyObject,Microsoft.ServiceFabric.Common.ApplicationHealthPolicyMapObject)">
            <summary>
            Initializes a new instance of the ClusterUpgradeDescriptionObject class.
            </summary>
            <param name="configVersion">The cluster configuration version (specified in the cluster manifest).</param>
            <param name="codeVersion">The ServiceFabric code version of the cluster.</param>
            <param name="upgradeKind">The kind of upgrade out of the following possible values. Possible values include:
            'Invalid', 'Rolling'</param>
            <param name="rollingUpgradeMode">The mode used to monitor health during a rolling upgrade. The values are
            UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto',
            'UnmonitoredManual', 'Monitored'</param>
            <param name="upgradeReplicaSetCheckTimeoutInSeconds">The maximum amount of time to block processing of an upgrade
            domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of
            the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each
            upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).</param>
            <param name="forceRestart">If true, then processes are forcefully restarted during upgrade even when the code
            version has not changed (the upgrade only changes configuration or data).</param>
            <param name="sortOrder">Defines the order in which an upgrade proceeds through the cluster. Possible values
            include: 'Invalid', 'Default', 'Numeric', 'Lexicographical', 'ReverseNumeric', 'ReverseLexicographical'</param>
            <param name="enableDeltaHealthEvaluation">When true, enables delta health evaluation rather than absolute health
            evaluation after completion of each upgrade domain.</param>
            <param name="monitoringPolicy">Describes the parameters for monitoring an upgrade in Monitored mode.</param>
            <param name="clusterHealthPolicy">Defines a health policy used to evaluate the health of the cluster or of a
            cluster node.
            </param>
            <param name="clusterUpgradeHealthPolicy">Defines a health policy used to evaluate the health of the cluster during
            a cluster upgrade.</param>
            <param name="applicationHealthPolicyMap">Represents the map of application health policies for a ServiceFabric
            cluster upgrade</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeDescriptionObject.ConfigVersion">
            <summary>
            Gets the cluster configuration version (specified in the cluster manifest).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeDescriptionObject.CodeVersion">
            <summary>
            Gets the ServiceFabric code version of the cluster.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeDescriptionObject.UpgradeKind">
            <summary>
            Gets the kind of upgrade out of the following possible values. Possible values include: 'Invalid', 'Rolling'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeDescriptionObject.RollingUpgradeMode">
            <summary>
            Gets the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual,
            and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeDescriptionObject.UpgradeReplicaSetCheckTimeoutInSeconds">
            <summary>
            Gets the maximum amount of time to block processing of an upgrade domain and prevent loss of availability when
            there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of
            availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and
            42949672925 inclusive. (unsigned 32-bit integer).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeDescriptionObject.ForceRestart">
            <summary>
            Gets if true, then processes are forcefully restarted during upgrade even when the code version has not changed
            (the upgrade only changes configuration or data).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeDescriptionObject.SortOrder">
            <summary>
            Gets defines the order in which an upgrade proceeds through the cluster. Possible values include: 'Invalid',
            'Default', 'Numeric', 'Lexicographical', 'ReverseNumeric', 'ReverseLexicographical'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeDescriptionObject.EnableDeltaHealthEvaluation">
            <summary>
            Gets when true, enables delta health evaluation rather than absolute health evaluation after completion of each
            upgrade domain.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeDescriptionObject.MonitoringPolicy">
            <summary>
            Gets the parameters for monitoring an upgrade in Monitored mode.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeDescriptionObject.ClusterHealthPolicy">
            <summary>
            Gets defines a health policy used to evaluate the health of the cluster or of a cluster node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeDescriptionObject.ClusterUpgradeHealthPolicy">
            <summary>
            Gets defines a health policy used to evaluate the health of the cluster during a cluster upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeDescriptionObject.ApplicationHealthPolicyMap">
            <summary>
            Gets represents the map of application health policies for a ServiceFabric cluster upgrade
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterUpgradeDomainCompletedEvent">
            <summary>
            Cluster Upgrade Domain Completed event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterUpgradeDomainCompletedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Double},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ClusterUpgradeDomainCompletedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="targetClusterVersion">Target Cluster version.</param>
            <param name="upgradeState">State of upgrade.</param>
            <param name="upgradeDomains">Upgrade domains.</param>
            <param name="upgradeDomainElapsedTimeInMs">Duration of domain upgrade in milli-seconds.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeDomainCompletedEvent.TargetClusterVersion">
            <summary>
            Gets target Cluster version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeDomainCompletedEvent.UpgradeState">
            <summary>
            Gets state of upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeDomainCompletedEvent.UpgradeDomains">
            <summary>
            Gets upgrade domains.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeDomainCompletedEvent.UpgradeDomainElapsedTimeInMs">
            <summary>
            Gets duration of domain upgrade in milli-seconds.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterUpgradeHealthPolicyObject">
            <summary>
            Defines a health policy used to evaluate the health of the cluster during a cluster upgrade.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterUpgradeHealthPolicyObject.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the ClusterUpgradeHealthPolicyObject class.
            </summary>
            <param name="maxPercentDeltaUnhealthyNodes">The maximum allowed percentage of nodes health degradation allowed
            during cluster upgrades. The delta is measured between the state of the nodes at the beginning of upgrade and the
            state of the nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade
            completion to make sure the global state of the cluster is within tolerated limits. The default value is
            10%.</param>
            <param name="maxPercentUpgradeDomainDeltaUnhealthyNodes">The maximum allowed percentage of upgrade domain nodes
            health degradation allowed during cluster upgrades. The delta is measured between the state of the upgrade domain
            nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
            The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure
            the state of the upgrade domains is within tolerated limits. The default value is 15%.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeHealthPolicyObject.MaxPercentDeltaUnhealthyNodes">
            <summary>
            Gets the maximum allowed percentage of nodes health degradation allowed during cluster upgrades. The delta is
            measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the
            health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global
            state of the cluster is within tolerated limits. The default value is 10%.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeHealthPolicyObject.MaxPercentUpgradeDomainDeltaUnhealthyNodes">
            <summary>
            Gets the maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades. The
            delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the
            upgrade domain nodes at the time of the health evaluation. The check is performed after every upgrade domain
            upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within
            tolerated limits. The default value is 15%.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterUpgradeProgressObject">
            <summary>
            Information about a cluster upgrade.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterUpgradeProgressObject.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.UpgradeDomainInfo},System.Nullable{Microsoft.ServiceFabric.Common.UpgradeState},System.String,System.Nullable{Microsoft.ServiceFabric.Common.UpgradeMode},Microsoft.ServiceFabric.Common.ClusterUpgradeDescriptionObject,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper},Microsoft.ServiceFabric.Common.CurrentUpgradeDomainProgressInfo,System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.FailureReason},Microsoft.ServiceFabric.Common.FailedUpgradeDomainProgressObject)">
            <summary>
            Initializes a new instance of the ClusterUpgradeProgressObject class.
            </summary>
            <param name="codeVersion">The ServiceFabric code version of the cluster.</param>
            <param name="configVersion">The cluster configuration version (specified in the cluster manifest).</param>
            <param name="upgradeDomains">List of upgrade domains and their statuses.</param>
            <param name="upgradeState">The state of the upgrade domain. Possible values include: 'Invalid',
            'RollingBackInProgress', 'RollingBackCompleted', 'RollingForwardPending', 'RollingForwardInProgress',
            'RollingForwardCompleted', 'Failed'</param>
            <param name="nextUpgradeDomain">The name of the next upgrade domain to be processed.</param>
            <param name="rollingUpgradeMode">The mode used to monitor health during a rolling upgrade. The values are
            UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto',
            'UnmonitoredManual', 'Monitored'</param>
            <param name="upgradeDescription">Represents a ServiceFabric cluster upgrade</param>
            <param name="upgradeDurationInMilliseconds">The estimated elapsed time spent processing the current overall
            upgrade.</param>
            <param name="upgradeDomainDurationInMilliseconds">The estimated elapsed time spent processing the current upgrade
            domain.</param>
            <param name="unhealthyEvaluations">List of health evaluations that resulted in the current aggregated health
            state.</param>
            <param name="currentUpgradeDomainProgress">Information about the current in-progress upgrade domain.</param>
            <param name="startTimestampUtc">The start time of the upgrade in UTC.</param>
            <param name="failureTimestampUtc">The failure time of the upgrade in UTC.</param>
            <param name="failureReason">The cause of an upgrade failure that resulted in FailureAction being executed. Possible
            values include: 'None', 'Interrupted', 'HealthCheck', 'UpgradeDomainTimeout', 'OverallUpgradeTimeout'</param>
            <param name="upgradeDomainProgressAtFailure">The detailed upgrade progress for nodes in the current upgrade domain
            at the point of failure.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeProgressObject.CodeVersion">
            <summary>
            Gets the ServiceFabric code version of the cluster.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeProgressObject.ConfigVersion">
            <summary>
            Gets the cluster configuration version (specified in the cluster manifest).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeProgressObject.UpgradeDomains">
            <summary>
            Gets list of upgrade domains and their statuses.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeProgressObject.UpgradeState">
            <summary>
            Gets the state of the upgrade domain. Possible values include: 'Invalid', 'RollingBackInProgress',
            'RollingBackCompleted', 'RollingForwardPending', 'RollingForwardInProgress', 'RollingForwardCompleted', 'Failed'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeProgressObject.NextUpgradeDomain">
            <summary>
            Gets the name of the next upgrade domain to be processed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeProgressObject.RollingUpgradeMode">
            <summary>
            Gets the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual,
            and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeProgressObject.UpgradeDescription">
            <summary>
            Gets represents a ServiceFabric cluster upgrade
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeProgressObject.UpgradeDurationInMilliseconds">
            <summary>
            Gets the estimated elapsed time spent processing the current overall upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeProgressObject.UpgradeDomainDurationInMilliseconds">
            <summary>
            Gets the estimated elapsed time spent processing the current upgrade domain.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeProgressObject.UnhealthyEvaluations">
            <summary>
            Gets list of health evaluations that resulted in the current aggregated health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeProgressObject.CurrentUpgradeDomainProgress">
            <summary>
            Gets information about the current in-progress upgrade domain.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeProgressObject.StartTimestampUtc">
            <summary>
            Gets the start time of the upgrade in UTC.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeProgressObject.FailureTimestampUtc">
            <summary>
            Gets the failure time of the upgrade in UTC.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeProgressObject.FailureReason">
            <summary>
            Gets the cause of an upgrade failure that resulted in FailureAction being executed. Possible values include:
            'None', 'Interrupted', 'HealthCheck', 'UpgradeDomainTimeout', 'OverallUpgradeTimeout'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeProgressObject.UpgradeDomainProgressAtFailure">
            <summary>
            Gets the detailed upgrade progress for nodes in the current upgrade domain at the point of failure.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterUpgradeRollbackCompletedEvent">
            <summary>
            Cluster Upgrade Rollback Completed event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterUpgradeRollbackCompletedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Double},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ClusterUpgradeRollbackCompletedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="targetClusterVersion">Target Cluster version.</param>
            <param name="failureReason">Describes failure.</param>
            <param name="overallUpgradeElapsedTimeInMs">Overall duration of upgrade in milli-seconds.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeRollbackCompletedEvent.TargetClusterVersion">
            <summary>
            Gets target Cluster version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeRollbackCompletedEvent.FailureReason">
            <summary>
            Gets failure.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeRollbackCompletedEvent.OverallUpgradeElapsedTimeInMs">
            <summary>
            Gets overall duration of upgrade in milli-seconds.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterUpgradeRollbackStartedEvent">
            <summary>
            Cluster Upgrade Rollback Started event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterUpgradeRollbackStartedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Double},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ClusterUpgradeRollbackStartedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="targetClusterVersion">Target Cluster version.</param>
            <param name="failureReason">Describes failure.</param>
            <param name="overallUpgradeElapsedTimeInMs">Overall duration of upgrade in milli-seconds.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeRollbackStartedEvent.TargetClusterVersion">
            <summary>
            Gets target Cluster version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeRollbackStartedEvent.FailureReason">
            <summary>
            Gets failure.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeRollbackStartedEvent.OverallUpgradeElapsedTimeInMs">
            <summary>
            Gets overall duration of upgrade in milli-seconds.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterUpgradeStartedEvent">
            <summary>
            Cluster Upgrade Started event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterUpgradeStartedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ClusterUpgradeStartedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="currentClusterVersion">Current Cluster version.</param>
            <param name="targetClusterVersion">Target Cluster version.</param>
            <param name="upgradeType">Type of upgrade.</param>
            <param name="rollingUpgradeMode">Mode of upgrade.</param>
            <param name="failureAction">Action if failed.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeStartedEvent.CurrentClusterVersion">
            <summary>
            Gets current Cluster version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeStartedEvent.TargetClusterVersion">
            <summary>
            Gets target Cluster version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeStartedEvent.UpgradeType">
            <summary>
            Gets type of upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeStartedEvent.RollingUpgradeMode">
            <summary>
            Gets mode of upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterUpgradeStartedEvent.FailureAction">
            <summary>
            Gets action if failed.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ClusterVersion">
            <summary>
            The cluster version.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ClusterVersion.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ClusterVersion class.
            </summary>
            <param name="version">The Service Fabric cluster runtime version.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ClusterVersion.Version">
            <summary>
            Gets the Service Fabric cluster runtime version.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.CodePackageEntryPoint">
            <summary>
            Information about setup or main entry point of a code package deployed on a Service Fabric node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.CodePackageEntryPoint.#ctor(System.String,System.String,System.String,Microsoft.ServiceFabric.Common.CodePackageEntryPointStatistics,System.Nullable{Microsoft.ServiceFabric.Common.EntryPointStatus},System.Nullable{System.DateTime},System.String)">
            <summary>
            Initializes a new instance of the CodePackageEntryPoint class.
            </summary>
            <param name="entryPointLocation">The location of entry point executable on the node.</param>
            <param name="processId">The process ID of the entry point.</param>
            <param name="runAsUserName">The user name under which entry point executable is run on the node.</param>
            <param name="codePackageEntryPointStatistics">Statistics about setup or main entry point  of a code package
            deployed on a Service Fabric node.</param>
            <param name="status">Specifies the status of the code package entry point deployed on a Service Fabric node.
            Possible values include: 'Invalid', 'Pending', 'Starting', 'Started', 'Stopping', 'Stopped'</param>
            <param name="nextActivationTime">The time (in UTC) when the entry point executable will be run next.</param>
            <param name="instanceId">The instance ID for current running entry point. For a code package setup entry point (if
            specified) runs first and after it finishes main entry point is started. Each time entry point executable is run,
            its instance id will change.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CodePackageEntryPoint.EntryPointLocation">
            <summary>
            Gets the location of entry point executable on the node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CodePackageEntryPoint.ProcessId">
            <summary>
            Gets the process ID of the entry point.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CodePackageEntryPoint.RunAsUserName">
            <summary>
            Gets the user name under which entry point executable is run on the node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CodePackageEntryPoint.CodePackageEntryPointStatistics">
            <summary>
            Gets statistics about setup or main entry point  of a code package deployed on a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CodePackageEntryPoint.Status">
            <summary>
            Gets specifies the status of the code package entry point deployed on a Service Fabric node. Possible values
            include: 'Invalid', 'Pending', 'Starting', 'Started', 'Stopping', 'Stopped'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CodePackageEntryPoint.NextActivationTime">
            <summary>
            Gets the time (in UTC) when the entry point executable will be run next.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CodePackageEntryPoint.InstanceId">
            <summary>
            Gets the instance ID for current running entry point. For a code package setup entry point (if specified) runs
            first and after it finishes main entry point is started. Each time entry point executable is run, its instance id
            will change.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.CodePackageEntryPointStatistics">
            <summary>
            Statistics about setup or main entry point  of a code package deployed on a Service Fabric node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.CodePackageEntryPointStatistics.#ctor(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the CodePackageEntryPointStatistics class.
            </summary>
            <param name="lastExitCode">The last exit code of the entry point.</param>
            <param name="lastActivationTime">The last time (in UTC) when Service Fabric attempted to run the entry
            point.</param>
            <param name="lastExitTime">The last time (in UTC) when the entry point finished running.</param>
            <param name="lastSuccessfulActivationTime">The last time (in UTC) when the entry point ran successfully.</param>
            <param name="lastSuccessfulExitTime">The last time (in UTC) when the entry point finished running
            gracefully.</param>
            <param name="activationCount">Number of times the entry point has run.</param>
            <param name="activationFailureCount">Number of times the entry point failed to run.</param>
            <param name="continuousActivationFailureCount">Number of times the entry point continuously failed to run.</param>
            <param name="exitCount">Number of times the entry point finished running.</param>
            <param name="exitFailureCount">Number of times the entry point failed to exit gracefully.</param>
            <param name="continuousExitFailureCount">Number of times the entry point continuously failed to exit
            gracefully.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CodePackageEntryPointStatistics.LastExitCode">
            <summary>
            Gets the last exit code of the entry point.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CodePackageEntryPointStatistics.LastActivationTime">
            <summary>
            Gets the last time (in UTC) when Service Fabric attempted to run the entry point.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CodePackageEntryPointStatistics.LastExitTime">
            <summary>
            Gets the last time (in UTC) when the entry point finished running.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CodePackageEntryPointStatistics.LastSuccessfulActivationTime">
            <summary>
            Gets the last time (in UTC) when the entry point ran successfully.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CodePackageEntryPointStatistics.LastSuccessfulExitTime">
            <summary>
            Gets the last time (in UTC) when the entry point finished running gracefully.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CodePackageEntryPointStatistics.ActivationCount">
            <summary>
            Gets number of times the entry point has run.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CodePackageEntryPointStatistics.ActivationFailureCount">
            <summary>
            Gets number of times the entry point failed to run.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CodePackageEntryPointStatistics.ContinuousActivationFailureCount">
            <summary>
            Gets number of times the entry point continuously failed to run.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CodePackageEntryPointStatistics.ExitCount">
            <summary>
            Gets number of times the entry point finished running.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CodePackageEntryPointStatistics.ExitFailureCount">
            <summary>
            Gets number of times the entry point failed to exit gracefully.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CodePackageEntryPointStatistics.ContinuousExitFailureCount">
            <summary>
            Gets number of times the entry point continuously failed to exit gracefully.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ComposeDeploymentStatus">
            <summary>
            Defines values for ComposeDeploymentStatus.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ComposeDeploymentStatus.Invalid">
            <summary>
            Indicates that the compose deployment status is invalid. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ComposeDeploymentStatus.Provisioning">
            <summary>
            Indicates that the compose deployment is being provisioned in background. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ComposeDeploymentStatus.Creating">
            <summary>
            Indicates that the compose deployment is being created in background. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ComposeDeploymentStatus.Ready">
            <summary>
            Indicates that the compose deployment has been successfully created or upgraded. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ComposeDeploymentStatus.Unprovisioning">
            <summary>
            Indicates that the compose deployment is being unprovisioned in background. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ComposeDeploymentStatus.Deleting">
            <summary>
            Indicates that the compose deployment is being deleted in background. The value is 5.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ComposeDeploymentStatus.Failed">
            <summary>
            Indicates that the compose deployment was terminated due to persistent failures. The value is 6.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ComposeDeploymentStatus.Upgrading">
            <summary>
            Indicates that the compose deployment is being upgraded in the background. The value is 7.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ComposeDeploymentStatusInfo">
            <summary>
            Information about a Service Fabric compose deployment.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ComposeDeploymentStatusInfo.#ctor(System.String,Microsoft.ServiceFabric.Common.ApplicationName,System.Nullable{Microsoft.ServiceFabric.Common.ComposeDeploymentStatus},System.String)">
            <summary>
            Initializes a new instance of the ComposeDeploymentStatusInfo class.
            </summary>
            <param name="name">The name of the deployment.</param>
            <param name="applicationName">The name of the application, including the 'fabric:' URI scheme.</param>
            <param name="status">The status of the compose deployment. Possible values include: 'Invalid', 'Provisioning',
            'Creating', 'Ready', 'Unprovisioning', 'Deleting', 'Failed', 'Upgrading'</param>
            <param name="statusDetails">The status details of compose deployment including failure message.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentStatusInfo.Name">
            <summary>
            Gets the name of the deployment.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentStatusInfo.ApplicationName">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentStatusInfo.Status">
            <summary>
            Gets the status of the compose deployment. Possible values include: 'Invalid', 'Provisioning', 'Creating', 'Ready',
            'Unprovisioning', 'Deleting', 'Failed', 'Upgrading'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentStatusInfo.StatusDetails">
            <summary>
            Gets the status details of compose deployment including failure message.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeDescription">
            <summary>
            Describes the parameters for a compose deployment upgrade.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeDescription.#ctor(System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.UpgradeKind},Microsoft.ServiceFabric.Common.RegistryCredential,System.Nullable{Microsoft.ServiceFabric.Common.UpgradeMode},System.Nullable{System.Int64},System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.MonitoringPolicyDescription,Microsoft.ServiceFabric.Common.ApplicationHealthPolicy)">
            <summary>
            Initializes a new instance of the ComposeDeploymentUpgradeDescription class.
            </summary>
            <param name="deploymentName">The name of the deployment.</param>
            <param name="composeFileContent">The content of the compose file that describes the deployment to create.</param>
            <param name="upgradeKind">The kind of upgrade out of the following possible values. Possible values include:
            'Invalid', 'Rolling'</param>
            <param name="registryCredential">Credential information to connect to container registry.</param>
            <param name="rollingUpgradeMode">The mode used to monitor health during a rolling upgrade. The values are
            UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto',
            'UnmonitoredManual', 'Monitored'</param>
            <param name="upgradeReplicaSetCheckTimeoutInSeconds">The maximum amount of time to block processing of an upgrade
            domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of
            the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each
            upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).</param>
            <param name="forceRestart">If true, then processes are forcefully restarted during upgrade even when the code
            version has not changed (the upgrade only changes configuration or data).</param>
            <param name="monitoringPolicy">Describes the parameters for monitoring an upgrade in Monitored mode.</param>
            <param name="applicationHealthPolicy">Defines a health policy used to evaluate the health of an application or one
            of its children entities.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeDescription.DeploymentName">
            <summary>
            Gets the name of the deployment.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeDescription.ComposeFileContent">
            <summary>
            Gets the content of the compose file that describes the deployment to create.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeDescription.RegistryCredential">
            <summary>
            Gets credential information to connect to container registry.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeDescription.UpgradeKind">
            <summary>
            Gets the kind of upgrade out of the following possible values. Possible values include: 'Invalid', 'Rolling'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeDescription.RollingUpgradeMode">
            <summary>
            Gets the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual,
            and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeDescription.UpgradeReplicaSetCheckTimeoutInSeconds">
            <summary>
            Gets the maximum amount of time to block processing of an upgrade domain and prevent loss of availability when
            there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of
            availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and
            42949672925 inclusive. (unsigned 32-bit integer).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeDescription.ForceRestart">
            <summary>
            Gets if true, then processes are forcefully restarted during upgrade even when the code version has not changed
            (the upgrade only changes configuration or data).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeDescription.MonitoringPolicy">
            <summary>
            Gets the parameters for monitoring an upgrade in Monitored mode.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeDescription.ApplicationHealthPolicy">
            <summary>
            Gets defines a health policy used to evaluate the health of an application or one of its children entities.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo">
            <summary>
            Describes the parameters for a compose deployment upgrade.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.#ctor(System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeState},System.String,System.Nullable{Microsoft.ServiceFabric.Common.UpgradeKind},System.Nullable{Microsoft.ServiceFabric.Common.UpgradeMode},System.Nullable{System.Boolean},System.Nullable{System.Int64},Microsoft.ServiceFabric.Common.MonitoringPolicyDescription,Microsoft.ServiceFabric.Common.ApplicationHealthPolicy,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper},Microsoft.ServiceFabric.Common.CurrentUpgradeDomainProgressInfo,System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.FailureReason},Microsoft.ServiceFabric.Common.FailureUpgradeDomainProgressInfo,System.String)">
            <summary>
            Initializes a new instance of the ComposeDeploymentUpgradeProgressInfo class.
            </summary>
            <param name="deploymentName">The name of the target deployment.</param>
            <param name="applicationName">The name of the target application, including the 'fabric:' URI scheme.</param>
            <param name="upgradeState">The state of the compose deployment upgrade.
            . Possible values include: 'Invalid', 'ProvisioningTarget', 'RollingForwardInProgress', 'RollingForwardPending',
            'UnprovisioningCurrent', 'RollingForwardCompleted', 'RollingBackInProgress', 'UnprovisioningTarget',
            'RollingBackCompleted', 'Failed'</param>
            <param name="upgradeStatusDetails">Additional detailed information about the status of the pending upgrade.</param>
            <param name="upgradeKind">The kind of upgrade out of the following possible values. Possible values include:
            'Invalid', 'Rolling'</param>
            <param name="rollingUpgradeMode">The mode used to monitor health during a rolling upgrade. The values are
            UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto',
            'UnmonitoredManual', 'Monitored'</param>
            <param name="forceRestart">If true, then processes are forcefully restarted during upgrade even when the code
            version has not changed (the upgrade only changes configuration or data).</param>
            <param name="upgradeReplicaSetCheckTimeoutInSeconds">The maximum amount of time to block processing of an upgrade
            domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of
            the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each
            upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).</param>
            <param name="monitoringPolicy">Describes the parameters for monitoring an upgrade in Monitored mode.</param>
            <param name="applicationHealthPolicy">Defines a health policy used to evaluate the health of an application or one
            of its children entities.
            </param>
            <param name="targetApplicationTypeVersion">The target application type version (found in the application manifest)
            for the application upgrade.</param>
            <param name="upgradeDuration">The estimated amount of time that the overall upgrade elapsed. It is first
            interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number
            representing the total number of milliseconds.</param>
            <param name="currentUpgradeDomainDuration">The estimated amount of time spent processing current Upgrade Domain. It
            is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a
            number representing the total number of milliseconds.</param>
            <param name="applicationUnhealthyEvaluations">List of health evaluations that resulted in the current aggregated
            health state.</param>
            <param name="currentUpgradeDomainProgress">Information about the current in-progress upgrade domain.</param>
            <param name="startTimestampUtc">The estimated UTC datetime when the upgrade started.</param>
            <param name="failureTimestampUtc">The estimated UTC datetime when the upgrade failed and FailureAction was
            executed.</param>
            <param name="failureReason">The cause of an upgrade failure that resulted in FailureAction being executed. Possible
            values include: 'None', 'Interrupted', 'HealthCheck', 'UpgradeDomainTimeout', 'OverallUpgradeTimeout'</param>
            <param name="upgradeDomainProgressAtFailure">Information about the upgrade domain progress at the time of upgrade
            failure.</param>
            <param name="applicationUpgradeStatusDetails">Additional details of application upgrade including failure
            message.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.DeploymentName">
            <summary>
            Gets the name of the target deployment.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.ApplicationName">
            <summary>
            Gets the name of the target application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.UpgradeState">
            <summary>
            Gets the state of the compose deployment upgrade.
            . Possible values include: 'Invalid', 'ProvisioningTarget', 'RollingForwardInProgress', 'RollingForwardPending',
            'UnprovisioningCurrent', 'RollingForwardCompleted', 'RollingBackInProgress', 'UnprovisioningTarget',
            'RollingBackCompleted', 'Failed'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.UpgradeStatusDetails">
            <summary>
            Gets additional detailed information about the status of the pending upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.UpgradeKind">
            <summary>
            Gets the kind of upgrade out of the following possible values. Possible values include: 'Invalid', 'Rolling'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.RollingUpgradeMode">
            <summary>
            Gets the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual,
            and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.ForceRestart">
            <summary>
            Gets if true, then processes are forcefully restarted during upgrade even when the code version has not changed
            (the upgrade only changes configuration or data).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.UpgradeReplicaSetCheckTimeoutInSeconds">
            <summary>
            Gets the maximum amount of time to block processing of an upgrade domain and prevent loss of availability when
            there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of
            availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and
            42949672925 inclusive. (unsigned 32-bit integer).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.MonitoringPolicy">
            <summary>
            Gets the parameters for monitoring an upgrade in Monitored mode.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.ApplicationHealthPolicy">
            <summary>
            Gets defines a health policy used to evaluate the health of an application or one of its children entities.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.TargetApplicationTypeVersion">
            <summary>
            Gets the target application type version (found in the application manifest) for the application upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.UpgradeDuration">
            <summary>
            Gets the estimated amount of time that the overall upgrade elapsed. It is first interpreted as a string
            representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number
            of milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.CurrentUpgradeDomainDuration">
            <summary>
            Gets the estimated amount of time spent processing current Upgrade Domain. It is first interpreted as a string
            representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number
            of milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.ApplicationUnhealthyEvaluations">
            <summary>
            Gets list of health evaluations that resulted in the current aggregated health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.CurrentUpgradeDomainProgress">
            <summary>
            Gets information about the current in-progress upgrade domain.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.StartTimestampUtc">
            <summary>
            Gets the estimated UTC datetime when the upgrade started.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.FailureTimestampUtc">
            <summary>
            Gets the estimated UTC datetime when the upgrade failed and FailureAction was executed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.FailureReason">
            <summary>
            Gets the cause of an upgrade failure that resulted in FailureAction being executed. Possible values include:
            'None', 'Interrupted', 'HealthCheck', 'UpgradeDomainTimeout', 'OverallUpgradeTimeout'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.UpgradeDomainProgressAtFailure">
            <summary>
            Gets information about the upgrade domain progress at the time of upgrade failure.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeProgressInfo.ApplicationUpgradeStatusDetails">
            <summary>
            Gets additional details of application upgrade including failure message.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeState">
            <summary>
            Defines values for ComposeDeploymentUpgradeState.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeState.Invalid">
            <summary>
            Indicates the upgrade state is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeState.ProvisioningTarget">
            <summary>
            The upgrade is in the progress of provisioning target application type version. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeState.RollingForwardInProgress">
            <summary>
            The upgrade is rolling forward to the target version but is not complete yet. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeState.RollingForwardPending">
            <summary>
            The current upgrade domain has finished upgrading. The overall upgrade is waiting for an explicit move next request
            in UnmonitoredManual mode or performing health checks in Monitored mode. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeState.UnprovisioningCurrent">
            <summary>
            The upgrade is in the progress of unprovisioning current application type version and rolling forward to the target
            version is completed. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeState.RollingForwardCompleted">
            <summary>
            The upgrade has finished rolling forward. The value is 5.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeState.RollingBackInProgress">
            <summary>
            The upgrade is rolling back to the previous version but is not complete yet. The value is 6.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeState.UnprovisioningTarget">
            <summary>
            The upgrade is in the progress of unprovisioning target application type version and rolling back to the current
            version is completed. The value is 7.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeState.RollingBackCompleted">
            <summary>
            The upgrade has finished rolling back. The value is 8.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ComposeDeploymentUpgradeState.Failed">
            <summary>
            The upgrade has failed and is unable to execute FailureAction. The value is 9.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ConfigParameterOverride">
            <summary>
            Information about a configuration parameter override.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ConfigParameterOverride.#ctor(System.String,System.String,System.String,System.Nullable{System.TimeSpan},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ConfigParameterOverride class.
            </summary>
            <param name="sectionName">Name of the section for the parameter override.</param>
            <param name="parameterName">Name of the parameter that has been overridden.</param>
            <param name="parameterValue">Value of the overridden parameter.</param>
            <param name="timeout">The duration until config override is considered as valid.</param>
            <param name="persistAcrossUpgrade">A value that indicates whether config override will be removed on upgrade or
            will still be considered as valid.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ConfigParameterOverride.SectionName">
            <summary>
            Gets name of the section for the parameter override.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ConfigParameterOverride.ParameterName">
            <summary>
            Gets name of the parameter that has been overridden.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ConfigParameterOverride.ParameterValue">
            <summary>
            Gets value of the overridden parameter.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ConfigParameterOverride.Timeout">
            <summary>
            Gets the duration until config override is considered as valid.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ConfigParameterOverride.PersistAcrossUpgrade">
            <summary>
            Gets a value that indicates whether config override will be removed on upgrade or will still be considered as
            valid.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ContainerApiRequestBody">
            <summary>
            parameters for making container API call.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ContainerApiRequestBody.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ContainerApiRequestBody class.
            </summary>
            <param name="uriPath">URI path of container REST API</param>
            <param name="httpVerb">HTTP verb of container REST API, defaults to "GET"</param>
            <param name="contentType">Content type of container REST API request, defaults to "application/json"</param>
            <param name="body">HTTP request body of container REST API</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerApiRequestBody.HttpVerb">
            <summary>
            Gets HTTP verb of container REST API, defaults to "GET"
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerApiRequestBody.UriPath">
            <summary>
            Gets URI path of container REST API
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerApiRequestBody.ContentType">
            <summary>
            Gets content type of container REST API request, defaults to "application/json"
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerApiRequestBody.Body">
            <summary>
            Gets HTTP request body of container REST API
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ContainerApiResponse">
            <summary>
            Response body that wraps container API result.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ContainerApiResponse.#ctor(Microsoft.ServiceFabric.Common.ContainerApiResult)">
            <summary>
            Initializes a new instance of the ContainerApiResponse class.
            </summary>
            <param name="containerApiResult">Container API result.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerApiResponse.ContainerApiResult">
            <summary>
            Gets container API result.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ContainerApiResult">
            <summary>
            Container API result.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ContainerApiResult.#ctor(System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ContainerApiResult class.
            </summary>
            <param name="status">HTTP status code returned by the target container API</param>
            <param name="contentType">HTTP content type</param>
            <param name="contentEncoding">HTTP content encoding</param>
            <param name="body">container API result body</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerApiResult.Status">
            <summary>
            Gets HTTP status code returned by the target container API
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerApiResult.ContentType">
            <summary>
            Gets HTTP content type
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerApiResult.ContentEncoding">
            <summary>
            Gets HTTP content encoding
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerApiResult.Body">
            <summary>
            Gets container API result body
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties">
            <summary>
            Describes a container and its runtime properties.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties.#ctor(System.String,System.String,Microsoft.ServiceFabric.Common.ResourceRequirements,Microsoft.ServiceFabric.Common.ImageRegistryCredential,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.EnvironmentVariable},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.Setting},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ContainerLabel},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.EndpointProperties},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.VolumeReference},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ApplicationScopedVolume},Microsoft.ServiceFabric.Common.DiagnosticsRef,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ReliableCollectionsRef},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.Probe},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.Probe})">
            <summary>
            Initializes a new instance of the ContainerCodePackageProperties class.
            </summary>
            <param name="name">The name of the code package.</param>
            <param name="image">The Container image to use.</param>
            <param name="resources">The resources required by this container.</param>
            <param name="imageRegistryCredential">Image registry credential.</param>
            <param name="entryPoint">Override for the default entry point in the container.</param>
            <param name="commands">Command array to execute within the container in exec form.</param>
            <param name="environmentVariables">The environment variables to set in this container</param>
            <param name="settings">The settings to set in this container. The setting file path can be fetched from environment
            variable "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The path for Linux container is
            "/var/secrets".</param>
            <param name="labels">The labels to set in this container.</param>
            <param name="endpoints">The endpoints exposed by this container.</param>
            <param name="volumeRefs">Volumes to be attached to the container. The lifetime of these volumes is independent of
            the application's lifetime.</param>
            <param name="volumes">Volumes to be attached to the container. The lifetime of these volumes is scoped to the
            application's lifetime.</param>
            <param name="diagnostics">Reference to sinks in DiagnosticsDescription.</param>
            <param name="reliableCollectionsRefs">A list of ReliableCollection resources used by this particular code package.
            Please refer to ReliableCollectionsRef for more details.</param>
            <param name="livenessProbe">An array of liveness probes for a code package. It determines when to restart a code
            package.</param>
            <param name="readinessProbe">An array of readiness probes for a code package. It determines when to unpublish an
            endpoint.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties.Name">
            <summary>
            Gets the name of the code package.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties.Image">
            <summary>
            Gets the Container image to use.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties.ImageRegistryCredential">
            <summary>
            Gets image registry credential.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties.EntryPoint">
            <summary>
            Gets override for the default entry point in the container.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties.Commands">
            <summary>
            Gets command array to execute within the container in exec form.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties.EnvironmentVariables">
            <summary>
            Gets the environment variables to set in this container
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties.Settings">
            <summary>
            Gets the settings to set in this container. The setting file path can be fetched from environment variable
            "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The path for Linux container is
            "/var/secrets".
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties.Labels">
            <summary>
            Gets the labels to set in this container.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties.Endpoints">
            <summary>
            Gets the endpoints exposed by this container.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties.Resources">
            <summary>
            Gets the resources required by this container.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties.VolumeRefs">
            <summary>
            Gets volumes to be attached to the container. The lifetime of these volumes is independent of the application's
            lifetime.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties.Volumes">
            <summary>
            Gets volumes to be attached to the container. The lifetime of these volumes is scoped to the application's
            lifetime.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties.Diagnostics">
            <summary>
            Gets reference to sinks in DiagnosticsDescription.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties.ReliableCollectionsRefs">
            <summary>
            Gets a list of ReliableCollection resources used by this particular code package. Please refer to
            ReliableCollectionsRef for more details.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties.InstanceView">
            <summary>
            Gets runtime information of a container instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties.LivenessProbe">
            <summary>
            Gets an array of liveness probes for a code package. It determines when to restart a code package.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerCodePackageProperties.ReadinessProbe">
            <summary>
            Gets an array of readiness probes for a code package. It determines when to unpublish an endpoint.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ContainerEvent">
            <summary>
            A container event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ContainerEvent.#ctor(System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ContainerEvent class.
            </summary>
            <param name="name">The name of the container event.</param>
            <param name="count">The count of the event.</param>
            <param name="firstTimestamp">Date/time of the first event.</param>
            <param name="lastTimestamp">Date/time of the last event.</param>
            <param name="message">The event message</param>
            <param name="type">The event type.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerEvent.Name">
            <summary>
            Gets the name of the container event.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerEvent.Count">
            <summary>
            Gets the count of the event.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerEvent.FirstTimestamp">
            <summary>
            Gets date/time of the first event.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerEvent.LastTimestamp">
            <summary>
            Gets date/time of the last event.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerEvent.Message">
            <summary>
            Gets the event message
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerEvent.Type">
            <summary>
            Gets the event type.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ContainerInstanceEvent">
            <summary>
            Represents the base for all Container Events.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ContainerInstanceEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ContainerInstanceEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ContainerInstanceView">
            <summary>
            Runtime information of a container instance.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ContainerInstanceView.#ctor(System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.ContainerState,Microsoft.ServiceFabric.Common.ContainerState,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ContainerEvent})">
            <summary>
            Initializes a new instance of the ContainerInstanceView class.
            </summary>
            <param name="restartCount">The number of times the container has been restarted.</param>
            <param name="currentState">Current container instance state.</param>
            <param name="previousState">Previous container instance state.</param>
            <param name="events">The events of this container instance.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerInstanceView.RestartCount">
            <summary>
            Gets the number of times the container has been restarted.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerInstanceView.CurrentState">
            <summary>
            Gets current container instance state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerInstanceView.PreviousState">
            <summary>
            Gets previous container instance state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerInstanceView.Events">
            <summary>
            Gets the events of this container instance.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ContainerLabel">
            <summary>
            Describes a container label.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ContainerLabel.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ContainerLabel class.
            </summary>
            <param name="name">The name of the container label.</param>
            <param name="value">The value of the container label.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerLabel.Name">
            <summary>
            Gets the name of the container label.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerLabel.Value">
            <summary>
            Gets the value of the container label.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ContainerLogs">
            <summary>
            Container logs.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ContainerLogs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ContainerLogs class.
            </summary>
            <param name="content">Container logs.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerLogs.Content">
            <summary>
            Gets container logs.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ContainerState">
            <summary>
            The container state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ContainerState.#ctor(System.String,System.Nullable{System.DateTime},System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
            Initializes a new instance of the ContainerState class.
            </summary>
            <param name="state">The state of this container</param>
            <param name="startTime">Date/time when the container state started.</param>
            <param name="exitCode">The container exit code.</param>
            <param name="finishTime">Date/time when the container state finished.</param>
            <param name="detailStatus">Human-readable status of this state.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerState.State">
            <summary>
            Gets the state of this container
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerState.StartTime">
            <summary>
            Gets date/time when the container state started.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerState.ExitCode">
            <summary>
            Gets the container exit code.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerState.FinishTime">
            <summary>
            Gets date/time when the container state finished.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ContainerState.DetailStatus">
            <summary>
            Gets human-readable status of this state.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.CreateComposeDeploymentDescription">
            <summary>
            Defines description for creating a Service Fabric compose deployment.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.CreateComposeDeploymentDescription.#ctor(System.String,System.String,Microsoft.ServiceFabric.Common.RegistryCredential)">
            <summary>
            Initializes a new instance of the CreateComposeDeploymentDescription class.
            </summary>
            <param name="deploymentName">The name of the deployment.</param>
            <param name="composeFileContent">The content of the compose file that describes the deployment to create.</param>
            <param name="registryCredential">Credential information to connect to container registry.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CreateComposeDeploymentDescription.DeploymentName">
            <summary>
            Gets the name of the deployment.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CreateComposeDeploymentDescription.ComposeFileContent">
            <summary>
            Gets the content of the compose file that describes the deployment to create.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CreateComposeDeploymentDescription.RegistryCredential">
            <summary>
            Gets credential information to connect to container registry.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.CreateFabricDump">
            <summary>
            Defines values for CreateFabricDump.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.CreateFabricDump.False">
            <summary>
            False.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.CreateFabricDump.True">
            <summary>
            True.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.CurrentUpgradeDomainProgressInfo">
            <summary>
            Information about the current in-progress upgrade domain.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.CurrentUpgradeDomainProgressInfo.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.NodeUpgradeProgressInfo})">
            <summary>
            Initializes a new instance of the CurrentUpgradeDomainProgressInfo class.
            </summary>
            <param name="domainName">The name of the upgrade domain</param>
            <param name="nodeUpgradeProgressList">List of upgrading nodes and their statuses</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CurrentUpgradeDomainProgressInfo.DomainName">
            <summary>
            Gets the name of the upgrade domain
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.CurrentUpgradeDomainProgressInfo.NodeUpgradeProgressList">
            <summary>
            Gets list of upgrading nodes and their statuses
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DataLossMode">
            <summary>
            Defines values for DataLossMode.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DataLossMode.Invalid">
            <summary>
            Reserved.  Do not pass into API.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DataLossMode.PartialDataLoss">
            <summary>
            PartialDataLoss option will cause a quorum of replicas to go down, triggering an OnDataLoss event in the system for
            the given partition.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DataLossMode.FullDataLoss">
            <summary>
            FullDataLoss option will drop all the replicas which means that all the data will be lost.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeactivationIntent">
            <summary>
            Defines values for DeactivationIntent.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DeactivationIntent.Pause">
            <summary>
            Indicates that the node should be paused. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DeactivationIntent.Restart">
            <summary>
            Indicates that the intent is for the node to be restarted after a short period of time. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DeactivationIntent.RemoveData">
            <summary>
            Indicates the intent is for the node to remove data. The value is 3.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeactivationIntentDescription">
            <summary>
            Describes the intent or reason for deactivating the node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeactivationIntentDescription.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.DeactivationIntent})">
            <summary>
            Initializes a new instance of the DeactivationIntentDescription class.
            </summary>
            <param name="deactivationIntent">Describes the intent or reason for deactivating the node. The possible values are
            following.
            . Possible values include: 'Pause', 'Restart', 'RemoveData'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeactivationIntentDescription.DeactivationIntent">
            <summary>
            Gets the intent or reason for deactivating the node. The possible values are following.
            . Possible values include: 'Pause', 'Restart', 'RemoveData'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DefaultExecutionPolicy">
            <summary>
            The default execution policy. Always restart the service if an exit occurs.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DefaultExecutionPolicy.#ctor">
            <summary>
            Initializes a new instance of the DefaultExecutionPolicy class.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeletePropertyBatchOperation">
            <summary>
            Represents a PropertyBatchOperation that deletes a specified property if it exists.
            Note that if one PropertyBatchOperation in a PropertyBatch fails,
            the entire batch fails and cannot be committed in a transactional manner.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeletePropertyBatchOperation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DeletePropertyBatchOperation class.
            </summary>
            <param name="propertyName">The name of the Service Fabric property.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeltaNodesCheckHealthEvaluation">
            <summary>
            Represents health evaluation for delta nodes, containing health evaluations for each unhealthy node that impacted
            current aggregated health state.
            Can be returned during cluster upgrade when the aggregated health state of the cluster is Warning or Error.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeltaNodesCheckHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the DeltaNodesCheckHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="baselineErrorCount">Number of nodes with aggregated heath state Error in the health store at the
            beginning of the cluster upgrade.</param>
            <param name="baselineTotalCount">Total number of nodes in the health store at the beginning of the cluster
            upgrade.</param>
            <param name="maxPercentDeltaUnhealthyNodes">Maximum allowed percentage of delta unhealthy nodes from the
            ClusterUpgradeHealthPolicy.</param>
            <param name="totalCount">Total number of nodes in the health store.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the aggregated health state.
            Includes all the unhealthy NodeHealthEvaluation that impacted the aggregated health.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeltaNodesCheckHealthEvaluation.BaselineErrorCount">
            <summary>
            Gets number of nodes with aggregated heath state Error in the health store at the beginning of the cluster upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeltaNodesCheckHealthEvaluation.BaselineTotalCount">
            <summary>
            Gets total number of nodes in the health store at the beginning of the cluster upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeltaNodesCheckHealthEvaluation.MaxPercentDeltaUnhealthyNodes">
            <summary>
            Gets maximum allowed percentage of delta unhealthy nodes from the ClusterUpgradeHealthPolicy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeltaNodesCheckHealthEvaluation.TotalCount">
            <summary>
            Gets total number of nodes in the health store.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeltaNodesCheckHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the aggregated health state.
            Includes all the unhealthy NodeHealthEvaluation that impacted the aggregated health.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedApplicationHealth">
            <summary>
            Information about the health of an application deployed on a Service Fabric node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedApplicationHealth.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvent},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper},Microsoft.ServiceFabric.Common.HealthStatistics,Microsoft.ServiceFabric.Common.ApplicationName,Microsoft.ServiceFabric.Common.NodeName,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.DeployedServicePackageHealthState})">
            <summary>
            Initializes a new instance of the DeployedApplicationHealth class.
            </summary>
            <param name="aggregatedHealthState">The HealthState representing the aggregated health state of the entity computed
            by Health Manager.
            The health evaluation of the entity reflects all events reported on the entity and its children (if any).
            The aggregation is done by applying the desired health policy.
            . Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            
            The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
            </param>
            <param name="healthEvents">The list of health events reported on the entity.</param>
            <param name="unhealthyEvaluations">The unhealthy evaluations that show why the current aggregated health state was
            returned by Health Manager.</param>
            <param name="healthStatistics">Shows the health statistics for all children types of the queried entity.</param>
            <param name="name">Name of the application deployed on the node whose health information is described by this
            object.</param>
            <param name="nodeName">Name of the node where this application is deployed.</param>
            <param name="deployedServicePackageHealthStates">Deployed service package health states for the current deployed
            application as found in the health store.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealth.Name">
            <summary>
            Gets name of the application deployed on the node whose health information is described by this object.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealth.NodeName">
            <summary>
            Gets name of the node where this application is deployed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealth.DeployedServicePackageHealthStates">
            <summary>
            Gets deployed service package health states for the current deployed application as found in the health store.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedApplicationHealthEvaluation">
            <summary>
            Represents health evaluation for a deployed application, containing information about the data and the algorithm
            used by the health store to evaluate health.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedApplicationHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.ApplicationName,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the DeployedApplicationHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="nodeName">Name of the node where the application is deployed to.</param>
            <param name="applicationName">The name of the application, including the 'fabric:' URI scheme.</param>
            <param name="unhealthyEvaluations">List of  unhealthy evaluations that led to the current aggregated health state
            of the deployed application.
            The types of the unhealthy evaluations can be DeployedServicePackagesHealthEvaluation or EventHealthEvaluation.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthEvaluation.NodeName">
            <summary>
            Gets name of the node where the application is deployed to.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthEvaluation.ApplicationName">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of  unhealthy evaluations that led to the current aggregated health state of the deployed application.
            The types of the unhealthy evaluations can be DeployedServicePackagesHealthEvaluation or EventHealthEvaluation.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedApplicationHealthReportExpiredEvent">
            <summary>
            Deployed Application Health Report Expired event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedApplicationHealthReportExpiredEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int64},Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the DeployedApplicationHealthReportExpiredEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="applicationId">The identity of the application. This is an encoded representation of the application
            name. This is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="applicationInstanceId">Id of Application instance.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="sourceId">Id of report source.</param>
            <param name="property">Describes the property.</param>
            <param name="healthState">Describes the property health state.</param>
            <param name="timeToLiveMs">Time to live in milli-seconds.</param>
            <param name="sequenceNumber">Sequence number of report.</param>
            <param name="description">Description of report.</param>
            <param name="removeWhenExpired">Indicates the removal when it expires.</param>
            <param name="sourceUtcTimestamp">Source time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthReportExpiredEvent.ApplicationInstanceId">
            <summary>
            Gets id of Application instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthReportExpiredEvent.NodeName">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthReportExpiredEvent.SourceId">
            <summary>
            Gets id of report source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthReportExpiredEvent.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthReportExpiredEvent.HealthState">
            <summary>
            Gets the property health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthReportExpiredEvent.TimeToLiveMs">
            <summary>
            Gets time to live in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthReportExpiredEvent.SequenceNumber">
            <summary>
            Gets sequence number of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthReportExpiredEvent.Description">
            <summary>
            Gets description of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthReportExpiredEvent.RemoveWhenExpired">
            <summary>
            Gets indicates the removal when it expires.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthReportExpiredEvent.SourceUtcTimestamp">
            <summary>
            Gets source time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedApplicationHealthState">
            <summary>
            Represents the health state of a deployed application, which contains the entity identifier and the aggregated
            health state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedApplicationHealthState.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.ApplicationName)">
            <summary>
            Initializes a new instance of the DeployedApplicationHealthState class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="nodeName">Name of the node on which the service package is deployed.</param>
            <param name="applicationName">The name of the application, including the 'fabric:' URI scheme.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthState.NodeName">
            <summary>
            Gets name of the node on which the service package is deployed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthState.ApplicationName">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedApplicationHealthStateChunk">
            <summary>
            Represents the health state chunk of a deployed application, which contains the node where the application is
            deployed, the aggregated health state and any deployed service packages that respect the chunk query description
            filters.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedApplicationHealthStateChunk.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,Microsoft.ServiceFabric.Common.DeployedServicePackageHealthStateChunkList)">
            <summary>
            Initializes a new instance of the DeployedApplicationHealthStateChunk class.
            </summary>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="nodeName">The name of node where the application is deployed.</param>
            <param name="deployedServicePackageHealthStateChunks">The list of deployed service package health state chunks
            belonging to the deployed application that respect the filters in the cluster health chunk query description.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthStateChunk.NodeName">
            <summary>
            Gets the name of node where the application is deployed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthStateChunk.DeployedServicePackageHealthStateChunks">
            <summary>
            Gets the list of deployed service package health state chunks belonging to the deployed application that respect
            the filters in the cluster health chunk query description.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedApplicationHealthStateChunkList">
            <summary>
            The list of deployed application health state chunks that respect the input filters in the chunk query. Returned by
            get cluster health state chunks query.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedApplicationHealthStateChunkList.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.DeployedApplicationHealthStateChunk})">
            <summary>
            Initializes a new instance of the DeployedApplicationHealthStateChunkList class.
            </summary>
            <param name="items">The list of deployed application health state chunks that respect the input filters in the
            chunk query.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthStateChunkList.Items">
            <summary>
            Gets the list of deployed application health state chunks that respect the input filters in the chunk query.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedApplicationHealthStateFilter">
            <summary>
            Defines matching criteria to determine whether a deployed application should be included as a child of an
            application in the cluster health chunk.
            The deployed applications are only returned if the parent application matches a filter specified in the cluster
            health chunk query description.
            One filter can match zero, one or multiple deployed applications, depending on its properties.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedApplicationHealthStateFilter.#ctor(System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.DeployedServicePackageHealthStateFilter})">
            <summary>
            Initializes a new instance of the DeployedApplicationHealthStateFilter class.
            </summary>
            <param name="nodeNameFilter">The name of the node where the application is deployed in order to match the filter.
            If specified, the filter is applied only to the application deployed on the specified node.
            If the application is not deployed on the node with the specified name, no deployed application is returned in the
            cluster health chunk based on this filter.
            Otherwise, the deployed application is included in the cluster health chunk if it respects the other filter
            properties.
            If not specified, all deployed applications that match the parent filters (if any) are taken into consideration and
            matched against the other filter members, like health state filter.
            </param>
            <param name="healthStateFilter">The filter for the health state of the deployed applications. It allows selecting
            deployed applications if they match the desired health states.
            The possible values are integer value of one of the following health states. Only deployed applications that match
            the filter are returned. All deployed applications are used to evaluate the cluster aggregated health state.
            If not specified, default value is None, unless the node name is specified. If the filter has default value and
            node name is specified, the matching deployed application is returned.
            The state values are flag-based enumeration, so the value could be a combination of these values obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6, it matches deployed applications with HealthState value of OK (2) and
            Warning (4).
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name="deployedServicePackageFilters">Defines a list of filters that specify which deployed service packages
            to be included in the returned cluster health chunk as children of the parent deployed application. The deployed
            service packages are returned only if the parent deployed application matches a filter.
            If the list is empty, no deployed service packages are returned. All the deployed service packages are used to
            evaluate the parent deployed application aggregated health state, regardless of the input filters.
            The deployed application filter may specify multiple deployed service package filters.
            For example, it can specify a filter to return all deployed service packages with health state Error and another
            filter to always include a deployed service package on a node.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthStateFilter.NodeNameFilter">
            <summary>
            Gets the name of the node where the application is deployed in order to match the filter.
            If specified, the filter is applied only to the application deployed on the specified node.
            If the application is not deployed on the node with the specified name, no deployed application is returned in the
            cluster health chunk based on this filter.
            Otherwise, the deployed application is included in the cluster health chunk if it respects the other filter
            properties.
            If not specified, all deployed applications that match the parent filters (if any) are taken into consideration and
            matched against the other filter members, like health state filter.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthStateFilter.HealthStateFilter">
            <summary>
            Gets the filter for the health state of the deployed applications. It allows selecting deployed applications if
            they match the desired health states.
            The possible values are integer value of one of the following health states. Only deployed applications that match
            the filter are returned. All deployed applications are used to evaluate the cluster aggregated health state.
            If not specified, default value is None, unless the node name is specified. If the filter has default value and
            node name is specified, the matching deployed application is returned.
            The state values are flag-based enumeration, so the value could be a combination of these values obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6, it matches deployed applications with HealthState value of OK (2) and
            Warning (4).
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationHealthStateFilter.DeployedServicePackageFilters">
            <summary>
            Gets defines a list of filters that specify which deployed service packages to be included in the returned cluster
            health chunk as children of the parent deployed application. The deployed service packages are returned only if the
            parent deployed application matches a filter.
            If the list is empty, no deployed service packages are returned. All the deployed service packages are used to
            evaluate the parent deployed application aggregated health state, regardless of the input filters.
            The deployed application filter may specify multiple deployed service package filters.
            For example, it can specify a filter to return all deployed service packages with health state Error and another
            filter to always include a deployed service package on a node.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedApplicationInfo">
            <summary>
            Information about application deployed on the node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedApplicationInfo.#ctor(System.String,Microsoft.ServiceFabric.Common.ApplicationName,System.String,System.Nullable{Microsoft.ServiceFabric.Common.DeployedApplicationStatus},System.String,System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.HealthState})">
            <summary>
            Initializes a new instance of the DeployedApplicationInfo class.
            </summary>
            <param name="id">The identity of the application. This is an encoded representation of the application name. This
            is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="name">The name of the application, including the 'fabric:' URI scheme.</param>
            <param name="typeName">The application type name as defined in the application manifest.</param>
            <param name="status">The status of the application deployed on the node. Following are the possible values.
            . Possible values include: 'Invalid', 'Downloading', 'Activating', 'Active', 'Upgrading', 'Deactivating'</param>
            <param name="workDirectory">The work directory of the application on the node. The work directory can be used to
            store application data.</param>
            <param name="logDirectory">The log directory of the application on the node. The log directory can be used to store
            application logs.</param>
            <param name="tempDirectory">The temp directory of the application on the node. The code packages belonging to the
            application are forked with this directory set as their temporary directory.</param>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationInfo.Id">
            <summary>
            Gets the identity of the application. This is an encoded representation of the application name. This is used in
            the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationInfo.Name">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationInfo.TypeName">
            <summary>
            Gets the application type name as defined in the application manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationInfo.Status">
            <summary>
            Gets the status of the application deployed on the node. Following are the possible values.
            . Possible values include: 'Invalid', 'Downloading', 'Activating', 'Active', 'Upgrading', 'Deactivating'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationInfo.WorkDirectory">
            <summary>
            Gets the work directory of the application on the node. The work directory can be used to store application data.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationInfo.LogDirectory">
            <summary>
            Gets the log directory of the application on the node. The log directory can be used to store application logs.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationInfo.TempDirectory">
            <summary>
            Gets the temp directory of the application on the node. The code packages belonging to the application are forked
            with this directory set as their temporary directory.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationInfo.HealthState">
            <summary>
            Gets the health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica
            etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedApplicationNewHealthReportEvent">
            <summary>
            Deployed Application Health Report Created event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedApplicationNewHealthReportEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int64},Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the DeployedApplicationNewHealthReportEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="applicationId">The identity of the application. This is an encoded representation of the application
            name. This is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="applicationInstanceId">Id of Application instance.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="sourceId">Id of report source.</param>
            <param name="property">Describes the property.</param>
            <param name="healthState">Describes the property health state.</param>
            <param name="timeToLiveMs">Time to live in milli-seconds.</param>
            <param name="sequenceNumber">Sequence number of report.</param>
            <param name="description">Description of report.</param>
            <param name="removeWhenExpired">Indicates the removal when it expires.</param>
            <param name="sourceUtcTimestamp">Source time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationNewHealthReportEvent.ApplicationInstanceId">
            <summary>
            Gets id of Application instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationNewHealthReportEvent.NodeName">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationNewHealthReportEvent.SourceId">
            <summary>
            Gets id of report source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationNewHealthReportEvent.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationNewHealthReportEvent.HealthState">
            <summary>
            Gets the property health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationNewHealthReportEvent.TimeToLiveMs">
            <summary>
            Gets time to live in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationNewHealthReportEvent.SequenceNumber">
            <summary>
            Gets sequence number of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationNewHealthReportEvent.Description">
            <summary>
            Gets description of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationNewHealthReportEvent.RemoveWhenExpired">
            <summary>
            Gets indicates the removal when it expires.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationNewHealthReportEvent.SourceUtcTimestamp">
            <summary>
            Gets source time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedApplicationsHealthEvaluation">
            <summary>
            Represents health evaluation for deployed applications, containing health evaluations for each unhealthy deployed
            application that impacted current aggregated health state.
            Can be returned when evaluating application health and the aggregated health state is either Error or Warning.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedApplicationsHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the DeployedApplicationsHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="maxPercentUnhealthyDeployedApplications">Maximum allowed percentage of unhealthy deployed applications
            from the ApplicationHealthPolicy.</param>
            <param name="totalCount">Total number of deployed applications of the application in the health store.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the aggregated health state. Includes
            all the unhealthy DeployedApplicationHealthEvaluation that impacted the aggregated health.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationsHealthEvaluation.MaxPercentUnhealthyDeployedApplications">
            <summary>
            Gets maximum allowed percentage of unhealthy deployed applications from the ApplicationHealthPolicy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationsHealthEvaluation.TotalCount">
            <summary>
            Gets total number of deployed applications of the application in the health store.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedApplicationsHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy
            DeployedApplicationHealthEvaluation that impacted the aggregated health.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedApplicationStatus">
            <summary>
            Defines values for DeployedApplicationStatus.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DeployedApplicationStatus.Invalid">
            <summary>
            Indicates that deployment status is not valid. All Service Fabric enumerations have the invalid type. The value is
            zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DeployedApplicationStatus.Downloading">
            <summary>
            Indicates that the package is downloading from the ImageStore. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DeployedApplicationStatus.Activating">
            <summary>
            Indicates that the package is activating. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DeployedApplicationStatus.Active">
            <summary>
            Indicates that the package is active. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DeployedApplicationStatus.Upgrading">
            <summary>
            Indicates that the package is upgrading. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DeployedApplicationStatus.Deactivating">
            <summary>
            Indicates that the package is deactivating. The value is 5.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedCodePackageInfo">
            <summary>
            Information about code package deployed on a Service Fabric node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedCodePackageInfo.#ctor(System.String,System.String,System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.HostType},System.Nullable{Microsoft.ServiceFabric.Common.HostIsolationMode},System.Nullable{Microsoft.ServiceFabric.Common.DeploymentStatus},System.String,Microsoft.ServiceFabric.Common.CodePackageEntryPoint,Microsoft.ServiceFabric.Common.CodePackageEntryPoint)">
            <summary>
            Initializes a new instance of the DeployedCodePackageInfo class.
            </summary>
            <param name="name">The name of the code package.</param>
            <param name="version">The version of the code package specified in service manifest.</param>
            <param name="serviceManifestName">The name of service manifest that specified this code package.</param>
            <param name="servicePackageActivationId">The ActivationId of a deployed service package. If
            ServicePackageActivationMode specified at the time of creating the service
            is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of
            ServicePackageActivationId
            is always an empty string.
            </param>
            <param name="hostType">Specifies the type of host for main entry point of a code package as specified in service
            manifest. Possible values include: 'Invalid', 'ExeHost', 'ContainerHost'</param>
            <param name="hostIsolationMode">Specifies the isolation mode of main entry point of a code package when it's host
            type is ContainerHost. This is specified as part of container host policies in application manifest while importing
            service manifest. Possible values include: 'None', 'Process', 'HyperV'</param>
            <param name="status">Specifies the status of a deployed application or service package on a Service Fabric node.
            . Possible values include: 'Invalid', 'Downloading', 'Activating', 'Active', 'Upgrading', 'Deactivating',
            'RanToCompletion', 'Failed'</param>
            <param name="runFrequencyInterval">The interval at which code package is run. This is used for periodic code
            package.</param>
            <param name="setupEntryPoint">Information about setup or main entry point of a code package deployed on a Service
            Fabric node.</param>
            <param name="mainEntryPoint">Information about setup or main entry point of a code package deployed on a Service
            Fabric node.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedCodePackageInfo.Name">
            <summary>
            Gets the name of the code package.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedCodePackageInfo.Version">
            <summary>
            Gets the version of the code package specified in service manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedCodePackageInfo.ServiceManifestName">
            <summary>
            Gets the name of service manifest that specified this code package.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedCodePackageInfo.ServicePackageActivationId">
            <summary>
            Gets the ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of
            creating the service
            is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of
            ServicePackageActivationId
            is always an empty string.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedCodePackageInfo.HostType">
            <summary>
            Gets specifies the type of host for main entry point of a code package as specified in service manifest. Possible
            values include: 'Invalid', 'ExeHost', 'ContainerHost'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedCodePackageInfo.HostIsolationMode">
            <summary>
            Gets specifies the isolation mode of main entry point of a code package when it's host type is ContainerHost. This
            is specified as part of container host policies in application manifest while importing service manifest. Possible
            values include: 'None', 'Process', 'HyperV'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedCodePackageInfo.Status">
            <summary>
            Gets specifies the status of a deployed application or service package on a Service Fabric node.
            . Possible values include: 'Invalid', 'Downloading', 'Activating', 'Active', 'Upgrading', 'Deactivating',
            'RanToCompletion', 'Failed'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedCodePackageInfo.RunFrequencyInterval">
            <summary>
            Gets the interval at which code package is run. This is used for periodic code package.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedCodePackageInfo.SetupEntryPoint">
            <summary>
            Gets information about setup or main entry point of a code package deployed on a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedCodePackageInfo.MainEntryPoint">
            <summary>
            Gets information about setup or main entry point of a code package deployed on a Service Fabric node.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedServicePackageHealth">
            <summary>
            Information about the health of a service package for a specific application deployed on a Service Fabric node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedServicePackageHealth.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvent},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper},Microsoft.ServiceFabric.Common.HealthStatistics,Microsoft.ServiceFabric.Common.ApplicationName,System.String,Microsoft.ServiceFabric.Common.NodeName)">
            <summary>
            Initializes a new instance of the DeployedServicePackageHealth class.
            </summary>
            <param name="aggregatedHealthState">The HealthState representing the aggregated health state of the entity computed
            by Health Manager.
            The health evaluation of the entity reflects all events reported on the entity and its children (if any).
            The aggregation is done by applying the desired health policy.
            . Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            
            The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
            </param>
            <param name="healthEvents">The list of health events reported on the entity.</param>
            <param name="unhealthyEvaluations">The unhealthy evaluations that show why the current aggregated health state was
            returned by Health Manager.</param>
            <param name="healthStatistics">Shows the health statistics for all children types of the queried entity.</param>
            <param name="applicationName">The name of the application, including the 'fabric:' URI scheme.</param>
            <param name="serviceManifestName">Name of the service manifest.</param>
            <param name="nodeName">Name of the node where this service package is deployed.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealth.ApplicationName">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealth.ServiceManifestName">
            <summary>
            Gets name of the service manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealth.NodeName">
            <summary>
            Gets name of the node where this service package is deployed.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthEvaluation">
            <summary>
            Represents health evaluation for a deployed service package, containing information about the data and the
            algorithm used by health store to evaluate health. The evaluation is returned only when the aggregated health state
            is either Error or Warning.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.ApplicationName,System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the DeployedServicePackageHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="applicationName">The name of the application, including the 'fabric:' URI scheme.</param>
            <param name="serviceManifestName">The name of the service manifest.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the current aggregated health state.
            The type of the unhealthy evaluations can be EventHealthEvaluation.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthEvaluation.NodeName">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthEvaluation.ApplicationName">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthEvaluation.ServiceManifestName">
            <summary>
            Gets the name of the service manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the current aggregated health state. The type of the unhealthy
            evaluations can be EventHealthEvaluation.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthReportExpiredEvent">
            <summary>
            Deployed Service Health Report Expired event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthReportExpiredEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int64},System.String,Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the DeployedServicePackageHealthReportExpiredEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="applicationId">The identity of the application. This is an encoded representation of the application
            name. This is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="serviceManifest">Service manifest name.</param>
            <param name="servicePackageInstanceId">Id of Service package instance.</param>
            <param name="servicePackageActivationId">Id of Service package activation.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="sourceId">Id of report source.</param>
            <param name="property">Describes the property.</param>
            <param name="healthState">Describes the property health state.</param>
            <param name="timeToLiveMs">Time to live in milli-seconds.</param>
            <param name="sequenceNumber">Sequence number of report.</param>
            <param name="description">Description of report.</param>
            <param name="removeWhenExpired">Indicates the removal when it expires.</param>
            <param name="sourceUtcTimestamp">Source time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthReportExpiredEvent.ServiceManifest">
            <summary>
            Gets service manifest name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthReportExpiredEvent.ServicePackageInstanceId">
            <summary>
            Gets id of Service package instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthReportExpiredEvent.ServicePackageActivationId">
            <summary>
            Gets id of Service package activation.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthReportExpiredEvent.NodeName">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthReportExpiredEvent.SourceId">
            <summary>
            Gets id of report source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthReportExpiredEvent.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthReportExpiredEvent.HealthState">
            <summary>
            Gets the property health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthReportExpiredEvent.TimeToLiveMs">
            <summary>
            Gets time to live in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthReportExpiredEvent.SequenceNumber">
            <summary>
            Gets sequence number of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthReportExpiredEvent.Description">
            <summary>
            Gets description of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthReportExpiredEvent.RemoveWhenExpired">
            <summary>
            Gets indicates the removal when it expires.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthReportExpiredEvent.SourceUtcTimestamp">
            <summary>
            Gets source time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthState">
            <summary>
            Represents the health state of a deployed service package, containing the entity identifier and the aggregated
            health state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthState.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.ApplicationName,System.String,System.String)">
            <summary>
            Initializes a new instance of the DeployedServicePackageHealthState class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="nodeName">Name of the node on which the service package is deployed.</param>
            <param name="applicationName">The name of the application, including the 'fabric:' URI scheme.</param>
            <param name="serviceManifestName">Name of the manifest describing the service package.</param>
            <param name="servicePackageActivationId">The ActivationId of a deployed service package. If
            ServicePackageActivationMode specified at the time of creating the service
            is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of
            ServicePackageActivationId
            is always an empty string.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthState.NodeName">
            <summary>
            Gets name of the node on which the service package is deployed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthState.ApplicationName">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthState.ServiceManifestName">
            <summary>
            Gets name of the manifest describing the service package.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthState.ServicePackageActivationId">
            <summary>
            Gets the ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of
            creating the service
            is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of
            ServicePackageActivationId
            is always an empty string.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthStateChunk">
            <summary>
            Represents the health state chunk of a deployed service package, which contains the service manifest name and the
            service package aggregated health state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthStateChunk.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,System.String)">
            <summary>
            Initializes a new instance of the DeployedServicePackageHealthStateChunk class.
            </summary>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="serviceManifestName">The name of the service manifest.</param>
            <param name="servicePackageActivationId">The ActivationId of a deployed service package. If
            ServicePackageActivationMode specified at the time of creating the service
            is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of
            ServicePackageActivationId
            is always an empty string.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthStateChunk.ServiceManifestName">
            <summary>
            Gets the name of the service manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthStateChunk.ServicePackageActivationId">
            <summary>
            Gets the ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of
            creating the service
            is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of
            ServicePackageActivationId
            is always an empty string.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthStateChunkList">
            <summary>
            The list of deployed service package health state chunks that respect the input filters in the chunk query.
            Returned by get cluster health state chunks query.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthStateChunkList.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.DeployedServicePackageHealthStateChunk})">
            <summary>
            Initializes a new instance of the DeployedServicePackageHealthStateChunkList class.
            </summary>
            <param name="items">The list of deployed service package health state chunks that respect the input filters in the
            chunk query.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthStateChunkList.Items">
            <summary>
            Gets the list of deployed service package health state chunks that respect the input filters in the chunk query.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthStateFilter">
            <summary>
            Defines matching criteria to determine whether a deployed service package should be included as a child of a
            deployed application in the cluster health chunk.
            The deployed service packages are only returned if the parent entities match a filter specified in the cluster
            health chunk query description. The parent deployed application and its parent application must be included in the
            cluster health chunk.
            One filter can match zero, one or multiple deployed service packages, depending on its properties.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthStateFilter.#ctor(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the DeployedServicePackageHealthStateFilter class.
            </summary>
            <param name="serviceManifestNameFilter">The name of the service manifest which identifies the deployed service
            packages that matches the filter.
            If specified, the filter is applied only to the specified deployed service packages, if any.
            If no deployed service packages with specified manifest name exist, nothing is returned in the cluster health chunk
            based on this filter.
            If any deployed service package exists, they are included in the cluster health chunk if it respects the other
            filter properties.
            If not specified, all deployed service packages that match the parent filters (if any) are taken into consideration
            and matched against the other filter members, like health state filter.
            </param>
            <param name="servicePackageActivationIdFilter">The activation ID of a deployed service package that matches the
            filter.
            If not specified, the filter applies to all deployed service packages that match the other parameters.
            If specified, the filter matches only the deployed service package with the specified activation ID.
            </param>
            <param name="healthStateFilter">The filter for the health state of the deployed service packages. It allows
            selecting deployed service packages if they match the desired health states.
            The possible values are integer value of one of the following health states. Only deployed service packages that
            match the filter are returned. All deployed service packages are used to evaluate the parent deployed application
            aggregated health state.
            If not specified, default value is None, unless the deployed service package ID is specified. If the filter has
            default value and deployed service package ID is specified, the matching deployed service package is returned.
            The state values are flag-based enumeration, so the value could be a combination of these values obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6, it matches deployed service packages with HealthState value of OK (2) and
            Warning (4).
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthStateFilter.ServiceManifestNameFilter">
            <summary>
            Gets the name of the service manifest which identifies the deployed service packages that matches the filter.
            If specified, the filter is applied only to the specified deployed service packages, if any.
            If no deployed service packages with specified manifest name exist, nothing is returned in the cluster health chunk
            based on this filter.
            If any deployed service package exists, they are included in the cluster health chunk if it respects the other
            filter properties.
            If not specified, all deployed service packages that match the parent filters (if any) are taken into consideration
            and matched against the other filter members, like health state filter.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthStateFilter.ServicePackageActivationIdFilter">
            <summary>
            Gets the activation ID of a deployed service package that matches the filter.
            If not specified, the filter applies to all deployed service packages that match the other parameters.
            If specified, the filter matches only the deployed service package with the specified activation ID.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageHealthStateFilter.HealthStateFilter">
            <summary>
            Gets the filter for the health state of the deployed service packages. It allows selecting deployed service
            packages if they match the desired health states.
            The possible values are integer value of one of the following health states. Only deployed service packages that
            match the filter are returned. All deployed service packages are used to evaluate the parent deployed application
            aggregated health state.
            If not specified, default value is None, unless the deployed service package ID is specified. If the filter has
            default value and deployed service package ID is specified, the matching deployed service package is returned.
            The state values are flag-based enumeration, so the value could be a combination of these values obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6, it matches deployed service packages with HealthState value of OK (2) and
            Warning (4).
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedServicePackageInfo">
            <summary>
            Information about service package deployed on a Service Fabric node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedServicePackageInfo.#ctor(System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.DeploymentStatus},System.String)">
            <summary>
            Initializes a new instance of the DeployedServicePackageInfo class.
            </summary>
            <param name="name">The name of the service package as specified in the service manifest.</param>
            <param name="version">The version of the service package specified in service manifest.</param>
            <param name="status">Specifies the status of a deployed application or service package on a Service Fabric node.
            . Possible values include: 'Invalid', 'Downloading', 'Activating', 'Active', 'Upgrading', 'Deactivating',
            'RanToCompletion', 'Failed'</param>
            <param name="servicePackageActivationId">The ActivationId of a deployed service package. If
            ServicePackageActivationMode specified at the time of creating the service
            is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of
            ServicePackageActivationId
            is always an empty string.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageInfo.Name">
            <summary>
            Gets the name of the service package as specified in the service manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageInfo.Version">
            <summary>
            Gets the version of the service package specified in service manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageInfo.Status">
            <summary>
            Gets specifies the status of a deployed application or service package on a Service Fabric node.
            . Possible values include: 'Invalid', 'Downloading', 'Activating', 'Active', 'Upgrading', 'Deactivating',
            'RanToCompletion', 'Failed'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageInfo.ServicePackageActivationId">
            <summary>
            Gets the ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of
            creating the service
            is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of
            ServicePackageActivationId
            is always an empty string.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedServicePackageNewHealthReportEvent">
            <summary>
            Deployed Service Health Report Created event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedServicePackageNewHealthReportEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int64},System.String,Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the DeployedServicePackageNewHealthReportEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="applicationId">The identity of the application. This is an encoded representation of the application
            name. This is used in the REST APIs to identify the application resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application
            name is "fabric:/myapp/app1",
            the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
            </param>
            <param name="serviceManifestName">Service manifest name.</param>
            <param name="servicePackageInstanceId">Id of Service package instance.</param>
            <param name="servicePackageActivationId">Id of Service package activation.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="sourceId">Id of report source.</param>
            <param name="property">Describes the property.</param>
            <param name="healthState">Describes the property health state.</param>
            <param name="timeToLiveMs">Time to live in milli-seconds.</param>
            <param name="sequenceNumber">Sequence number of report.</param>
            <param name="description">Description of report.</param>
            <param name="removeWhenExpired">Indicates the removal when it expires.</param>
            <param name="sourceUtcTimestamp">Source time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageNewHealthReportEvent.ServiceManifestName">
            <summary>
            Gets service manifest name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageNewHealthReportEvent.ServicePackageInstanceId">
            <summary>
            Gets id of Service package instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageNewHealthReportEvent.ServicePackageActivationId">
            <summary>
            Gets id of Service package activation.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageNewHealthReportEvent.NodeName">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageNewHealthReportEvent.SourceId">
            <summary>
            Gets id of report source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageNewHealthReportEvent.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageNewHealthReportEvent.HealthState">
            <summary>
            Gets the property health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageNewHealthReportEvent.TimeToLiveMs">
            <summary>
            Gets time to live in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageNewHealthReportEvent.SequenceNumber">
            <summary>
            Gets sequence number of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageNewHealthReportEvent.Description">
            <summary>
            Gets description of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageNewHealthReportEvent.RemoveWhenExpired">
            <summary>
            Gets indicates the removal when it expires.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackageNewHealthReportEvent.SourceUtcTimestamp">
            <summary>
            Gets source time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedServicePackagesHealthEvaluation">
            <summary>
            Represents health evaluation for deployed service packages, containing health evaluations for each unhealthy
            deployed service package that impacted current aggregated health state. Can be returned when evaluating deployed
            application health and the aggregated health state is either Error or Warning.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedServicePackagesHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the DeployedServicePackagesHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="totalCount">Total number of deployed service packages of the deployed application in the health
            store.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the aggregated health state. Includes
            all the unhealthy DeployedServicePackageHealthEvaluation that impacted the aggregated health.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackagesHealthEvaluation.TotalCount">
            <summary>
            Gets total number of deployed service packages of the deployed application in the health store.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServicePackagesHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy
            DeployedServicePackageHealthEvaluation that impacted the aggregated health.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedServiceReplicaDetailInfo">
            <summary>
            Information about a Service Fabric service replica deployed on a node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedServiceReplicaDetailInfo.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ServiceKind},Microsoft.ServiceFabric.Common.ServiceName,Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{Microsoft.ServiceFabric.Common.ServiceOperationName},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.LoadMetricReportInfo})">
            <summary>
            Initializes a new instance of the DeployedServiceReplicaDetailInfo class.
            </summary>
            <param name="serviceKind">The kind of service (Stateless or Stateful).</param>
            <param name="serviceName">Full hierarchical name of the service in URI format starting with `fabric:`.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="currentServiceOperation">Specifies the current active life-cycle operation on a stateful service
            replica or stateless service instance. Possible values include: 'Unknown', 'None', 'Open', 'ChangeRole', 'Close',
            'Abort'</param>
            <param name="currentServiceOperationStartTimeUtc">The start time of the current service operation in UTC
            format.</param>
            <param name="reportedLoad">List of load reported by replica.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceReplicaDetailInfo.ServiceName">
            <summary>
            Gets full hierarchical name of the service in URI format starting with `fabric:`.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceReplicaDetailInfo.PartitionId">
            <summary>
            Gets an internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when
            the service was created. The partition ID is unique and does not change for the lifetime of the service. If the
            same service was deleted and recreated the IDs of its partitions would be different.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceReplicaDetailInfo.CurrentServiceOperation">
            <summary>
            Gets specifies the current active life-cycle operation on a stateful service replica or stateless service instance.
            Possible values include: 'Unknown', 'None', 'Open', 'ChangeRole', 'Close', 'Abort'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceReplicaDetailInfo.CurrentServiceOperationStartTimeUtc">
            <summary>
            Gets the start time of the current service operation in UTC format.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceReplicaDetailInfo.ReportedLoad">
            <summary>
            Gets list of load reported by replica.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceReplicaDetailInfo.ServiceKind">
            <summary>
            Gets the kind of service (Stateless or Stateful).
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedServiceReplicaInfo">
            <summary>
            Information about a Service Fabric service replica deployed on a node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedServiceReplicaInfo.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ServiceKind},Microsoft.ServiceFabric.Common.ServiceName,System.String,System.String,System.String,Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{Microsoft.ServiceFabric.Common.ReplicaStatus},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the DeployedServiceReplicaInfo class.
            </summary>
            <param name="serviceKind">The kind of service (Stateless or Stateful).</param>
            <param name="serviceName">The full name of the service with 'fabric:' URI scheme.</param>
            <param name="serviceTypeName">Name of the service type as specified in the service manifest.</param>
            <param name="serviceManifestName">The name of the service manifest in which this service type is defined.</param>
            <param name="codePackageName">The name of the code package that hosts this replica.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="replicaStatus">The status of a replica of a service. Possible values include: 'Invalid', 'InBuild',
            'Standby', 'Ready', 'Down', 'Dropped'</param>
            <param name="address">The last address returned by the replica in Open or ChangeRole.</param>
            <param name="servicePackageActivationId">The ActivationId of a deployed service package. If
            ServicePackageActivationMode specified at the time of creating the service
            is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of
            ServicePackageActivationId
            is always an empty string.
            </param>
            <param name="hostProcessId">Host process ID of the process that is hosting the replica. This will be zero if the
            replica is down. In hyper-v containers this host process ID will be from different kernel.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceReplicaInfo.ServiceName">
            <summary>
            Gets the full name of the service with 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceReplicaInfo.ServiceTypeName">
            <summary>
            Gets name of the service type as specified in the service manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceReplicaInfo.ServiceManifestName">
            <summary>
            Gets the name of the service manifest in which this service type is defined.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceReplicaInfo.CodePackageName">
            <summary>
            Gets the name of the code package that hosts this replica.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceReplicaInfo.PartitionId">
            <summary>
            Gets an internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when
            the service was created. The partition ID is unique and does not change for the lifetime of the service. If the
            same service was deleted and recreated the IDs of its partitions would be different.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceReplicaInfo.ReplicaStatus">
            <summary>
            Gets the status of a replica of a service. Possible values include: 'Invalid', 'InBuild', 'Standby', 'Ready',
            'Down', 'Dropped'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceReplicaInfo.Address">
            <summary>
            Gets the last address returned by the replica in Open or ChangeRole.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceReplicaInfo.ServicePackageActivationId">
            <summary>
            Gets the ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of
            creating the service
            is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of
            ServicePackageActivationId
            is always an empty string.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceReplicaInfo.HostProcessId">
            <summary>
            Gets host process ID of the process that is hosting the replica. This will be zero if the replica is down. In
            hyper-v containers this host process ID will be from different kernel.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceReplicaInfo.ServiceKind">
            <summary>
            Gets the kind of service (Stateless or Stateful).
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedServiceTypeInfo">
            <summary>
            Information about service type deployed on a node, information such as the status of the service type registration
            on a node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedServiceTypeInfo.#ctor(System.String,System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.ServiceTypeRegistrationStatus},System.String)">
            <summary>
            Initializes a new instance of the DeployedServiceTypeInfo class.
            </summary>
            <param name="serviceTypeName">Name of the service type as specified in the service manifest.</param>
            <param name="serviceManifestName">The name of the service manifest in which this service type is defined.</param>
            <param name="codePackageName">The name of the code package that registered the service type.</param>
            <param name="status">The status of the service type registration on the node. Possible values include: 'Invalid',
            'Disabled', 'Enabled', 'Registered'</param>
            <param name="servicePackageActivationId">The ActivationId of a deployed service package. If
            ServicePackageActivationMode specified at the time of creating the service
            is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of
            ServicePackageActivationId
            is always an empty string.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceTypeInfo.ServiceTypeName">
            <summary>
            Gets name of the service type as specified in the service manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceTypeInfo.ServiceManifestName">
            <summary>
            Gets the name of the service manifest in which this service type is defined.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceTypeInfo.CodePackageName">
            <summary>
            Gets the name of the code package that registered the service type.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceTypeInfo.Status">
            <summary>
            Gets the status of the service type registration on the node. Possible values include: 'Invalid', 'Disabled',
            'Enabled', 'Registered'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedServiceTypeInfo.ServicePackageActivationId">
            <summary>
            Gets the ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of
            creating the service
            is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of
            ServicePackageActivationId
            is always an empty string.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedStatefulServiceReplicaDetailInfo">
            <summary>
            Information about a stateful replica running in a code package. Note DeployedServiceReplicaQueryResult will contain
            duplicate data like ServiceKind, ServiceName, PartitionId and replicaId.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedStatefulServiceReplicaDetailInfo.#ctor(Microsoft.ServiceFabric.Common.ServiceName,Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{Microsoft.ServiceFabric.Common.ServiceOperationName},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.LoadMetricReportInfo},Microsoft.ServiceFabric.Common.ReplicaId,System.Nullable{Microsoft.ServiceFabric.Common.ReplicatorOperationName},System.Nullable{Microsoft.ServiceFabric.Common.PartitionAccessStatus},System.Nullable{Microsoft.ServiceFabric.Common.PartitionAccessStatus},Microsoft.ServiceFabric.Common.ReplicatorStatus,Microsoft.ServiceFabric.Common.KeyValueStoreReplicaStatus,Microsoft.ServiceFabric.Common.DeployedStatefulServiceReplicaInfo)">
            <summary>
            Initializes a new instance of the DeployedStatefulServiceReplicaDetailInfo class.
            </summary>
            <param name="serviceName">Full hierarchical name of the service in URI format starting with `fabric:`.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="currentServiceOperation">Specifies the current active life-cycle operation on a stateful service
            replica or stateless service instance. Possible values include: 'Unknown', 'None', 'Open', 'ChangeRole', 'Close',
            'Abort'</param>
            <param name="currentServiceOperationStartTimeUtc">The start time of the current service operation in UTC
            format.</param>
            <param name="reportedLoad">List of load reported by replica.</param>
            <param name="replicaId">Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify
            a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a
            replica gets dropped and another replica gets created on the same node for the same partition, it will get a
            different value for the id. Sometimes the id of a stateless service instance is also referred as a replica
            id.</param>
            <param name="currentReplicatorOperation">Specifies the operation currently being executed by the Replicator.
            Possible values include: 'Invalid', 'None', 'Open', 'ChangeRole', 'UpdateEpoch', 'Close', 'Abort', 'OnDataLoss',
            'WaitForCatchup', 'Build'</param>
            <param name="readStatus">Specifies the access status of the partition. Possible values include: 'Invalid',
            'Granted', 'ReconfigurationPending', 'NotPrimary', 'NoWriteQuorum'</param>
            <param name="writeStatus">Specifies the access status of the partition. Possible values include: 'Invalid',
            'Granted', 'ReconfigurationPending', 'NotPrimary', 'NoWriteQuorum'</param>
            <param name="replicatorStatus">Represents a base class for primary or secondary replicator status.
            Contains information about the service fabric replicator like the replication/copy queue utilization, last
            acknowledgement received timestamp, etc.
            </param>
            <param name="replicaStatus">Key value store related information for the replica.</param>
            <param name="deployedServiceReplicaQueryResult">Information about a stateful service replica deployed on a
            node.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedStatefulServiceReplicaDetailInfo.ReplicaId">
            <summary>
            Gets id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a
            partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets
            dropped and another replica gets created on the same node for the same partition, it will get a different value for
            the id. Sometimes the id of a stateless service instance is also referred as a replica id.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedStatefulServiceReplicaDetailInfo.CurrentReplicatorOperation">
            <summary>
            Gets specifies the operation currently being executed by the Replicator. Possible values include: 'Invalid',
            'None', 'Open', 'ChangeRole', 'UpdateEpoch', 'Close', 'Abort', 'OnDataLoss', 'WaitForCatchup', 'Build'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedStatefulServiceReplicaDetailInfo.ReadStatus">
            <summary>
            Gets specifies the access status of the partition. Possible values include: 'Invalid', 'Granted',
            'ReconfigurationPending', 'NotPrimary', 'NoWriteQuorum'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedStatefulServiceReplicaDetailInfo.WriteStatus">
            <summary>
            Gets specifies the access status of the partition. Possible values include: 'Invalid', 'Granted',
            'ReconfigurationPending', 'NotPrimary', 'NoWriteQuorum'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedStatefulServiceReplicaDetailInfo.ReplicatorStatus">
            <summary>
            Gets represents a base class for primary or secondary replicator status.
            Contains information about the service fabric replicator like the replication/copy queue utilization, last
            acknowledgement received timestamp, etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedStatefulServiceReplicaDetailInfo.ReplicaStatus">
            <summary>
            Gets key value store related information for the replica.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedStatefulServiceReplicaDetailInfo.DeployedServiceReplicaQueryResult">
            <summary>
            Gets information about a stateful service replica deployed on a node.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedStatefulServiceReplicaInfo">
            <summary>
            Information about a stateful service replica deployed on a node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedStatefulServiceReplicaInfo.#ctor(Microsoft.ServiceFabric.Common.ServiceName,System.String,System.String,System.String,Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{Microsoft.ServiceFabric.Common.ReplicaStatus},System.String,System.String,System.String,Microsoft.ServiceFabric.Common.ReplicaId,System.Nullable{Microsoft.ServiceFabric.Common.ReplicaRole},Microsoft.ServiceFabric.Common.ReconfigurationInformation)">
            <summary>
            Initializes a new instance of the DeployedStatefulServiceReplicaInfo class.
            </summary>
            <param name="serviceName">The full name of the service with 'fabric:' URI scheme.</param>
            <param name="serviceTypeName">Name of the service type as specified in the service manifest.</param>
            <param name="serviceManifestName">The name of the service manifest in which this service type is defined.</param>
            <param name="codePackageName">The name of the code package that hosts this replica.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="replicaStatus">The status of a replica of a service. Possible values include: 'Invalid', 'InBuild',
            'Standby', 'Ready', 'Down', 'Dropped'</param>
            <param name="address">The last address returned by the replica in Open or ChangeRole.</param>
            <param name="servicePackageActivationId">The ActivationId of a deployed service package. If
            ServicePackageActivationMode specified at the time of creating the service
            is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of
            ServicePackageActivationId
            is always an empty string.
            </param>
            <param name="hostProcessId">Host process ID of the process that is hosting the replica. This will be zero if the
            replica is down. In hyper-v containers this host process ID will be from different kernel.</param>
            <param name="replicaId">Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify
            a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a
            replica gets dropped and another replica gets created on the same node for the same partition, it will get a
            different value for the id. Sometimes the id of a stateless service instance is also referred as a replica
            id.</param>
            <param name="replicaRole">The role of a replica of a stateful service. Possible values include: 'Unknown', 'None',
            'Primary', 'IdleSecondary', 'ActiveSecondary'</param>
            <param name="reconfigurationInformation">Information about current reconfiguration like phase, type, previous
            configuration role of replica and reconfiguration start date time.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedStatefulServiceReplicaInfo.ReplicaId">
            <summary>
            Gets id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a
            partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets
            dropped and another replica gets created on the same node for the same partition, it will get a different value for
            the id. Sometimes the id of a stateless service instance is also referred as a replica id.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedStatefulServiceReplicaInfo.ReplicaRole">
            <summary>
            Gets the role of a replica of a stateful service. Possible values include: 'Unknown', 'None', 'Primary',
            'IdleSecondary', 'ActiveSecondary'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedStatefulServiceReplicaInfo.ReconfigurationInformation">
            <summary>
            Gets information about current reconfiguration like phase, type, previous configuration role of replica and
            reconfiguration start date time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedStatelessServiceInstanceDetailInfo">
            <summary>
            Information about a stateless instance running in a code package. Note that DeployedServiceReplicaQueryResult will
            contain duplicate data like ServiceKind, ServiceName, PartitionId and InstanceId.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedStatelessServiceInstanceDetailInfo.#ctor(Microsoft.ServiceFabric.Common.ServiceName,Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{Microsoft.ServiceFabric.Common.ServiceOperationName},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.LoadMetricReportInfo},Microsoft.ServiceFabric.Common.ReplicaId,Microsoft.ServiceFabric.Common.DeployedStatelessServiceInstanceInfo)">
            <summary>
            Initializes a new instance of the DeployedStatelessServiceInstanceDetailInfo class.
            </summary>
            <param name="serviceName">Full hierarchical name of the service in URI format starting with `fabric:`.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="currentServiceOperation">Specifies the current active life-cycle operation on a stateful service
            replica or stateless service instance. Possible values include: 'Unknown', 'None', 'Open', 'ChangeRole', 'Close',
            'Abort'</param>
            <param name="currentServiceOperationStartTimeUtc">The start time of the current service operation in UTC
            format.</param>
            <param name="reportedLoad">List of load reported by replica.</param>
            <param name="instanceId">Id of a stateless service instance. InstanceId is used by Service Fabric to uniquely
            identify an instance of a partition of a stateless service. It is unique within a partition and does not change for
            the lifetime of the instance. If the instance has failed over on the same or different node, it will get a
            different value for the InstanceId.</param>
            <param name="deployedServiceReplicaQueryResult">Information about a stateless service instance deployed on a
            node.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedStatelessServiceInstanceDetailInfo.InstanceId">
            <summary>
            Gets id of a stateless service instance. InstanceId is used by Service Fabric to uniquely identify an instance of a
            partition of a stateless service. It is unique within a partition and does not change for the lifetime of the
            instance. If the instance has failed over on the same or different node, it will get a different value for the
            InstanceId.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedStatelessServiceInstanceDetailInfo.DeployedServiceReplicaQueryResult">
            <summary>
            Gets information about a stateless service instance deployed on a node.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployedStatelessServiceInstanceInfo">
            <summary>
            Information about a stateless service instance deployed on a node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployedStatelessServiceInstanceInfo.#ctor(Microsoft.ServiceFabric.Common.ServiceName,System.String,System.String,System.String,Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{Microsoft.ServiceFabric.Common.ReplicaStatus},System.String,System.String,System.String,Microsoft.ServiceFabric.Common.ReplicaId)">
            <summary>
            Initializes a new instance of the DeployedStatelessServiceInstanceInfo class.
            </summary>
            <param name="serviceName">The full name of the service with 'fabric:' URI scheme.</param>
            <param name="serviceTypeName">Name of the service type as specified in the service manifest.</param>
            <param name="serviceManifestName">The name of the service manifest in which this service type is defined.</param>
            <param name="codePackageName">The name of the code package that hosts this replica.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="replicaStatus">The status of a replica of a service. Possible values include: 'Invalid', 'InBuild',
            'Standby', 'Ready', 'Down', 'Dropped'</param>
            <param name="address">The last address returned by the replica in Open or ChangeRole.</param>
            <param name="servicePackageActivationId">The ActivationId of a deployed service package. If
            ServicePackageActivationMode specified at the time of creating the service
            is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of
            ServicePackageActivationId
            is always an empty string.
            </param>
            <param name="hostProcessId">Host process ID of the process that is hosting the replica. This will be zero if the
            replica is down. In hyper-v containers this host process ID will be from different kernel.</param>
            <param name="instanceId">Id of a stateless service instance. InstanceId is used by Service Fabric to uniquely
            identify an instance of a partition of a stateless service. It is unique within a partition and does not change for
            the lifetime of the instance. If the instance has failed over on the same or different node, it will get a
            different value for the InstanceId.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployedStatelessServiceInstanceInfo.InstanceId">
            <summary>
            Gets id of a stateless service instance. InstanceId is used by Service Fabric to uniquely identify an instance of a
            partition of a stateless service. It is unique within a partition and does not change for the lifetime of the
            instance. If the instance has failed over on the same or different node, it will get a different value for the
            InstanceId.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeploymentStatus">
            <summary>
            Defines values for DeploymentStatus.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DeploymentStatus.Invalid">
            <summary>
            Indicates status of the application or service package is not known or invalid. The value is 0.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DeploymentStatus.Downloading">
            <summary>
            Indicates the application or service package is being downloaded to the node from the ImageStore. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DeploymentStatus.Activating">
            <summary>
            Indicates the application or service package is being activated. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DeploymentStatus.Active">
            <summary>
            Indicates the application or service package is active the node. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DeploymentStatus.Upgrading">
            <summary>
            Indicates the application or service package is being upgraded. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DeploymentStatus.Deactivating">
            <summary>
            Indicates the application or service package is being deactivated. The value is 5.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DeploymentStatus.RanToCompletion">
            <summary>
            Indicates the application or service package has ran to completion successfully. The value is 6.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DeploymentStatus.Failed">
            <summary>
            Indicates the application or service package has failed to run to completion. The value is 7.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DeployServicePackageToNodeDescription">
            <summary>
            Defines description for downloading packages associated with a service manifest to image cache on a Service Fabric
            node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DeployServicePackageToNodeDescription.#ctor(System.String,System.String,System.String,Microsoft.ServiceFabric.Common.NodeName,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.PackageSharingPolicyInfo})">
            <summary>
            Initializes a new instance of the DeployServicePackageToNodeDescription class.
            </summary>
            <param name="serviceManifestName">The name of service manifest whose packages need to be downloaded.</param>
            <param name="applicationTypeName">The application type name as defined in the application manifest.</param>
            <param name="applicationTypeVersion">The version of the application type as defined in the application
            manifest.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="packageSharingPolicy">List of package sharing policy information.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployServicePackageToNodeDescription.ServiceManifestName">
            <summary>
            Gets the name of service manifest whose packages need to be downloaded.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployServicePackageToNodeDescription.ApplicationTypeName">
            <summary>
            Gets the application type name as defined in the application manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployServicePackageToNodeDescription.ApplicationTypeVersion">
            <summary>
            Gets the version of the application type as defined in the application manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployServicePackageToNodeDescription.NodeName">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DeployServicePackageToNodeDescription.PackageSharingPolicy">
            <summary>
            Gets list of package sharing policy information.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DiagnosticsDescription">
            <summary>
            Describes the diagnostics options available
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DiagnosticsDescription.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.DiagnosticsSinkProperties},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the DiagnosticsDescription class.
            </summary>
            <param name="sinks">List of supported sinks that can be referenced.</param>
            <param name="enabled">Status of whether or not sinks are enabled.</param>
            <param name="defaultSinkRefs">The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the
            service and code package level.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DiagnosticsDescription.Sinks">
            <summary>
            Gets list of supported sinks that can be referenced.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DiagnosticsDescription.Enabled">
            <summary>
            Gets status of whether or not sinks are enabled.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DiagnosticsDescription.DefaultSinkRefs">
            <summary>
            Gets the sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package
            level.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DiagnosticsRef">
            <summary>
            Reference to sinks in DiagnosticsDescription.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DiagnosticsRef.#ctor(System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the DiagnosticsRef class.
            </summary>
            <param name="enabled">Status of whether or not sinks are enabled.</param>
            <param name="sinkRefs">List of sinks to be used if enabled. References the list of sinks in
            DiagnosticsDescription.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DiagnosticsRef.Enabled">
            <summary>
            Gets status of whether or not sinks are enabled.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DiagnosticsRef.SinkRefs">
            <summary>
            Gets list of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DiagnosticsSinkKind">
            <summary>
            Defines values for DiagnosticsSinkKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DiagnosticsSinkKind.Invalid">
            <summary>
            Indicates an invalid sink kind. All Service Fabric enumerations have the invalid type.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.DiagnosticsSinkKind.AzureInternalMonitoringPipeline">
            <summary>
            Diagnostics settings for Geneva.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DiagnosticsSinkProperties">
            <summary>
            Properties of a DiagnosticsSink.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DiagnosticsSinkProperties.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.DiagnosticsSinkKind},System.String,System.String)">
            <summary>
            Initializes a new instance of the DiagnosticsSinkProperties class.
            </summary>
            <param name="kind">The kind of DiagnosticsSink.</param>
            <param name="name">Name of the sink. This value is referenced by DiagnosticsReferenceDescription</param>
            <param name="description">A description of the sink.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DiagnosticsSinkProperties.Name">
            <summary>
            Gets name of the sink. This value is referenced by DiagnosticsReferenceDescription
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DiagnosticsSinkProperties.Description">
            <summary>
            Gets a description of the sink.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DiagnosticsSinkProperties.Kind">
            <summary>
            Gets the kind of DiagnosticsSink.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DisableBackupDescription">
            <summary>
            It describes the body parameters while disabling backup of a backup entity(Application/Service/Partition).
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DisableBackupDescription.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the DisableBackupDescription class.
            </summary>
            <param name="cleanBackup">Boolean flag to delete backups. It can be set to true for deleting all the backups which
            were created for the backup entity that is getting disabled for backup.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DisableBackupDescription.CleanBackup">
            <summary>
            Gets boolean flag to delete backups. It can be set to true for deleting all the backups which were created for the
            backup entity that is getting disabled for backup.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DiskInfo">
            <summary>
            Information about the disk
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DiskInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DiskInfo class.
            </summary>
            <param name="capacity">the disk size in bytes</param>
            <param name="availableSpace">the available disk space in bytes</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DiskInfo.Capacity">
            <summary>
            Gets the disk size in bytes
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DiskInfo.AvailableSpace">
            <summary>
            Gets the available disk space in bytes
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DoublePropertyValue">
            <summary>
            Describes a Service Fabric property value of type Double.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DoublePropertyValue.#ctor(System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the DoublePropertyValue class.
            </summary>
            <param name="data">The data of the property value.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DoublePropertyValue.Data">
            <summary>
            Gets the data of the property value.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.DsmsAzureBlobBackupStorageDescription">
            <summary>
            Describes the parameters for Dsms Azure blob store used for storing and enumerating backups.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.DsmsAzureBlobBackupStorageDescription.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the DsmsAzureBlobBackupStorageDescription class.
            </summary>
            <param name="storageCredentialsSourceLocation">The source location of the storage credentials to connect to the
            Dsms Azure blob store.</param>
            <param name="containerName">The name of the container in the blob store to store and enumerate backups
            from.</param>
            <param name="friendlyName">Friendly name for this backup storage.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DsmsAzureBlobBackupStorageDescription.StorageCredentialsSourceLocation">
            <summary>
            Gets the source location of the storage credentials to connect to the Dsms Azure blob store.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.DsmsAzureBlobBackupStorageDescription.ContainerName">
            <summary>
            Gets the name of the container in the blob store to store and enumerate backups from.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.EnableBackupDescription">
            <summary>
            Specifies the parameters needed to enable periodic backup.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.EnableBackupDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the EnableBackupDescription class.
            </summary>
            <param name="backupPolicyName">Name of the backup policy to be used for enabling periodic backups.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.EnableBackupDescription.BackupPolicyName">
            <summary>
            Gets name of the backup policy to be used for enabling periodic backups.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.EndpointProperties">
            <summary>
            Describes a container endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.EndpointProperties.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the EndpointProperties class.
            </summary>
            <param name="name">The name of the endpoint.</param>
            <param name="port">Port used by the container.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.EndpointProperties.Name">
            <summary>
            Gets the name of the endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.EndpointProperties.Port">
            <summary>
            Gets port used by the container.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.EndpointRef">
            <summary>
            Describes a reference to a service endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.EndpointRef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the EndpointRef class.
            </summary>
            <param name="name">Name of the endpoint.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.EndpointRef.Name">
            <summary>
            Gets name of the endpoint.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.EnsureAvailabilitySafetyCheck">
            <summary>
            Safety check that waits to ensure the availability of the partition. It waits until there are replicas available
            such that bringing down this replica will not cause availability loss for the partition.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.EnsureAvailabilitySafetyCheck.#ctor(Microsoft.ServiceFabric.Common.PartitionId)">
            <summary>
            Initializes a new instance of the EnsureAvailabilitySafetyCheck class.
            </summary>
            <param name="partitionId">Id of the partition which is undergoing the safety check.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.EnsurePartitionQuorumSafetyCheck">
            <summary>
            Safety check that ensures that a quorum of replicas are not lost for a partition.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.EnsurePartitionQuorumSafetyCheck.#ctor(Microsoft.ServiceFabric.Common.PartitionId)">
            <summary>
            Initializes a new instance of the EnsurePartitionQuorumSafetyCheck class.
            </summary>
            <param name="partitionId">Id of the partition which is undergoing the safety check.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.EntityHealth">
            <summary>
            Health information common to all entities in the cluster. It contains the aggregated health state, health events
            and unhealthy evaluation.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.EntityHealth.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvent},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper},Microsoft.ServiceFabric.Common.HealthStatistics)">
            <summary>
            Initializes a new instance of the EntityHealth class.
            </summary>
            <param name="aggregatedHealthState">The HealthState representing the aggregated health state of the entity computed
            by Health Manager.
            The health evaluation of the entity reflects all events reported on the entity and its children (if any).
            The aggregation is done by applying the desired health policy.
            . Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            
            The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
            </param>
            <param name="healthEvents">The list of health events reported on the entity.</param>
            <param name="unhealthyEvaluations">The unhealthy evaluations that show why the current aggregated health state was
            returned by Health Manager.</param>
            <param name="healthStatistics">Shows the health statistics for all children types of the queried entity.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.EntityHealth.AggregatedHealthState">
            <summary>
            Gets the HealthState representing the aggregated health state of the entity computed by Health Manager.
            The health evaluation of the entity reflects all events reported on the entity and its children (if any).
            The aggregation is done by applying the desired health policy.
            . Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            
            The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.EntityHealth.HealthEvents">
            <summary>
            Gets the list of health events reported on the entity.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.EntityHealth.UnhealthyEvaluations">
            <summary>
            Gets the unhealthy evaluations that show why the current aggregated health state was returned by Health Manager.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.EntityHealth.HealthStatistics">
            <summary>
            Gets shows the health statistics for all children types of the queried entity.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.EntityHealthState">
            <summary>
            A base type for the health state of various entities in the cluster. It contains the aggregated health state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.EntityHealthState.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState})">
            <summary>
            Initializes a new instance of the EntityHealthState class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.EntityHealthState.AggregatedHealthState">
            <summary>
            Gets the health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica
            etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.EntityHealthStateChunk">
            <summary>
            A base type for the health state chunk of various entities in the cluster. It contains the aggregated health state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.EntityHealthStateChunk.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState})">
            <summary>
            Initializes a new instance of the EntityHealthStateChunk class.
            </summary>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.EntityHealthStateChunk.HealthState">
            <summary>
            Gets the health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica
            etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.EntityHealthStateChunkList">
            <summary>
            A base type for the list of health state chunks found in the cluster. It contains the total number of health states
            that match the input filters.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.EntityHealthStateChunkList.#ctor(System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the EntityHealthStateChunkList class.
            </summary>
            <param name="totalCount">Total number of entity health state objects that match the specified filters from the
            cluster health chunk query description.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.EntityHealthStateChunkList.TotalCount">
            <summary>
            Gets total number of entity health state objects that match the specified filters from the cluster health chunk
            query description.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.EntityKind">
            <summary>
            Defines values for EntityKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.EntityKind.Invalid">
            <summary>
            Indicates an invalid entity kind. All Service Fabric enumerations have the invalid type. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.EntityKind.Node">
            <summary>
            Indicates the entity is a Service Fabric node. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.EntityKind.Partition">
            <summary>
            Indicates the entity is a Service Fabric partition. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.EntityKind.Service">
            <summary>
            Indicates the entity is a Service Fabric service. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.EntityKind.Application">
            <summary>
            Indicates the entity is a Service Fabric application. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.EntityKind.Replica">
            <summary>
            Indicates the entity is a Service Fabric replica. The value is 5.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.EntityKind.DeployedApplication">
            <summary>
            Indicates the entity is a Service Fabric deployed application. The value is 6.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.EntityKind.DeployedServicePackage">
            <summary>
            Indicates the entity is a Service Fabric deployed service package. The value is 7.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.EntityKind.Cluster">
            <summary>
            Indicates the entity is a Service Fabric cluster. The value is 8.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.EntityKindHealthStateCount">
            <summary>
            Represents health state count for entities of the specified entity kind.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.EntityKindHealthStateCount.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.EntityKind},Microsoft.ServiceFabric.Common.HealthStateCount)">
            <summary>
            Initializes a new instance of the EntityKindHealthStateCount class.
            </summary>
            <param name="entityKind">The entity kind for which health states are evaluated. Possible values include: 'Invalid',
            'Node', 'Partition', 'Service', 'Application', 'Replica', 'DeployedApplication', 'DeployedServicePackage',
            'Cluster'
            
            The entity type of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
            </param>
            <param name="healthStateCount">The health state count for the entities of the specified kind.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.EntityKindHealthStateCount.EntityKind">
            <summary>
            Gets the entity kind for which health states are evaluated. Possible values include: 'Invalid', 'Node',
            'Partition', 'Service', 'Application', 'Replica', 'DeployedApplication', 'DeployedServicePackage', 'Cluster'
            
            The entity type of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.EntityKindHealthStateCount.HealthStateCount">
            <summary>
            Gets the health state count for the entities of the specified kind.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.EntryPointStatus">
            <summary>
            Defines values for EntryPointStatus.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.EntryPointStatus.Invalid">
            <summary>
            Indicates status of entry point is not known or invalid. The value is 0.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.EntryPointStatus.Pending">
            <summary>
            Indicates the entry point is scheduled to be started. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.EntryPointStatus.Starting">
            <summary>
            Indicates the entry point is being started. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.EntryPointStatus.Started">
            <summary>
            Indicates the entry point was started successfully and is running. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.EntryPointStatus.Stopping">
            <summary>
            Indicates the entry point is being stopped. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.EntryPointStatus.Stopped">
            <summary>
            Indicates the entry point is not running. The value is 5.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.EnvironmentVariable">
            <summary>
            Describes an environment variable for the container.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.EnvironmentVariable.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.EnvironmentVariableType},System.String,System.String)">
            <summary>
            Initializes a new instance of the EnvironmentVariable class.
            </summary>
            <param name="type">The type of the environment variable being given in value. Possible values include: 'ClearText',
            'KeyVaultReference', 'SecretValueReference'</param>
            <param name="name">The name of the environment variable.</param>
            <param name="value">The value of the environment variable, will be processed based on the type provided.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.EnvironmentVariable.Type">
            <summary>
            Gets the type of the environment variable being given in value. Possible values include: 'ClearText',
            'KeyVaultReference', 'SecretValueReference'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.EnvironmentVariable.Name">
            <summary>
            Gets the name of the environment variable.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.EnvironmentVariable.Value">
            <summary>
            Gets the value of the environment variable, will be processed based on the type provided.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.EnvironmentVariableType">
            <summary>
            Defines values for EnvironmentVariableType.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.EnvironmentVariableType.ClearText">
            <summary>
            The environment variable in clear text, will not be processed in any way and passed in as is.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.EnvironmentVariableType.KeyVaultReference">
            <summary>
            The URI to a KeyVault secret version, will be resolved using the application's managed identity (this type is only
            valid if the app was assigned a managed identity) before getting passed in.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.EnvironmentVariableType.SecretValueReference">
            <summary>
            The reference to a SecretValue resource, will be resolved before getting passed in.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Epoch">
            <summary>
            An Epoch is a configuration number for the partition as a whole. When the configuration of the replica set changes,
            for example when the Primary replica changes, the operations that are replicated from the new Primary replica are
            said to be a new Epoch from the ones which were sent by the old Primary replica.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Epoch.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Epoch class.
            </summary>
            <param name="configurationVersion">The current configuration number of this Epoch. The configuration number is an
            increasing value that is updated whenever the configuration of this replica set changes.</param>
            <param name="dataLossVersion">The current data loss number of this Epoch. The data loss number property is an
            increasing value which is updated whenever data loss is suspected, as when loss of a quorum of replicas in the
            replica set that includes the Primary replica.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Epoch.ConfigurationVersion">
            <summary>
            Gets the current configuration number of this Epoch. The configuration number is an increasing value that is
            updated whenever the configuration of this replica set changes.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Epoch.DataLossVersion">
            <summary>
            Gets the current data loss number of this Epoch. The data loss number property is an increasing value which is
            updated whenever data loss is suspected, as when loss of a quorum of replicas in the replica set that includes the
            Primary replica.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.EventHealthEvaluation">
            <summary>
            Represents health evaluation of a HealthEvent that was reported on the entity.
            The health evaluation is returned when evaluating health of an entity results in Error or Warning.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.EventHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.HealthEvent)">
            <summary>
            Initializes a new instance of the EventHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="considerWarningAsError">Indicates whether warnings are treated with the same severity as errors. The
            field is specified in the health policy used to evaluate the entity.</param>
            <param name="unhealthyEvent">Represents health information reported on a health entity, such as cluster,
            application or node, with additional metadata added by the Health Manager.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.EventHealthEvaluation.ConsiderWarningAsError">
            <summary>
            Gets indicates whether warnings are treated with the same severity as errors. The field is specified in the health
            policy used to evaluate the entity.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.EventHealthEvaluation.UnhealthyEvent">
            <summary>
            Gets represents health information reported on a health entity, such as cluster, application or node, with
            additional metadata added by the Health Manager.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ExecutingFaultsChaosEvent">
            <summary>
            Describes a Chaos event that gets generated when Chaos has decided on the faults for an iteration. This Chaos event
            contains the details of the faults as a list of strings.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ExecutingFaultsChaosEvent.#ctor(System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the ExecutingFaultsChaosEvent class.
            </summary>
            <param name="timeStampUtc">The UTC timestamp when this Chaos event was generated.</param>
            <param name="faults">List of string description of the faults that Chaos decided to execute in an
            iteration.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ExecutingFaultsChaosEvent.Faults">
            <summary>
            Gets list of string description of the faults that Chaos decided to execute in an iteration.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ExecutionPolicy">
            <summary>
            The execution policy of the service
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ExecutionPolicy.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ExecutionPolicyType})">
            <summary>
            Initializes a new instance of the ExecutionPolicy class.
            </summary>
            <param name="type">Enumerates the execution policy types for services.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ExecutionPolicy.Type">
            <summary>
            Gets enumerates the execution policy types for services.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ExecutionPolicyType">
            <summary>
            Defines values for ExecutionPolicyType.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ExecutionPolicyType.Default">
            <summary>
            Indicates the default execution policy, always restart the service if an exit occurs.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ExecutionPolicyType.RunToCompletion">
            <summary>
            Indicates that the service will perform its desired operation and complete successfully. If the service encounters
            failure, it will restarted based on restart policy specified. If the service completes its operation successfully,
            it will not be restarted again.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ExternalStoreProvisionApplicationTypeDescription">
            <summary>
            Describes the operation to register or provision an application type using an application package from an external
            store instead of a package uploaded to the Service Fabric image store.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ExternalStoreProvisionApplicationTypeDescription.#ctor(System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ExternalStoreProvisionApplicationTypeDescription class.
            </summary>
            <param name="applicationPackageDownloadUri">The path to the '.sfpkg' application package from where the application
            package can be downloaded using HTTP or HTTPS protocols. The application package can be stored in an external store
            that provides GET operation to download the file. Supported protocols are HTTP and HTTPS, and the path must allow
            READ access.</param>
            <param name="applicationTypeName">The application type name represents the name of the application type found in
            the application manifest.</param>
            <param name="applicationTypeVersion">The application type version represents the version of the application type
            found in the application manifest.</param>
            <param name="async">Indicates whether or not provisioning should occur asynchronously. When set to true, the
            provision operation returns when the request is accepted by the system, and the provision operation continues
            without any timeout limit. The default value is false. For large application packages, we recommend setting the
            value to true.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ExternalStoreProvisionApplicationTypeDescription.ApplicationPackageDownloadUri">
            <summary>
            Gets the path to the '.sfpkg' application package from where the application package can be downloaded using HTTP
            or HTTPS protocols. The application package can be stored in an external store that provides GET operation to
            download the file. Supported protocols are HTTP and HTTPS, and the path must allow READ access.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ExternalStoreProvisionApplicationTypeDescription.ApplicationTypeName">
            <summary>
            Gets the application type name represents the name of the application type found in the application manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ExternalStoreProvisionApplicationTypeDescription.ApplicationTypeVersion">
            <summary>
            Gets the application type version represents the version of the application type found in the application manifest.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FabricCodeVersionInfo">
            <summary>
            Information about a Service Fabric code version.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FabricCodeVersionInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FabricCodeVersionInfo class.
            </summary>
            <param name="codeVersion">The product version of Service Fabric.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FabricCodeVersionInfo.CodeVersion">
            <summary>
            Gets the product version of Service Fabric.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FabricConfigVersionInfo">
            <summary>
            Information about a Service Fabric config version.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FabricConfigVersionInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FabricConfigVersionInfo class.
            </summary>
            <param name="configVersion">The config version of Service Fabric.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FabricConfigVersionInfo.ConfigVersion">
            <summary>
            Gets the config version of Service Fabric.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FabricErrorCodes">
            <summary>
            Defines values for FabricErrorCodes.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.UNKNOWN">
            <summary>
            Unknown Error Code.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_DOES_NOT_EXIST">
            <summary>
            Requested resource/content/path does not exist.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_INVALID_PARTITION_KEY">
            <summary>
            FABRIC_E_INVALID_PARTITION_KEY.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR">
            <summary>
            FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_INVALID_ADDRESS">
            <summary>
            FABRIC_E_INVALID_ADDRESS.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_APPLICATION_NOT_UPGRADING">
            <summary>
            FABRIC_E_APPLICATION_NOT_UPGRADING.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR">
            <summary>
            FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_FABRIC_NOT_UPGRADING">
            <summary>
            FABRIC_E_FABRIC_NOT_UPGRADING.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR">
            <summary>
            FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_INVALID_CONFIGURATION">
            <summary>
            FABRIC_E_INVALID_CONFIGURATION.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_INVALID_NAME_URI">
            <summary>
            FABRIC_E_INVALID_NAME_URI.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_PATH_TOO_LONG">
            <summary>
            FABRIC_E_PATH_TOO_LONG.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_KEY_TOO_LARGE">
            <summary>
            FABRIC_E_KEY_TOO_LARGE.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED">
            <summary>
            FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_INVALID_ATOMIC_GROUP">
            <summary>
            FABRIC_E_INVALID_ATOMIC_GROUP.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_VALUE_EMPTY">
            <summary>
            FABRIC_E_VALUE_EMPTY.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_NODE_NOT_FOUND">
            <summary>
            FABRIC_E_NODE_NOT_FOUND.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_APPLICATION_TYPE_NOT_FOUND">
            <summary>
            FABRIC_E_APPLICATION_TYPE_NOT_FOUND.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_APPLICATION_NOT_FOUND">
            <summary>
            FABRIC_E_APPLICATION_NOT_FOUND.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_SERVICE_TYPE_NOT_FOUND">
            <summary>
            FABRIC_E_SERVICE_TYPE_NOT_FOUND.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_SERVICE_DOES_NOT_EXIST">
            <summary>
            FABRIC_E_SERVICE_DOES_NOT_EXIST.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND">
            <summary>
            FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND">
            <summary>
            FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_PARTITION_NOT_FOUND">
            <summary>
            FABRIC_E_PARTITION_NOT_FOUND.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_REPLICA_DOES_NOT_EXIST">
            <summary>
            FABRIC_E_REPLICA_DOES_NOT_EXIST.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST">
            <summary>
            FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND">
            <summary>
            FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_DIRECTORY_NOT_FOUND">
            <summary>
            FABRIC_E_DIRECTORY_NOT_FOUND.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_FABRIC_VERSION_NOT_FOUND">
            <summary>
            FABRIC_E_FABRIC_VERSION_NOT_FOUND.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_FILE_NOT_FOUND">
            <summary>
            FABRIC_E_FILE_NOT_FOUND.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_NAME_DOES_NOT_EXIST">
            <summary>
            FABRIC_E_NAME_DOES_NOT_EXIST.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_PROPERTY_DOES_NOT_EXIST">
            <summary>
            FABRIC_E_PROPERTY_DOES_NOT_EXIST.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_ENUMERATION_COMPLETED">
            <summary>
            FABRIC_E_ENUMERATION_COMPLETED.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_SERVICE_MANIFEST_NOT_FOUND">
            <summary>
            FABRIC_E_SERVICE_MANIFEST_NOT_FOUND.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_KEY_NOT_FOUND">
            <summary>
            FABRIC_E_KEY_NOT_FOUND.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_HEALTH_ENTITY_NOT_FOUND">
            <summary>
            FABRIC_E_HEALTH_ENTITY_NOT_FOUND.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS">
            <summary>
            FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_APPLICATION_ALREADY_EXISTS">
            <summary>
            FABRIC_E_APPLICATION_ALREADY_EXISTS.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION">
            <summary>
            FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS">
            <summary>
            FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS">
            <summary>
            FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_SERVICE_ALREADY_EXISTS">
            <summary>
            FABRIC_E_SERVICE_ALREADY_EXISTS.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS">
            <summary>
            FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_APPLICATION_TYPE_IN_USE">
            <summary>
            FABRIC_E_APPLICATION_TYPE_IN_USE.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION">
            <summary>
            FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS">
            <summary>
            FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_FABRIC_VERSION_IN_USE">
            <summary>
            FABRIC_E_FABRIC_VERSION_IN_USE.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS">
            <summary>
            FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_NAME_ALREADY_EXISTS">
            <summary>
            FABRIC_E_NAME_ALREADY_EXISTS.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_NAME_NOT_EMPTY">
            <summary>
            FABRIC_E_NAME_NOT_EMPTY.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_PROPERTY_CHECK_FAILED">
            <summary>
            FABRIC_E_PROPERTY_CHECK_FAILED.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_SERVICE_METADATA_MISMATCH">
            <summary>
            FABRIC_E_SERVICE_METADATA_MISMATCH.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_SERVICE_TYPE_MISMATCH">
            <summary>
            FABRIC_E_SERVICE_TYPE_MISMATCH.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_HEALTH_STALE_REPORT">
            <summary>
            FABRIC_E_HEALTH_STALE_REPORT.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED">
            <summary>
            FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_NODE_HAS_NOT_STOPPED_YET">
            <summary>
            FABRIC_E_NODE_HAS_NOT_STOPPED_YET.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_INSTANCE_ID_MISMATCH">
            <summary>
            FABRIC_E_INSTANCE_ID_MISMATCH.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_VALUE_TOO_LARGE">
            <summary>
            FABRIC_E_VALUE_TOO_LARGE.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_NO_WRITE_QUORUM">
            <summary>
            FABRIC_E_NO_WRITE_QUORUM.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_NOT_PRIMARY">
            <summary>
            FABRIC_E_NOT_PRIMARY.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_NOT_READY">
            <summary>
            FABRIC_E_NOT_READY.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_RECONFIGURATION_PENDING">
            <summary>
            FABRIC_E_RECONFIGURATION_PENDING.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_SERVICE_OFFLINE">
            <summary>
            FABRIC_E_SERVICE_OFFLINE.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.E_ABORT">
            <summary>
            E_ABORT.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_COMMUNICATION_ERROR">
            <summary>
            FABRIC_E_COMMUNICATION_ERROR.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_OPERATION_NOT_COMPLETE">
            <summary>
            FABRIC_E_OPERATION_NOT_COMPLETE.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_TIMEOUT">
            <summary>
            FABRIC_E_TIMEOUT.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_NODE_IS_UP">
            <summary>
            FABRIC_E_NODE_IS_UP.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.E_FAIL">
            <summary>
            E_FAIL.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_BACKUP_IS_ENABLED">
            <summary>
            FABRIC_E_BACKUP_IS_ENABLED.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH">
            <summary>
            FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_INVALID_FOR_STATELESS_SERVICES">
            <summary>
            FABRIC_E_INVALID_FOR_STATELESS_SERVICES.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_BACKUP_NOT_ENABLED">
            <summary>
            FABRIC_E_BACKUP_NOT_ENABLED.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_BACKUP_POLICY_NOT_EXISTING">
            <summary>
            FABRIC_E_BACKUP_POLICY_NOT_EXISTING.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING">
            <summary>
            FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_BACKUP_IN_PROGRESS">
            <summary>
            FABRIC_E_BACKUP_IN_PROGRESS.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_RESTORE_IN_PROGRESS">
            <summary>
            FABRIC_E_RESTORE_IN_PROGRESS.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING">
            <summary>
            FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_INVALID_SERVICE_SCALING_POLICY">
            <summary>
            FABRIC_E_INVALID_SERVICE_SCALING_POLICY.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.E_INVALIDARG">
            <summary>
            E_INVALIDARG.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS">
            <summary>
            FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND">
            <summary>
            FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_VOLUME_ALREADY_EXISTS">
            <summary>
            FABRIC_E_VOLUME_ALREADY_EXISTS.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_VOLUME_NOT_FOUND">
            <summary>
            FABRIC_E_VOLUME_NOT_FOUND.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.SerializationError">
            <summary>
            SerializationError.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricErrorCodes.FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR">
            <summary>
            FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FabricErrorError">
            <summary>
            Error object containing error code and error message.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FabricErrorError.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.FabricErrorCodes},System.String)">
            <summary>
            Initializes a new instance of the FabricErrorError class.
            </summary>
            <param name="code">Defines the fabric error codes that be returned as part of the error object in response to
            Service Fabric API operations that are not successful. Following are the error code values that can be returned for
            a specific HTTP status code.
            
            - Possible values of the error code for HTTP status code 400 (Bad Request)
            - "FABRIC_E_INVALID_PARTITION_KEY"
            - "FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR"
            - "FABRIC_E_INVALID_ADDRESS"
            - "FABRIC_E_APPLICATION_NOT_UPGRADING"
            - "FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR"
            - "FABRIC_E_FABRIC_NOT_UPGRADING"
            - "FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR"
            - "FABRIC_E_INVALID_CONFIGURATION"
            - "FABRIC_E_INVALID_NAME_URI"
            - "FABRIC_E_PATH_TOO_LONG"
            - "FABRIC_E_KEY_TOO_LARGE"
            - "FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED"
            - "FABRIC_E_INVALID_ATOMIC_GROUP"
            - "FABRIC_E_VALUE_EMPTY"
            - "FABRIC_E_BACKUP_IS_ENABLED"
            - "FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH"
            - "FABRIC_E_INVALID_FOR_STATELESS_SERVICES"
            - "FABRIC_E_INVALID_SERVICE_SCALING_POLICY"
            - "E_INVALIDARG"
            
            - Possible values of the error code for HTTP status code 404 (Not Found)
            - "FABRIC_E_NODE_NOT_FOUND"
            - "FABRIC_E_APPLICATION_TYPE_NOT_FOUND"
            - "FABRIC_E_APPLICATION_NOT_FOUND"
            - "FABRIC_E_SERVICE_TYPE_NOT_FOUND"
            - "FABRIC_E_SERVICE_DOES_NOT_EXIST"
            - "FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND"
            - "FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND"
            - "FABRIC_E_PARTITION_NOT_FOUND"
            - "FABRIC_E_REPLICA_DOES_NOT_EXIST"
            - "FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST"
            - "FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND"
            - "FABRIC_E_DIRECTORY_NOT_FOUND"
            - "FABRIC_E_FABRIC_VERSION_NOT_FOUND"
            - "FABRIC_E_FILE_NOT_FOUND"
            - "FABRIC_E_NAME_DOES_NOT_EXIST"
            - "FABRIC_E_PROPERTY_DOES_NOT_EXIST"
            - "FABRIC_E_ENUMERATION_COMPLETED"
            - "FABRIC_E_SERVICE_MANIFEST_NOT_FOUND"
            - "FABRIC_E_KEY_NOT_FOUND"
            - "FABRIC_E_HEALTH_ENTITY_NOT_FOUND"
            - "FABRIC_E_BACKUP_NOT_ENABLED"
            - "FABRIC_E_BACKUP_POLICY_NOT_EXISTING"
            - "FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING"
            - "FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR"
            
            - Possible values of the error code for HTTP status code 409 (Conflict)
            - "FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS"
            - "FABRIC_E_APPLICATION_ALREADY_EXISTS"
            - "FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION"
            - "FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS"
            - "FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS"
            - "FABRIC_E_SERVICE_ALREADY_EXISTS"
            - "FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS"
            - "FABRIC_E_APPLICATION_TYPE_IN_USE"
            - "FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION"
            - "FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS"
            - "FABRIC_E_FABRIC_VERSION_IN_USE"
            - "FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS"
            - "FABRIC_E_NAME_ALREADY_EXISTS"
            - "FABRIC_E_NAME_NOT_EMPTY"
            - "FABRIC_E_PROPERTY_CHECK_FAILED"
            - "FABRIC_E_SERVICE_METADATA_MISMATCH"
            - "FABRIC_E_SERVICE_TYPE_MISMATCH"
            - "FABRIC_E_HEALTH_STALE_REPORT"
            - "FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED"
            - "FABRIC_E_NODE_HAS_NOT_STOPPED_YET"
            - "FABRIC_E_INSTANCE_ID_MISMATCH"
            - "FABRIC_E_BACKUP_IN_PROGRESS"
            - "FABRIC_E_RESTORE_IN_PROGRESS"
            - "FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING"
            
            - Possible values of the error code for HTTP status code 413 (Request Entity Too Large)
            - "FABRIC_E_VALUE_TOO_LARGE"
            
            - Possible values of the error code for HTTP status code 500 (Internal Server Error)
            - "FABRIC_E_NODE_IS_UP"
            - "E_FAIL"
            - "FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS"
            - "FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND"
            - "FABRIC_E_VOLUME_ALREADY_EXISTS"
            - "FABRIC_E_VOLUME_NOT_FOUND"
            - "SerializationError"
            
            - Possible values of the error code for HTTP status code 503 (Service Unavailable)
            - "FABRIC_E_NO_WRITE_QUORUM"
            - "FABRIC_E_NOT_PRIMARY"
            - "FABRIC_E_NOT_READY"
            - "FABRIC_E_RECONFIGURATION_PENDING"
            - "FABRIC_E_SERVICE_OFFLINE"
            - "E_ABORT"
            - "FABRIC_E_VALUE_TOO_LARGE"
            
            - Possible values of the error code for HTTP status code 504 (Gateway Timeout)
            - "FABRIC_E_COMMUNICATION_ERROR"
            - "FABRIC_E_OPERATION_NOT_COMPLETE"
            - "FABRIC_E_TIMEOUT"
            . Possible values include: 'FABRIC_E_INVALID_PARTITION_KEY', 'FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR',
            'FABRIC_E_INVALID_ADDRESS', 'FABRIC_E_APPLICATION_NOT_UPGRADING', 'FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR',
            'FABRIC_E_FABRIC_NOT_UPGRADING', 'FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR', 'FABRIC_E_INVALID_CONFIGURATION',
            'FABRIC_E_INVALID_NAME_URI', 'FABRIC_E_PATH_TOO_LONG', 'FABRIC_E_KEY_TOO_LARGE',
            'FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED', 'FABRIC_E_INVALID_ATOMIC_GROUP', 'FABRIC_E_VALUE_EMPTY',
            'FABRIC_E_NODE_NOT_FOUND', 'FABRIC_E_APPLICATION_TYPE_NOT_FOUND', 'FABRIC_E_APPLICATION_NOT_FOUND',
            'FABRIC_E_SERVICE_TYPE_NOT_FOUND', 'FABRIC_E_SERVICE_DOES_NOT_EXIST', 'FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND',
            'FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND', 'FABRIC_E_PARTITION_NOT_FOUND', 'FABRIC_E_REPLICA_DOES_NOT_EXIST',
            'FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST', 'FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND',
            'FABRIC_E_DIRECTORY_NOT_FOUND', 'FABRIC_E_FABRIC_VERSION_NOT_FOUND', 'FABRIC_E_FILE_NOT_FOUND',
            'FABRIC_E_NAME_DOES_NOT_EXIST', 'FABRIC_E_PROPERTY_DOES_NOT_EXIST', 'FABRIC_E_ENUMERATION_COMPLETED',
            'FABRIC_E_SERVICE_MANIFEST_NOT_FOUND', 'FABRIC_E_KEY_NOT_FOUND', 'FABRIC_E_HEALTH_ENTITY_NOT_FOUND',
            'FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS', 'FABRIC_E_APPLICATION_ALREADY_EXISTS',
            'FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION', 'FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS',
            'FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS', 'FABRIC_E_SERVICE_ALREADY_EXISTS',
            'FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS', 'FABRIC_E_APPLICATION_TYPE_IN_USE',
            'FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION', 'FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS',
            'FABRIC_E_FABRIC_VERSION_IN_USE', 'FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS', 'FABRIC_E_NAME_ALREADY_EXISTS',
            'FABRIC_E_NAME_NOT_EMPTY', 'FABRIC_E_PROPERTY_CHECK_FAILED', 'FABRIC_E_SERVICE_METADATA_MISMATCH',
            'FABRIC_E_SERVICE_TYPE_MISMATCH', 'FABRIC_E_HEALTH_STALE_REPORT', 'FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED',
            'FABRIC_E_NODE_HAS_NOT_STOPPED_YET', 'FABRIC_E_INSTANCE_ID_MISMATCH', 'FABRIC_E_VALUE_TOO_LARGE',
            'FABRIC_E_NO_WRITE_QUORUM', 'FABRIC_E_NOT_PRIMARY', 'FABRIC_E_NOT_READY', 'FABRIC_E_RECONFIGURATION_PENDING',
            'FABRIC_E_SERVICE_OFFLINE', 'E_ABORT', 'FABRIC_E_COMMUNICATION_ERROR', 'FABRIC_E_OPERATION_NOT_COMPLETE',
            'FABRIC_E_TIMEOUT', 'FABRIC_E_NODE_IS_UP', 'E_FAIL', 'FABRIC_E_BACKUP_IS_ENABLED',
            'FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH', 'FABRIC_E_INVALID_FOR_STATELESS_SERVICES',
            'FABRIC_E_BACKUP_NOT_ENABLED', 'FABRIC_E_BACKUP_POLICY_NOT_EXISTING',
            'FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING', 'FABRIC_E_BACKUP_IN_PROGRESS', 'FABRIC_E_RESTORE_IN_PROGRESS',
            'FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING', 'FABRIC_E_INVALID_SERVICE_SCALING_POLICY', 'E_INVALIDARG',
            'FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS', 'FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND',
            'FABRIC_E_VOLUME_ALREADY_EXISTS', 'FABRIC_E_VOLUME_NOT_FOUND', 'SerializationError',
            'FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR'</param>
            <param name="message">Error message.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FabricErrorError.Code">
            <summary>
            Gets defines the fabric error codes that be returned as part of the error object in response to Service Fabric API
            operations that are not successful. Following are the error code values that can be returned for a specific HTTP
            status code.
            
            - Possible values of the error code for HTTP status code 400 (Bad Request)
            - "FABRIC_E_INVALID_PARTITION_KEY"
            - "FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR"
            - "FABRIC_E_INVALID_ADDRESS"
            - "FABRIC_E_APPLICATION_NOT_UPGRADING"
            - "FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR"
            - "FABRIC_E_FABRIC_NOT_UPGRADING"
            - "FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR"
            - "FABRIC_E_INVALID_CONFIGURATION"
            - "FABRIC_E_INVALID_NAME_URI"
            - "FABRIC_E_PATH_TOO_LONG"
            - "FABRIC_E_KEY_TOO_LARGE"
            - "FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED"
            - "FABRIC_E_INVALID_ATOMIC_GROUP"
            - "FABRIC_E_VALUE_EMPTY"
            - "FABRIC_E_BACKUP_IS_ENABLED"
            - "FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH"
            - "FABRIC_E_INVALID_FOR_STATELESS_SERVICES"
            - "FABRIC_E_INVALID_SERVICE_SCALING_POLICY"
            - "E_INVALIDARG"
            
            - Possible values of the error code for HTTP status code 404 (Not Found)
            - "FABRIC_E_NODE_NOT_FOUND"
            - "FABRIC_E_APPLICATION_TYPE_NOT_FOUND"
            - "FABRIC_E_APPLICATION_NOT_FOUND"
            - "FABRIC_E_SERVICE_TYPE_NOT_FOUND"
            - "FABRIC_E_SERVICE_DOES_NOT_EXIST"
            - "FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND"
            - "FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND"
            - "FABRIC_E_PARTITION_NOT_FOUND"
            - "FABRIC_E_REPLICA_DOES_NOT_EXIST"
            - "FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST"
            - "FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND"
            - "FABRIC_E_DIRECTORY_NOT_FOUND"
            - "FABRIC_E_FABRIC_VERSION_NOT_FOUND"
            - "FABRIC_E_FILE_NOT_FOUND"
            - "FABRIC_E_NAME_DOES_NOT_EXIST"
            - "FABRIC_E_PROPERTY_DOES_NOT_EXIST"
            - "FABRIC_E_ENUMERATION_COMPLETED"
            - "FABRIC_E_SERVICE_MANIFEST_NOT_FOUND"
            - "FABRIC_E_KEY_NOT_FOUND"
            - "FABRIC_E_HEALTH_ENTITY_NOT_FOUND"
            - "FABRIC_E_BACKUP_NOT_ENABLED"
            - "FABRIC_E_BACKUP_POLICY_NOT_EXISTING"
            - "FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING"
            - "FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR"
            
            - Possible values of the error code for HTTP status code 409 (Conflict)
            - "FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS"
            - "FABRIC_E_APPLICATION_ALREADY_EXISTS"
            - "FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION"
            - "FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS"
            - "FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS"
            - "FABRIC_E_SERVICE_ALREADY_EXISTS"
            - "FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS"
            - "FABRIC_E_APPLICATION_TYPE_IN_USE"
            - "FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION"
            - "FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS"
            - "FABRIC_E_FABRIC_VERSION_IN_USE"
            - "FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS"
            - "FABRIC_E_NAME_ALREADY_EXISTS"
            - "FABRIC_E_NAME_NOT_EMPTY"
            - "FABRIC_E_PROPERTY_CHECK_FAILED"
            - "FABRIC_E_SERVICE_METADATA_MISMATCH"
            - "FABRIC_E_SERVICE_TYPE_MISMATCH"
            - "FABRIC_E_HEALTH_STALE_REPORT"
            - "FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED"
            - "FABRIC_E_NODE_HAS_NOT_STOPPED_YET"
            - "FABRIC_E_INSTANCE_ID_MISMATCH"
            - "FABRIC_E_BACKUP_IN_PROGRESS"
            - "FABRIC_E_RESTORE_IN_PROGRESS"
            - "FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING"
            
            - Possible values of the error code for HTTP status code 413 (Request Entity Too Large)
            - "FABRIC_E_VALUE_TOO_LARGE"
            
            - Possible values of the error code for HTTP status code 500 (Internal Server Error)
            - "FABRIC_E_NODE_IS_UP"
            - "E_FAIL"
            - "FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS"
            - "FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND"
            - "FABRIC_E_VOLUME_ALREADY_EXISTS"
            - "FABRIC_E_VOLUME_NOT_FOUND"
            - "SerializationError"
            
            - Possible values of the error code for HTTP status code 503 (Service Unavailable)
            - "FABRIC_E_NO_WRITE_QUORUM"
            - "FABRIC_E_NOT_PRIMARY"
            - "FABRIC_E_NOT_READY"
            - "FABRIC_E_RECONFIGURATION_PENDING"
            - "FABRIC_E_SERVICE_OFFLINE"
            - "E_ABORT"
            - "FABRIC_E_VALUE_TOO_LARGE"
            
            - Possible values of the error code for HTTP status code 504 (Gateway Timeout)
            - "FABRIC_E_COMMUNICATION_ERROR"
            - "FABRIC_E_OPERATION_NOT_COMPLETE"
            - "FABRIC_E_TIMEOUT"
            . Possible values include: 'FABRIC_E_INVALID_PARTITION_KEY', 'FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR',
            'FABRIC_E_INVALID_ADDRESS', 'FABRIC_E_APPLICATION_NOT_UPGRADING', 'FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR',
            'FABRIC_E_FABRIC_NOT_UPGRADING', 'FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR', 'FABRIC_E_INVALID_CONFIGURATION',
            'FABRIC_E_INVALID_NAME_URI', 'FABRIC_E_PATH_TOO_LONG', 'FABRIC_E_KEY_TOO_LARGE',
            'FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED', 'FABRIC_E_INVALID_ATOMIC_GROUP', 'FABRIC_E_VALUE_EMPTY',
            'FABRIC_E_NODE_NOT_FOUND', 'FABRIC_E_APPLICATION_TYPE_NOT_FOUND', 'FABRIC_E_APPLICATION_NOT_FOUND',
            'FABRIC_E_SERVICE_TYPE_NOT_FOUND', 'FABRIC_E_SERVICE_DOES_NOT_EXIST', 'FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND',
            'FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND', 'FABRIC_E_PARTITION_NOT_FOUND', 'FABRIC_E_REPLICA_DOES_NOT_EXIST',
            'FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST', 'FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND',
            'FABRIC_E_DIRECTORY_NOT_FOUND', 'FABRIC_E_FABRIC_VERSION_NOT_FOUND', 'FABRIC_E_FILE_NOT_FOUND',
            'FABRIC_E_NAME_DOES_NOT_EXIST', 'FABRIC_E_PROPERTY_DOES_NOT_EXIST', 'FABRIC_E_ENUMERATION_COMPLETED',
            'FABRIC_E_SERVICE_MANIFEST_NOT_FOUND', 'FABRIC_E_KEY_NOT_FOUND', 'FABRIC_E_HEALTH_ENTITY_NOT_FOUND',
            'FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS', 'FABRIC_E_APPLICATION_ALREADY_EXISTS',
            'FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION', 'FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS',
            'FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS', 'FABRIC_E_SERVICE_ALREADY_EXISTS',
            'FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS', 'FABRIC_E_APPLICATION_TYPE_IN_USE',
            'FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION', 'FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS',
            'FABRIC_E_FABRIC_VERSION_IN_USE', 'FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS', 'FABRIC_E_NAME_ALREADY_EXISTS',
            'FABRIC_E_NAME_NOT_EMPTY', 'FABRIC_E_PROPERTY_CHECK_FAILED', 'FABRIC_E_SERVICE_METADATA_MISMATCH',
            'FABRIC_E_SERVICE_TYPE_MISMATCH', 'FABRIC_E_HEALTH_STALE_REPORT', 'FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED',
            'FABRIC_E_NODE_HAS_NOT_STOPPED_YET', 'FABRIC_E_INSTANCE_ID_MISMATCH', 'FABRIC_E_VALUE_TOO_LARGE',
            'FABRIC_E_NO_WRITE_QUORUM', 'FABRIC_E_NOT_PRIMARY', 'FABRIC_E_NOT_READY', 'FABRIC_E_RECONFIGURATION_PENDING',
            'FABRIC_E_SERVICE_OFFLINE', 'E_ABORT', 'FABRIC_E_COMMUNICATION_ERROR', 'FABRIC_E_OPERATION_NOT_COMPLETE',
            'FABRIC_E_TIMEOUT', 'FABRIC_E_NODE_IS_UP', 'E_FAIL', 'FABRIC_E_BACKUP_IS_ENABLED',
            'FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH', 'FABRIC_E_INVALID_FOR_STATELESS_SERVICES',
            'FABRIC_E_BACKUP_NOT_ENABLED', 'FABRIC_E_BACKUP_POLICY_NOT_EXISTING',
            'FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING', 'FABRIC_E_BACKUP_IN_PROGRESS', 'FABRIC_E_RESTORE_IN_PROGRESS',
            'FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING', 'FABRIC_E_INVALID_SERVICE_SCALING_POLICY', 'E_INVALIDARG',
            'FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS', 'FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND',
            'FABRIC_E_VOLUME_ALREADY_EXISTS', 'FABRIC_E_VOLUME_NOT_FOUND', 'SerializationError',
            'FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FabricErrorError.Message">
            <summary>
            Gets error message.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FabricEvent">
            <summary>
            Represents the base for all Fabric Events.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FabricEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.Nullable{Microsoft.ServiceFabric.Common.FabricEventKind},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the FabricEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="kind">The kind of FabricEvent.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FabricEvent.EventInstanceId">
            <summary>
            Gets the identifier for the FabricEvent instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FabricEvent.Category">
            <summary>
            Gets the category of event.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FabricEvent.TimeStamp">
            <summary>
            Gets the time event was logged.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FabricEvent.HasCorrelatedEvents">
            <summary>
            Gets shows there is existing related events available.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FabricEvent.Kind">
            <summary>
            Gets the kind of FabricEvent.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FabricEventKind">
            <summary>
            Defines values for FabricEventKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ClusterEvent">
            <summary>
            ClusterEvent.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ContainerInstanceEvent">
            <summary>
            ContainerInstanceEvent.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.NodeEvent">
            <summary>
            NodeEvent.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ApplicationEvent">
            <summary>
            ApplicationEvent.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ServiceEvent">
            <summary>
            ServiceEvent.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.PartitionEvent">
            <summary>
            PartitionEvent.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ReplicaEvent">
            <summary>
            ReplicaEvent.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.PartitionAnalysisEvent">
            <summary>
            PartitionAnalysisEvent.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ApplicationCreated">
            <summary>
            ApplicationCreated.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ApplicationDeleted">
            <summary>
            ApplicationDeleted.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ApplicationNewHealthReport">
            <summary>
            ApplicationNewHealthReport.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ApplicationHealthReportExpired">
            <summary>
            ApplicationHealthReportExpired.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ApplicationUpgradeCompleted">
            <summary>
            ApplicationUpgradeCompleted.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ApplicationUpgradeDomainCompleted">
            <summary>
            ApplicationUpgradeDomainCompleted.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ApplicationUpgradeRollbackCompleted">
            <summary>
            ApplicationUpgradeRollbackCompleted.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ApplicationUpgradeRollbackStarted">
            <summary>
            ApplicationUpgradeRollbackStarted.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ApplicationUpgradeStarted">
            <summary>
            ApplicationUpgradeStarted.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.DeployedApplicationNewHealthReport">
            <summary>
            DeployedApplicationNewHealthReport.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.DeployedApplicationHealthReportExpired">
            <summary>
            DeployedApplicationHealthReportExpired.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ApplicationProcessExited">
            <summary>
            ApplicationProcessExited.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ApplicationContainerInstanceExited">
            <summary>
            ApplicationContainerInstanceExited.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.NodeAborted">
            <summary>
            NodeAborted.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.NodeAddedToCluster">
            <summary>
            NodeAddedToCluster.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.NodeClosed">
            <summary>
            NodeClosed.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.NodeDeactivateCompleted">
            <summary>
            NodeDeactivateCompleted.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.NodeDeactivateStarted">
            <summary>
            NodeDeactivateStarted.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.NodeDown">
            <summary>
            NodeDown.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.NodeNewHealthReport">
            <summary>
            NodeNewHealthReport.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.NodeHealthReportExpired">
            <summary>
            NodeHealthReportExpired.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.NodeOpenSucceeded">
            <summary>
            NodeOpenSucceeded.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.NodeOpenFailed">
            <summary>
            NodeOpenFailed.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.NodeRemovedFromCluster">
            <summary>
            NodeRemovedFromCluster.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.NodeUp">
            <summary>
            NodeUp.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.PartitionNewHealthReport">
            <summary>
            PartitionNewHealthReport.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.PartitionHealthReportExpired">
            <summary>
            PartitionHealthReportExpired.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.PartitionReconfigured">
            <summary>
            PartitionReconfigured.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.PartitionPrimaryMoveAnalysis">
            <summary>
            PartitionPrimaryMoveAnalysis.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ServiceCreated">
            <summary>
            ServiceCreated.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ServiceDeleted">
            <summary>
            ServiceDeleted.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ServiceNewHealthReport">
            <summary>
            ServiceNewHealthReport.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ServiceHealthReportExpired">
            <summary>
            ServiceHealthReportExpired.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.DeployedServicePackageNewHealthReport">
            <summary>
            DeployedServicePackageNewHealthReport.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.DeployedServicePackageHealthReportExpired">
            <summary>
            DeployedServicePackageHealthReportExpired.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.StatefulReplicaNewHealthReport">
            <summary>
            StatefulReplicaNewHealthReport.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.StatefulReplicaHealthReportExpired">
            <summary>
            StatefulReplicaHealthReportExpired.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.StatelessReplicaNewHealthReport">
            <summary>
            StatelessReplicaNewHealthReport.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.StatelessReplicaHealthReportExpired">
            <summary>
            StatelessReplicaHealthReportExpired.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ClusterNewHealthReport">
            <summary>
            ClusterNewHealthReport.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ClusterHealthReportExpired">
            <summary>
            ClusterHealthReportExpired.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ClusterUpgradeCompleted">
            <summary>
            ClusterUpgradeCompleted.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ClusterUpgradeDomainCompleted">
            <summary>
            ClusterUpgradeDomainCompleted.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ClusterUpgradeRollbackCompleted">
            <summary>
            ClusterUpgradeRollbackCompleted.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ClusterUpgradeRollbackStarted">
            <summary>
            ClusterUpgradeRollbackStarted.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ClusterUpgradeStarted">
            <summary>
            ClusterUpgradeStarted.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ChaosStopped">
            <summary>
            ChaosStopped.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ChaosStarted">
            <summary>
            ChaosStarted.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ChaosCodePackageRestartScheduled">
            <summary>
            ChaosCodePackageRestartScheduled.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ChaosReplicaRemovalScheduled">
            <summary>
            ChaosReplicaRemovalScheduled.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ChaosPartitionSecondaryMoveScheduled">
            <summary>
            ChaosPartitionSecondaryMoveScheduled.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ChaosPartitionPrimaryMoveScheduled">
            <summary>
            ChaosPartitionPrimaryMoveScheduled.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ChaosReplicaRestartScheduled">
            <summary>
            ChaosReplicaRestartScheduled.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricEventKind.ChaosNodeRestartScheduled">
            <summary>
            ChaosNodeRestartScheduled.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FabricReplicaStatus">
            <summary>
            Defines values for FabricReplicaStatus.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricReplicaStatus.Invalid">
            <summary>
            Indicates that the read or write operation access status is not valid. This value is not returned to the caller.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricReplicaStatus.Down">
            <summary>
            Indicates that the replica is down.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FabricReplicaStatus.Up">
            <summary>
            Indicates that the replica is up.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FailedPropertyBatchInfo">
            <summary>
            Derived from PropertyBatchInfo. Represents the property batch failing. Contains information about the specific
            batch failure.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FailedPropertyBatchInfo.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the FailedPropertyBatchInfo class.
            </summary>
            <param name="errorMessage">The error message of the failed operation. Describes the exception thrown due to the
            first unsuccessful operation in the property batch.</param>
            <param name="operationIndex">The index of the unsuccessful operation in the property batch.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FailedPropertyBatchInfo.ErrorMessage">
            <summary>
            Gets the error message of the failed operation. Describes the exception thrown due to the first unsuccessful
            operation in the property batch.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FailedPropertyBatchInfo.OperationIndex">
            <summary>
            Gets the index of the unsuccessful operation in the property batch.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FailedUpgradeDomainProgressObject">
            <summary>
            The detailed upgrade progress for nodes in the current upgrade domain at the point of failure.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FailedUpgradeDomainProgressObject.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.NodeUpgradeProgressInfo})">
            <summary>
            Initializes a new instance of the FailedUpgradeDomainProgressObject class.
            </summary>
            <param name="domainName">The name of the upgrade domain</param>
            <param name="nodeUpgradeProgressList">List of upgrading nodes and their statuses</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FailedUpgradeDomainProgressObject.DomainName">
            <summary>
            Gets the name of the upgrade domain
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FailedUpgradeDomainProgressObject.NodeUpgradeProgressList">
            <summary>
            Gets list of upgrading nodes and their statuses
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FailureAction">
            <summary>
            Defines values for FailureAction.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FailureAction.Invalid">
            <summary>
            Indicates the failure action is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FailureAction.Rollback">
            <summary>
            The upgrade will start rolling back automatically. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FailureAction.Manual">
            <summary>
            The upgrade will switch to UnmonitoredManual upgrade mode. The value is 2.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FailureReason">
            <summary>
            Defines values for FailureReason.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FailureReason.None">
            <summary>
            Indicates the reason is invalid or unknown. All Service Fabric enumerations have the invalid type. The value is
            zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FailureReason.Interrupted">
            <summary>
            There was an external request to roll back the upgrade. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FailureReason.HealthCheck">
            <summary>
            The upgrade failed due to health policy violations. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FailureReason.UpgradeDomainTimeout">
            <summary>
            An upgrade domain took longer than the allowed upgrade domain timeout to process. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.FailureReason.OverallUpgradeTimeout">
            <summary>
            The overall upgrade took longer than the allowed upgrade timeout to process. The value is 4.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FailureUpgradeDomainProgressInfo">
            <summary>
            Information about the upgrade domain progress at the time of upgrade failure.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FailureUpgradeDomainProgressInfo.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.NodeUpgradeProgressInfo})">
            <summary>
            Initializes a new instance of the FailureUpgradeDomainProgressInfo class.
            </summary>
            <param name="domainName">The name of the upgrade domain</param>
            <param name="nodeUpgradeProgressList">List of upgrading nodes and their statuses</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FailureUpgradeDomainProgressInfo.DomainName">
            <summary>
            Gets the name of the upgrade domain
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FailureUpgradeDomainProgressInfo.NodeUpgradeProgressList">
            <summary>
            Gets list of upgrading nodes and their statuses
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FileInfo">
            <summary>
            Information about a image store file.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FileInfo.#ctor(System.String,Microsoft.ServiceFabric.Common.FileVersion,System.Nullable{System.DateTime},System.String)">
            <summary>
            Initializes a new instance of the FileInfo class.
            </summary>
            <param name="fileSize">The size of file in bytes.</param>
            <param name="fileVersion">Information about the version of image store file.</param>
            <param name="modifiedDate">The date and time when the image store file was last modified.</param>
            <param name="storeRelativePath">The file path relative to the image store root path.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FileInfo.FileSize">
            <summary>
            Gets the size of file in bytes.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FileInfo.FileVersion">
            <summary>
            Gets information about the version of image store file.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FileInfo.ModifiedDate">
            <summary>
            Gets the date and time when the image store file was last modified.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FileInfo.StoreRelativePath">
            <summary>
            Gets the file path relative to the image store root path.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FileShareBackupStorageDescription">
            <summary>
            Describes the parameters for file share storage used for storing or enumerating backups.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FileShareBackupStorageDescription.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the FileShareBackupStorageDescription class.
            </summary>
            <param name="path">UNC path of the file share where to store or enumerate backups from.</param>
            <param name="friendlyName">Friendly name for this backup storage.</param>
            <param name="primaryUserName">Primary user name to access the file share.</param>
            <param name="primaryPassword">Primary password to access the share location.</param>
            <param name="secondaryUserName">Secondary user name to access the file share.</param>
            <param name="secondaryPassword">Secondary password to access the share location</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FileShareBackupStorageDescription.Path">
            <summary>
            Gets UNC path of the file share where to store or enumerate backups from.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FileShareBackupStorageDescription.PrimaryUserName">
            <summary>
            Gets primary user name to access the file share.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FileShareBackupStorageDescription.PrimaryPassword">
            <summary>
            Gets primary password to access the share location.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FileShareBackupStorageDescription.SecondaryUserName">
            <summary>
            Gets secondary user name to access the file share.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FileShareBackupStorageDescription.SecondaryPassword">
            <summary>
            Gets secondary password to access the share location
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FileVersion">
            <summary>
            Information about the version of image store file.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FileVersion.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the FileVersion class.
            </summary>
            <param name="versionNumber">The current image store version number for the file is used in image store for checking
            whether it need to be updated.</param>
            <param name="epochDataLossNumber">The epoch data loss number of image store replica when this file entry was
            updated or created.</param>
            <param name="epochConfigurationNumber">The epoch configuration version number of the image store replica when this
            file entry was created or updated.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FileVersion.VersionNumber">
            <summary>
            Gets the current image store version number for the file is used in image store for checking whether it need to be
            updated.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FileVersion.EpochDataLossNumber">
            <summary>
            Gets the epoch data loss number of image store replica when this file entry was updated or created.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FileVersion.EpochConfigurationNumber">
            <summary>
            Gets the epoch configuration version number of the image store replica when this file entry was created or updated.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FolderInfo">
            <summary>
            Information about a image store folder. It includes how many files this folder contains and its image store
            relative path.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FolderInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the FolderInfo class.
            </summary>
            <param name="storeRelativePath">The remote location within image store. This path is relative to the image store
            root.</param>
            <param name="fileCount">The number of files from within the image store folder.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FolderInfo.StoreRelativePath">
            <summary>
            Gets the remote location within image store. This path is relative to the image store root.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FolderInfo.FileCount">
            <summary>
            Gets the number of files from within the image store folder.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FolderSizeInfo">
            <summary>
            Information of a image store folder size
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FolderSizeInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the FolderSizeInfo class.
            </summary>
            <param name="storeRelativePath">The remote location within image store. This path is relative to the image store
            root.</param>
            <param name="folderSize">The size of folder in bytes.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FolderSizeInfo.StoreRelativePath">
            <summary>
            Gets the remote location within image store. This path is relative to the image store root.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FolderSizeInfo.FolderSize">
            <summary>
            Gets the size of folder in bytes.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.FrequencyBasedBackupScheduleDescription">
            <summary>
            Describes the frequency based backup schedule.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.FrequencyBasedBackupScheduleDescription.#ctor(System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the FrequencyBasedBackupScheduleDescription class.
            </summary>
            <param name="interval">Defines the interval with which backups are periodically taken. It should be specified in
            ISO8601 format. Timespan in seconds is not supported and will be ignored while creating the policy.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.FrequencyBasedBackupScheduleDescription.Interval">
            <summary>
            Gets defines the interval with which backups are periodically taken. It should be specified in ISO8601 format.
            Timespan in seconds is not supported and will be ignored while creating the policy.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.GatewayDestination">
            <summary>
            Describes destination endpoint for routing traffic.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.GatewayDestination.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the GatewayDestination class.
            </summary>
            <param name="applicationName">Name of the service fabric Mesh application.</param>
            <param name="serviceName">service that contains the endpoint.</param>
            <param name="endpointName">name of the endpoint in the service.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GatewayDestination.ApplicationName">
            <summary>
            Gets name of the service fabric Mesh application.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GatewayDestination.ServiceName">
            <summary>
            Gets service that contains the endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GatewayDestination.EndpointName">
            <summary>
            Gets name of the endpoint in the service.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.GatewayProperties">
            <summary>
            Describes properties of a gateway resource.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.GatewayProperties.#ctor(Microsoft.ServiceFabric.Common.NetworkRef,Microsoft.ServiceFabric.Common.NetworkRef,System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.TcpConfig},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HttpConfig})">
            <summary>
            Initializes a new instance of the GatewayProperties class.
            </summary>
            <param name="sourceNetwork">Network the gateway should listen on for requests.</param>
            <param name="destinationNetwork">Network that the Application is using.</param>
            <param name="description">User readable description of the gateway.</param>
            <param name="tcp">Configuration for tcp connectivity for this gateway.</param>
            <param name="http">Configuration for http connectivity for this gateway.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GatewayProperties.Description">
            <summary>
            Gets user readable description of the gateway.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GatewayProperties.SourceNetwork">
            <summary>
            Gets network the gateway should listen on for requests.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GatewayProperties.DestinationNetwork">
            <summary>
            Gets network that the Application is using.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GatewayProperties.Tcp">
            <summary>
            Gets configuration for tcp connectivity for this gateway.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GatewayProperties.Http">
            <summary>
            Gets configuration for http connectivity for this gateway.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GatewayProperties.Status">
            <summary>
            Gets status of the resource. Possible values include: 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting',
            'Failed'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GatewayProperties.StatusDetails">
            <summary>
            Gets additional information about the current status of the gateway.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GatewayProperties.IpAddress">
            <summary>
            Gets IP address of the gateway. This is populated in the response and is ignored for incoming requests.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.GatewayResourceDescription">
            <summary>
            This type describes a gateway resource.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.GatewayResourceDescription.#ctor(System.String,Microsoft.ServiceFabric.Common.GatewayProperties)">
            <summary>
            Initializes a new instance of the GatewayResourceDescription class.
            </summary>
            <param name="name">Name of the Gateway resource.</param>
            <param name="properties">Describes properties of a gateway resource.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GatewayResourceDescription.Name">
            <summary>
            Gets name of the Gateway resource.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GatewayResourceDescription.Properties">
            <summary>
            Gets properties of a gateway resource.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.GetBackupByStorageQueryDescription">
            <summary>
            Describes additional filters to be applied, while listing backups, and backup storage details from where to fetch
            the backups.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.GetBackupByStorageQueryDescription.#ctor(Microsoft.ServiceFabric.Common.BackupStorageDescription,Microsoft.ServiceFabric.Common.BackupEntity,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the GetBackupByStorageQueryDescription class.
            </summary>
            <param name="storage">Describes the parameters for the backup storage from where to enumerate backups. This is
            optional and by default backups are enumerated from the backup storage where this backup entity is currently being
            backed up (as specified in backup policy). This parameter is useful to be able to enumerate backups from another
            cluster where you may intend to restore.</param>
            <param name="backupEntity">Indicates the entity for which to enumerate backups.</param>
            <param name="startDateTimeFilter">Specifies the start date time in ISO8601 from which to enumerate backups. If not
            specified, backups are enumerated from the beginning.</param>
            <param name="endDateTimeFilter">Specifies the end date time in ISO8601 till which to enumerate backups. If not
            specified, backups are enumerated till the end.</param>
            <param name="latest">If specified as true, gets the most recent backup (within the specified time range) for every
            partition under the specified backup entity.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GetBackupByStorageQueryDescription.StartDateTimeFilter">
            <summary>
            Gets specifies the start date time in ISO8601 from which to enumerate backups. If not specified, backups are
            enumerated from the beginning.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GetBackupByStorageQueryDescription.EndDateTimeFilter">
            <summary>
            Gets specifies the end date time in ISO8601 till which to enumerate backups. If not specified, backups are
            enumerated till the end.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GetBackupByStorageQueryDescription.Latest">
            <summary>
            Gets if specified as true, gets the most recent backup (within the specified time range) for every partition under
            the specified backup entity.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GetBackupByStorageQueryDescription.Storage">
            <summary>
            Gets the parameters for the backup storage from where to enumerate backups. This is optional and by default backups
            are enumerated from the backup storage where this backup entity is currently being backed up (as specified in
            backup policy). This parameter is useful to be able to enumerate backups from another cluster where you may intend
            to restore.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GetBackupByStorageQueryDescription.BackupEntity">
            <summary>
            Gets indicates the entity for which to enumerate backups.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.GetPropertyBatchOperation">
            <summary>
            Represents a PropertyBatchOperation that gets the specified property if it exists.
            Note that if one PropertyBatchOperation in a PropertyBatch fails,
            the entire batch fails and cannot be committed in a transactional manner.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.GetPropertyBatchOperation.#ctor(System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the GetPropertyBatchOperation class.
            </summary>
            <param name="propertyName">The name of the Service Fabric property.</param>
            <param name="includeValue">Whether or not to return the property value with the metadata.
            True if values should be returned with the metadata; False to return only property metadata.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GetPropertyBatchOperation.IncludeValue">
            <summary>
            Gets whether or not to return the property value with the metadata.
            True if values should be returned with the metadata; False to return only property metadata.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.GuidPropertyValue">
            <summary>
            Describes a Service Fabric property value of type Guid.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.GuidPropertyValue.#ctor(System.Nullable{System.Guid})">
            <summary>
            Initializes a new instance of the GuidPropertyValue class.
            </summary>
            <param name="data">The data of the property value.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.GuidPropertyValue.Data">
            <summary>
            Gets the data of the property value.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.HeaderMatchType">
            <summary>
            Defines values for HeaderMatchType.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HeaderMatchType.Exact">
            <summary>
            exact.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.HealthEvaluation">
            <summary>
            Represents a health evaluation which describes the data and the algorithm used by health manager to evaluate the
            health of an entity.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.HealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthEvaluationKind},System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String)">
            <summary>
            Initializes a new instance of the HealthEvaluation class.
            </summary>
            <param name="kind">The health manager in the cluster performs health evaluations in determining the aggregated
            health state of an entity. This enumeration provides information on the kind of evaluation that was performed.
            Following are the possible values.</param>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthEvaluation.AggregatedHealthState">
            <summary>
            Gets the health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica
            etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthEvaluation.Description">
            <summary>
            Gets description of the health evaluation, which represents a summary of the evaluation process.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthEvaluation.Kind">
            <summary>
            Gets the health manager in the cluster performs health evaluations in determining the aggregated health state of an
            entity. This enumeration provides information on the kind of evaluation that was performed. Following are the
            possible values.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.HealthEvaluationKind">
            <summary>
            Defines values for HealthEvaluationKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.Invalid">
            <summary>
            Indicates that the health evaluation is invalid. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.Event">
            <summary>
            Indicates that the health evaluation is for a health event. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.Replicas">
            <summary>
            Indicates that the health evaluation is for the replicas of a partition. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.Partitions">
            <summary>
            Indicates that the health evaluation is for the partitions of a service. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.DeployedServicePackages">
            <summary>
            Indicates that the health evaluation is for the deployed service packages of a deployed application. The value is
            4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.DeployedApplications">
            <summary>
            Indicates that the health evaluation is for the deployed applications of an application. The value is 5.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.Services">
            <summary>
            Indicates that the health evaluation is for services of an application. The value is 6.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.Nodes">
            <summary>
            Indicates that the health evaluation is for the cluster nodes. The value is 7.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.Applications">
            <summary>
            Indicates that the health evaluation is for the cluster applications. The value is 8.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.SystemApplication">
            <summary>
            Indicates that the health evaluation is for the system application. The value is 9.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.UpgradeDomainDeployedApplications">
            <summary>
            Indicates that the health evaluation is for the deployed applications of an application in an upgrade domain. The
            value is 10.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.UpgradeDomainNodes">
            <summary>
            Indicates that the health evaluation is for the cluster nodes in an upgrade domain. The value is 11.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.Replica">
            <summary>
            Indicates that the health evaluation is for a replica. The value is 13.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.Partition">
            <summary>
            Indicates that the health evaluation is for a partition. The value is 14.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.DeployedServicePackage">
            <summary>
            Indicates that the health evaluation is for a deployed service package. The value is 16.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.DeployedApplication">
            <summary>
            Indicates that the health evaluation is for a deployed application. The value is 17.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.Service">
            <summary>
            Indicates that the health evaluation is for a service. The value is 15.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.Node">
            <summary>
            Indicates that the health evaluation is for a node. The value is 12.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.Application">
            <summary>
            Indicates that the health evaluation is for an application. The value is 18.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.DeltaNodesCheck">
            <summary>
            Indicates that the health evaluation is for the delta of unhealthy cluster nodes. The value is 19.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.UpgradeDomainDeltaNodesCheck">
            <summary>
            Indicates that the health evaluation is for the delta of unhealthy upgrade domain cluster nodes. The value is 20.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.ApplicationTypeApplications">
            <summary>
            – Indicates that the health evaluation is for applications of an application type. The value is 21.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthEvaluationKind.NodeTypeNodes">
            <summary>
            – Indicates that the health evaluation is for nodes of a node type. The value is 22.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.HealthEvaluationWrapper">
            <summary>
            Wrapper object for health evaluation.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.HealthEvaluationWrapper.#ctor(Microsoft.ServiceFabric.Common.HealthEvaluation)">
            <summary>
            Initializes a new instance of the HealthEvaluationWrapper class.
            </summary>
            <param name="healthEvaluation">Represents a health evaluation which describes the data and the algorithm used by
            health manager to evaluate the health of an entity.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthEvaluationWrapper.HealthEvaluation">
            <summary>
            Gets represents a health evaluation which describes the data and the algorithm used by health manager to evaluate
            the health of an entity.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.HealthEvent">
            <summary>
            Represents health information reported on a health entity, such as cluster, application or node, with additional
            metadata added by the Health Manager.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.HealthEvent.#ctor(System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Nullable{System.TimeSpan},System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the HealthEvent class.
            </summary>
            <param name="sourceId">The source name that identifies the client/watchdog/system component that generated the
            health information.
            </param>
            <param name="property">The property of the health information. An entity can have health reports for different
            properties.
            The property is a string and not a fixed enumeration to allow the reporter flexibility to categorize the state
            condition that triggers the report.
            For example, a reporter with SourceId "LocalWatchdog" can monitor the state of the available disk on a node,
            so it can report "AvailableDisk" property on that node.
            The same reporter can monitor the node connectivity, so it can report a property "Connectivity" on the same node.
            In the health store, these reports are treated as separate health events for the specified node.
            
            Together with the SourceId, the property uniquely identifies the health information.
            </param>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="timeToLiveInMilliSeconds">The duration for which this health report is valid. This field uses ISO8601
            format for specifying the duration.
            When clients report periodically, they should send reports with higher frequency than time to live.
            If clients report on transition, they can set the time to live to infinite.
            When time to live expires, the health event that contains the health information
            is either removed from health store, if RemoveWhenExpired is true, or evaluated at error, if RemoveWhenExpired
            false.
            
            If not specified, time to live defaults to infinite value.
            </param>
            <param name="description">The description of the health information. It represents free text used to add human
            readable information about the report.
            The maximum string length for the description is 4096 characters.
            If the provided string is longer, it will be automatically truncated.
            When truncated, the last characters of the description contain a marker "[Truncated]", and total string size is
            4096 characters.
            The presence of the marker indicates to users that truncation occurred.
            Note that when truncated, the description has less than 4096 characters from the original string.
            </param>
            <param name="sequenceNumber">The sequence number for this health report as a numeric string.
            The report sequence number is used by the health store to detect stale reports.
            If not specified, a sequence number is auto-generated by the health client when a report is added.
            </param>
            <param name="removeWhenExpired">Value that indicates whether the report is removed from health store when it
            expires.
            If set to true, the report is removed from the health store after it expires.
            If set to false, the report is treated as an error when expired. The value of this property is false by default.
            When clients report periodically, they should set RemoveWhenExpired false (default).
            This way, if the reporter has issues (e.g. deadlock) and can't report, the entity is evaluated at error when the
            health report expires.
            This flags the entity as being in Error health state.
            </param>
            <param name="healthReportId">A health report ID which identifies the health report and can be used to find more
            detailed information about a specific health event at
            aka.ms/sfhealthid
            </param>
            <param name="isExpired">Returns true if the health event is expired, otherwise false.</param>
            <param name="sourceUtcTimestamp">The date and time when the health report was sent by the source.</param>
            <param name="lastModifiedUtcTimestamp">The date and time when the health report was last modified by the health
            store.</param>
            <param name="lastOkTransitionAt">If the current health state is 'Ok', this property returns the time at which the
            health report was first reported with 'Ok'.
            For periodic reporting, many reports with the same state may have been generated.
            This property returns the date and time when the first 'Ok' health report was received.
            
            If the current health state is 'Error' or 'Warning', returns the date and time at which the health state was last
            in 'Ok', before transitioning to a different state.
            
            If the health state was never 'Ok', the value will be zero date-time.
            </param>
            <param name="lastWarningTransitionAt">If the current health state is 'Warning', this property returns the time at
            which the health report was first reported with 'Warning'. For periodic reporting, many reports with the same state
            may have been generated however, this property returns only the date and time at the first 'Warning' health report
            was received.
            
            If the current health state is 'Ok' or 'Error', returns the date and time at which the health state was last in
            'Warning', before transitioning to a different state.
            
            If the health state was never 'Warning', the value will be zero date-time.
            </param>
            <param name="lastErrorTransitionAt">If the current health state is 'Error', this property returns the time at which
            the health report was first reported with 'Error'. For periodic reporting, many reports with the same state may
            have been generated however, this property returns only the date and time at the first 'Error' health report was
            received.
            
            If the current health state is 'Ok' or 'Warning', returns the date and time at which the health state was last in
            'Error', before transitioning to a different state.
            
            If the health state was never 'Error', the value will be zero date-time.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthEvent.IsExpired">
            <summary>
            Gets returns true if the health event is expired, otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthEvent.SourceUtcTimestamp">
            <summary>
            Gets the date and time when the health report was sent by the source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthEvent.LastModifiedUtcTimestamp">
            <summary>
            Gets the date and time when the health report was last modified by the health store.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthEvent.LastOkTransitionAt">
            <summary>
            Gets if the current health state is 'Ok', this property returns the time at which the health report was first
            reported with 'Ok'.
            For periodic reporting, many reports with the same state may have been generated.
            This property returns the date and time when the first 'Ok' health report was received.
            
            If the current health state is 'Error' or 'Warning', returns the date and time at which the health state was last
            in 'Ok', before transitioning to a different state.
            
            If the health state was never 'Ok', the value will be zero date-time.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthEvent.LastWarningTransitionAt">
            <summary>
            Gets if the current health state is 'Warning', this property returns the time at which the health report was first
            reported with 'Warning'. For periodic reporting, many reports with the same state may have been generated however,
            this property returns only the date and time at the first 'Warning' health report was received.
            
            If the current health state is 'Ok' or 'Error', returns the date and time at which the health state was last in
            'Warning', before transitioning to a different state.
            
            If the health state was never 'Warning', the value will be zero date-time.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthEvent.LastErrorTransitionAt">
            <summary>
            Gets if the current health state is 'Error', this property returns the time at which the health report was first
            reported with 'Error'. For periodic reporting, many reports with the same state may have been generated however,
            this property returns only the date and time at the first 'Error' health report was received.
            
            If the current health state is 'Ok' or 'Warning', returns the date and time at which the health state was last in
            'Error', before transitioning to a different state.
            
            If the health state was never 'Error', the value will be zero date-time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.HealthInformation">
            <summary>
            Represents common health report information. It is included in all health reports sent to health store and in all
            health events returned by health queries.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.HealthInformation.#ctor(System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Nullable{System.TimeSpan},System.String,System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the HealthInformation class.
            </summary>
            <param name="sourceId">The source name that identifies the client/watchdog/system component that generated the
            health information.
            </param>
            <param name="property">The property of the health information. An entity can have health reports for different
            properties.
            The property is a string and not a fixed enumeration to allow the reporter flexibility to categorize the state
            condition that triggers the report.
            For example, a reporter with SourceId "LocalWatchdog" can monitor the state of the available disk on a node,
            so it can report "AvailableDisk" property on that node.
            The same reporter can monitor the node connectivity, so it can report a property "Connectivity" on the same node.
            In the health store, these reports are treated as separate health events for the specified node.
            
            Together with the SourceId, the property uniquely identifies the health information.
            </param>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="timeToLiveInMilliSeconds">The duration for which this health report is valid. This field uses ISO8601
            format for specifying the duration.
            When clients report periodically, they should send reports with higher frequency than time to live.
            If clients report on transition, they can set the time to live to infinite.
            When time to live expires, the health event that contains the health information
            is either removed from health store, if RemoveWhenExpired is true, or evaluated at error, if RemoveWhenExpired
            false.
            
            If not specified, time to live defaults to infinite value.
            </param>
            <param name="description">The description of the health information. It represents free text used to add human
            readable information about the report.
            The maximum string length for the description is 4096 characters.
            If the provided string is longer, it will be automatically truncated.
            When truncated, the last characters of the description contain a marker "[Truncated]", and total string size is
            4096 characters.
            The presence of the marker indicates to users that truncation occurred.
            Note that when truncated, the description has less than 4096 characters from the original string.
            </param>
            <param name="sequenceNumber">The sequence number for this health report as a numeric string.
            The report sequence number is used by the health store to detect stale reports.
            If not specified, a sequence number is auto-generated by the health client when a report is added.
            </param>
            <param name="removeWhenExpired">Value that indicates whether the report is removed from health store when it
            expires.
            If set to true, the report is removed from the health store after it expires.
            If set to false, the report is treated as an error when expired. The value of this property is false by default.
            When clients report periodically, they should set RemoveWhenExpired false (default).
            This way, if the reporter has issues (e.g. deadlock) and can't report, the entity is evaluated at error when the
            health report expires.
            This flags the entity as being in Error health state.
            </param>
            <param name="healthReportId">A health report ID which identifies the health report and can be used to find more
            detailed information about a specific health event at
            aka.ms/sfhealthid
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthInformation.SourceId">
            <summary>
            Gets the source name that identifies the client/watchdog/system component that generated the health information.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthInformation.Property">
            <summary>
            Gets the property of the health information. An entity can have health reports for different properties.
            The property is a string and not a fixed enumeration to allow the reporter flexibility to categorize the state
            condition that triggers the report.
            For example, a reporter with SourceId "LocalWatchdog" can monitor the state of the available disk on a node,
            so it can report "AvailableDisk" property on that node.
            The same reporter can monitor the node connectivity, so it can report a property "Connectivity" on the same node.
            In the health store, these reports are treated as separate health events for the specified node.
            
            Together with the SourceId, the property uniquely identifies the health information.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthInformation.HealthState">
            <summary>
            Gets the health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica
            etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthInformation.TimeToLiveInMilliSeconds">
            <summary>
            Gets the duration for which this health report is valid. This field uses ISO8601 format for specifying the
            duration.
            When clients report periodically, they should send reports with higher frequency than time to live.
            If clients report on transition, they can set the time to live to infinite.
            When time to live expires, the health event that contains the health information
            is either removed from health store, if RemoveWhenExpired is true, or evaluated at error, if RemoveWhenExpired
            false.
            
            If not specified, time to live defaults to infinite value.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthInformation.Description">
            <summary>
            Gets the description of the health information. It represents free text used to add human readable information
            about the report.
            The maximum string length for the description is 4096 characters.
            If the provided string is longer, it will be automatically truncated.
            When truncated, the last characters of the description contain a marker "[Truncated]", and total string size is
            4096 characters.
            The presence of the marker indicates to users that truncation occurred.
            Note that when truncated, the description has less than 4096 characters from the original string.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthInformation.SequenceNumber">
            <summary>
            Gets the sequence number for this health report as a numeric string.
            The report sequence number is used by the health store to detect stale reports.
            If not specified, a sequence number is auto-generated by the health client when a report is added.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthInformation.RemoveWhenExpired">
            <summary>
            Gets value that indicates whether the report is removed from health store when it expires.
            If set to true, the report is removed from the health store after it expires.
            If set to false, the report is treated as an error when expired. The value of this property is false by default.
            When clients report periodically, they should set RemoveWhenExpired false (default).
            This way, if the reporter has issues (e.g. deadlock) and can't report, the entity is evaluated at error when the
            health report expires.
            This flags the entity as being in Error health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthInformation.HealthReportId">
            <summary>
            Gets a health report ID which identifies the health report and can be used to find more detailed information about
            a specific health event at
            aka.ms/sfhealthid
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.HealthState">
            <summary>
            Defines values for HealthState.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthState.Invalid">
            <summary>
            Indicates an invalid health state. All Service Fabric enumerations have the invalid type. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthState.Ok">
            <summary>
            Indicates the health state is okay. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthState.Warning">
            <summary>
            Indicates the health state is at a warning level. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthState.Error">
            <summary>
            Indicates the health state is at an error level. Error health state should be investigated, as they can impact the
            correct functionality of the cluster. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HealthState.Unknown">
            <summary>
            Indicates an unknown health status. The value is 65535.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.HealthStateCount">
            <summary>
            Represents information about how many health entities are in Ok, Warning and Error health state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.HealthStateCount.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the HealthStateCount class.
            </summary>
            <param name="okCount">The number of health entities with aggregated health state Ok.</param>
            <param name="warningCount">The number of health entities with aggregated health state Warning.</param>
            <param name="errorCount">The number of health entities with aggregated health state Error.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthStateCount.OkCount">
            <summary>
            Gets the number of health entities with aggregated health state Ok.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthStateCount.WarningCount">
            <summary>
            Gets the number of health entities with aggregated health state Warning.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthStateCount.ErrorCount">
            <summary>
            Gets the number of health entities with aggregated health state Error.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.HealthStatistics">
            <summary>
            The health statistics of an entity, returned as part of the health query result when the query description is
            configured to include statistics.
            The statistics include health state counts for all children types of the current entity.
            For example, for cluster, the health statistics include health state counts for nodes, applications, services,
            partitions, replicas, deployed applications and deployed service packages.
            For partition, the health statistics include health counts for replicas.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.HealthStatistics.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.EntityKindHealthStateCount})">
            <summary>
            Initializes a new instance of the HealthStatistics class.
            </summary>
            <param name="healthStateCountList">List of health state counts per entity kind, which keeps track of how many
            children of the queried entity are in Ok, Warning and Error state.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HealthStatistics.HealthStateCountList">
            <summary>
            Gets list of health state counts per entity kind, which keeps track of how many children of the queried entity are
            in Ok, Warning and Error state.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.HostIsolationMode">
            <summary>
            Defines values for HostIsolationMode.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HostIsolationMode.None">
            <summary>
            Indicates the isolation mode is not applicable for given HostType. The value is 0.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HostIsolationMode.Process">
            <summary>
            This is the default isolation mode for a ContainerHost. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HostIsolationMode.HyperV">
            <summary>
            Indicates the ContainerHost is a Hyper-V container. This applies to only Windows containers. The value is 2.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.HostType">
            <summary>
            Defines values for HostType.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HostType.Invalid">
            <summary>
            Indicates the type of host is not known or invalid. The value is 0.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HostType.ExeHost">
            <summary>
            Indicates the host is an executable. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.HostType.ContainerHost">
            <summary>
            Indicates the host is a container. The value is 2.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.HttpConfig">
            <summary>
            Describes the http configuration for external connectivity for this network.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.HttpConfig.#ctor(System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HttpHostConfig})">
            <summary>
            Initializes a new instance of the HttpConfig class.
            </summary>
            <param name="name">http gateway config name.</param>
            <param name="port">Specifies the port at which the service endpoint below needs to be exposed.</param>
            <param name="hosts">description for routing.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HttpConfig.Name">
            <summary>
            Gets http gateway config name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HttpConfig.Port">
            <summary>
            Gets specifies the port at which the service endpoint below needs to be exposed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HttpConfig.Hosts">
            <summary>
            Gets description for routing.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.HttpHostConfig">
            <summary>
            Describes the hostname properties for http routing.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.HttpHostConfig.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HttpRouteConfig})">
            <summary>
            Initializes a new instance of the HttpHostConfig class.
            </summary>
            <param name="name">http hostname config name.</param>
            <param name="routes">Route information to use for routing. Routes are processed in the order they are specified.
            Specify routes that are more specific before routes that can handle general cases.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HttpHostConfig.Name">
            <summary>
            Gets http hostname config name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HttpHostConfig.Routes">
            <summary>
            Gets route information to use for routing. Routes are processed in the order they are specified. Specify routes
            that are more specific before routes that can handle general cases.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.HttpRouteConfig">
            <summary>
            Describes the hostname properties for http routing.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.HttpRouteConfig.#ctor(System.String,Microsoft.ServiceFabric.Common.HttpRouteMatchRule,Microsoft.ServiceFabric.Common.GatewayDestination)">
            <summary>
            Initializes a new instance of the HttpRouteConfig class.
            </summary>
            <param name="name">http route name.</param>
            <param name="match">Describes a rule for http route matching.</param>
            <param name="destination">Describes destination endpoint for routing traffic.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HttpRouteConfig.Name">
            <summary>
            Gets http route name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HttpRouteConfig.Match">
            <summary>
            Gets a rule for http route matching.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HttpRouteConfig.Destination">
            <summary>
            Gets destination endpoint for routing traffic.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.HttpRouteMatchHeader">
            <summary>
            Describes header information for http route matching.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.HttpRouteMatchHeader.#ctor(System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.HeaderMatchType})">
            <summary>
            Initializes a new instance of the HttpRouteMatchHeader class.
            </summary>
            <param name="name">Name of header to match in request.</param>
            <param name="value">Value of header to match in request.</param>
            <param name="type">how to match header value. Possible values include: 'exact'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HttpRouteMatchHeader.Name">
            <summary>
            Gets name of header to match in request.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HttpRouteMatchHeader.Value">
            <summary>
            Gets value of header to match in request.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HttpRouteMatchHeader.Type">
            <summary>
            Gets how to match header value. Possible values include: 'exact'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.HttpRouteMatchPath">
            <summary>
            Path to match for routing.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.HttpRouteMatchPath.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the HttpRouteMatchPath class.
            </summary>
            <param name="value">Uri path to match for request.</param>
            <param name="rewrite">replacement string for matched part of the Uri.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HttpRouteMatchPath.Value">
            <summary>
            Gets uri path to match for request.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HttpRouteMatchPath.Rewrite">
            <summary>
            Gets replacement string for matched part of the Uri.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.HttpRouteMatchRule">
            <summary>
            Describes a rule for http route matching.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.HttpRouteMatchRule.#ctor(Microsoft.ServiceFabric.Common.HttpRouteMatchPath,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HttpRouteMatchHeader})">
            <summary>
            Initializes a new instance of the HttpRouteMatchRule class.
            </summary>
            <param name="path">Path to match for routing.</param>
            <param name="headers">headers and their values to match in request.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HttpRouteMatchRule.Path">
            <summary>
            Gets path to match for routing.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.HttpRouteMatchRule.Headers">
            <summary>
            Gets headers and their values to match in request.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.IdentityDescription">
            <summary>
            Information describing the identities associated with this application.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.IdentityDescription.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.ServiceFabric.Common.IdentityItemDescription})">
            <summary>
            Initializes a new instance of the IdentityDescription class.
            </summary>
            <param name="type">the types of identities associated with this resource; currently restricted to 'SystemAssigned
            and UserAssigned'</param>
            <param name="tokenServiceEndpoint">the endpoint for the token service managing this identity</param>
            <param name="tenantId">the identifier of the tenant containing the application's identity.</param>
            <param name="principalId">the object identifier of the Service Principal of the identity associated with this
            resource.</param>
            <param name="userAssignedIdentities">represents user assigned identities map.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.IdentityDescription.TokenServiceEndpoint">
            <summary>
            Gets the endpoint for the token service managing this identity
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.IdentityDescription.Type">
            <summary>
            Gets the types of identities associated with this resource; currently restricted to 'SystemAssigned and
            UserAssigned'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.IdentityDescription.TenantId">
            <summary>
            Gets the identifier of the tenant containing the application's identity.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.IdentityDescription.PrincipalId">
            <summary>
            Gets the object identifier of the Service Principal of the identity associated with this resource.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.IdentityDescription.UserAssignedIdentities">
            <summary>
            Gets represents user assigned identities map.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.IdentityItemDescription">
            <summary>
            Describes a single user-assigned identity associated with the application.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.IdentityItemDescription.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the IdentityItemDescription class.
            </summary>
            <param name="principalId">the object identifier of the Service Principal which this identity represents.</param>
            <param name="clientId">the client identifier of the Service Principal which this identity represents.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.IdentityItemDescription.PrincipalId">
            <summary>
            Gets the object identifier of the Service Principal which this identity represents.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.IdentityItemDescription.ClientId">
            <summary>
            Gets the client identifier of the Service Principal which this identity represents.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ImageRegistryCredential">
            <summary>
            Image registry credential.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ImageRegistryCredential.#ctor(System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.ImageRegistryPasswordType},System.String)">
            <summary>
            Initializes a new instance of the ImageRegistryCredential class.
            </summary>
            <param name="server">Docker image registry server, without protocol such as `http` and `https`.</param>
            <param name="username">The username for the private registry.</param>
            <param name="passwordType">The type of the image registry password being given in password. Possible values
            include: 'ClearText', 'KeyVaultReference', 'SecretValueReference'</param>
            <param name="password">The password for the private registry. The password is required for create or update
            operations, however it is not returned in the get or list operations. Will be processed based on the type
            provided.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ImageRegistryCredential.Server">
            <summary>
            Gets docker image registry server, without protocol such as `http` and `https`.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ImageRegistryCredential.Username">
            <summary>
            Gets the username for the private registry.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ImageRegistryCredential.PasswordType">
            <summary>
            Gets the type of the image registry password being given in password. Possible values include: 'ClearText',
            'KeyVaultReference', 'SecretValueReference'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ImageRegistryCredential.Password">
            <summary>
            Gets the password for the private registry. The password is required for create or update operations, however it is
            not returned in the get or list operations. Will be processed based on the type provided.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ImageRegistryPasswordType">
            <summary>
            Defines values for ImageRegistryPasswordType.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ImageRegistryPasswordType.ClearText">
            <summary>
            The image registry password in clear text, will not be processed in any way and used directly.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ImageRegistryPasswordType.KeyVaultReference">
            <summary>
            The URI to a KeyVault secret version, will be resolved using the application's managed identity (this type is only
            valid if the app was assigned a managed identity) before getting used.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ImageRegistryPasswordType.SecretValueReference">
            <summary>
            The reference to a SecretValue resource, will be resolved before getting used.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ImageStoreContent">
            <summary>
            Information about the image store content.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ImageStoreContent.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.FileInfo},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.FolderInfo})">
            <summary>
            Initializes a new instance of the ImageStoreContent class.
            </summary>
            <param name="storeFiles">The list of image store file info objects represents files found under the given image
            store relative path.</param>
            <param name="storeFolders">The list of image store folder info objects represents subfolders found under the given
            image store relative path.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ImageStoreContent.StoreFiles">
            <summary>
            Gets the list of image store file info objects represents files found under the given image store relative path.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ImageStoreContent.StoreFolders">
            <summary>
            Gets the list of image store folder info objects represents subfolders found under the given image store relative
            path.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ImageStoreCopyDescription">
            <summary>
            Information about how to copy image store content from one image store relative path to another image store
            relative path.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ImageStoreCopyDescription.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ImageStoreCopyDescription class.
            </summary>
            <param name="remoteSource">The relative path of source image store content to be copied from.</param>
            <param name="remoteDestination">The relative path of destination image store content to be copied to.</param>
            <param name="skipFiles">The list of the file names to be skipped for copying.</param>
            <param name="checkMarkFile">Indicates whether to check mark file during copying. The property is true if checking
            mark file is required, false otherwise. The mark file is used to check whether the folder is well constructed. If
            the property is true and mark file does not exist, the copy is skipped.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ImageStoreCopyDescription.RemoteSource">
            <summary>
            Gets the relative path of source image store content to be copied from.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ImageStoreCopyDescription.RemoteDestination">
            <summary>
            Gets the relative path of destination image store content to be copied to.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ImageStoreCopyDescription.SkipFiles">
            <summary>
            Gets the list of the file names to be skipped for copying.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ImageStoreCopyDescription.CheckMarkFile">
            <summary>
            Gets indicates whether to check mark file during copying. The property is true if checking mark file is required,
            false otherwise. The mark file is used to check whether the folder is well constructed. If the property is true and
            mark file does not exist, the copy is skipped.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ImageStoreInfo">
            <summary>
            Information about the ImageStore's resource usage
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ImageStoreInfo.#ctor(Microsoft.ServiceFabric.Common.DiskInfo,Microsoft.ServiceFabric.Common.UsageInfo,Microsoft.ServiceFabric.Common.UsageInfo,Microsoft.ServiceFabric.Common.UsageInfo,Microsoft.ServiceFabric.Common.UsageInfo)">
            <summary>
            Initializes a new instance of the ImageStoreInfo class.
            </summary>
            <param name="diskInfo">disk capacity and available disk space on the node where the ImageStore primary is
            placed.</param>
            <param name="usedByMetadata">the ImageStore's file system usage for metadata.</param>
            <param name="usedByStaging">The ImageStore's file system usage for staging files that are being uploaded.</param>
            <param name="usedByCopy">the ImageStore's file system usage for copied application and cluster packages. [Removing
            application and cluster
            packages](https://docs.microsoft.com/rest/api/servicefabric/sfclient-api-deleteimagestorecontent) will free up this
            space.</param>
            <param name="usedByRegister">the ImageStore's file system usage for registered and cluster packages. [Unregistering
            application](https://docs.microsoft.com/rest/api/servicefabric/sfclient-api-unprovisionapplicationtype) and
            [cluster packages](https://docs.microsoft.com/rest/api/servicefabric/sfclient-api-unprovisionapplicationtype) will
            free up this space.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ImageStoreInfo.DiskInfo">
            <summary>
            Gets disk capacity and available disk space on the node where the ImageStore primary is placed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ImageStoreInfo.UsedByMetadata">
            <summary>
            Gets the ImageStore's file system usage for metadata.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ImageStoreInfo.UsedByStaging">
            <summary>
            Gets the ImageStore's file system usage for staging files that are being uploaded.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ImageStoreInfo.UsedByCopy">
            <summary>
            Gets the ImageStore's file system usage for copied application and cluster packages. [Removing application and
            cluster packages](https://docs.microsoft.com/rest/api/servicefabric/sfclient-api-deleteimagestorecontent) will free
            up this space.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ImageStoreInfo.UsedByRegister">
            <summary>
            Gets the ImageStore's file system usage for registered and cluster packages. [Unregistering
            application](https://docs.microsoft.com/rest/api/servicefabric/sfclient-api-unprovisionapplicationtype) and
            [cluster packages](https://docs.microsoft.com/rest/api/servicefabric/sfclient-api-unprovisionapplicationtype) will
            free up this space.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ImpactLevel">
            <summary>
            Defines values for ImpactLevel.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ImpactLevel.Invalid">
            <summary>
            Invalid.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ImpactLevel.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ImpactLevel.Restart">
            <summary>
            Restart.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ImpactLevel.RemoveData">
            <summary>
            RemoveData.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ImpactLevel.RemoveNode">
            <summary>
            RemoveNode.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.InlinedValueSecretResourceProperties">
            <summary>
            Describes the properties of a secret resource whose value is provided explicitly as plaintext. The secret resource
            may have multiple values, each being uniquely versioned. The secret value of each version is stored encrypted, and
            delivered as plaintext into the context of applications referencing it.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.InlinedValueSecretResourceProperties.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the InlinedValueSecretResourceProperties class.
            </summary>
            <param name="description">User readable description of the secret.</param>
            <param name="contentType">The type of the content stored in the secret value. The value of this property is opaque
            to Service Fabric. Once set, the value of this property cannot be changed.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.InstanceLifecycleDescription">
            <summary>
            Describes how the instance will behave
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.InstanceLifecycleDescription.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the InstanceLifecycleDescription class.
            </summary>
            <param name="restoreReplicaLocationAfterUpgrade">If set to true, move/swap replica to original location after
            upgrade.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.InstanceLifecycleDescription.RestoreReplicaLocationAfterUpgrade">
            <summary>
            Gets if set to true, move/swap replica to original location after upgrade.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Int64PropertyValue">
            <summary>
            Describes a Service Fabric property value of type Int64.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Int64PropertyValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Int64PropertyValue class.
            </summary>
            <param name="data">The data of the property value.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Int64PropertyValue.Data">
            <summary>
            Gets the data of the property value.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Int64RangePartitionInformation">
            <summary>
            Describes the partition information for the integer range that is based on partition schemes.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Int64RangePartitionInformation.#ctor(Microsoft.ServiceFabric.Common.PartitionId,System.String,System.String)">
            <summary>
            Initializes a new instance of the Int64RangePartitionInformation class.
            </summary>
            <param name="id">An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly
            generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the
            service. If the same service was deleted and recreated the IDs of its partitions would be different.</param>
            <param name="lowKey">Specifies the minimum key value handled by this partition.</param>
            <param name="highKey">Specifies the maximum key value handled by this partition.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Int64RangePartitionInformation.LowKey">
            <summary>
            Gets specifies the minimum key value handled by this partition.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Int64RangePartitionInformation.HighKey">
            <summary>
            Gets specifies the maximum key value handled by this partition.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.InvokeDataLossResult">
            <summary>
            Represents information about an operation in a terminal state (Completed or Faulted).
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.InvokeDataLossResult.#ctor(System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.SelectedPartition)">
            <summary>
            Initializes a new instance of the InvokeDataLossResult class.
            </summary>
            <param name="errorCode">If OperationState is Completed, this is 0.  If OperationState is Faulted, this is an error
            code indicating the reason.</param>
            <param name="selectedPartition">This class returns information about the partition that the user-induced operation
            acted upon.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.InvokeDataLossResult.ErrorCode">
            <summary>
            Gets if OperationState is Completed, this is 0.  If OperationState is Faulted, this is an error code indicating the
            reason.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.InvokeDataLossResult.SelectedPartition">
            <summary>
            Gets this class returns information about the partition that the user-induced operation acted upon.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.InvokeQuorumLossResult">
            <summary>
            Represents information about an operation in a terminal state (Completed or Faulted).
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.InvokeQuorumLossResult.#ctor(System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.SelectedPartition)">
            <summary>
            Initializes a new instance of the InvokeQuorumLossResult class.
            </summary>
            <param name="errorCode">If OperationState is Completed, this is 0.  If OperationState is Faulted, this is an error
            code indicating the reason.</param>
            <param name="selectedPartition">This class returns information about the partition that the user-induced operation
            acted upon.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.InvokeQuorumLossResult.ErrorCode">
            <summary>
            Gets if OperationState is Completed, this is 0.  If OperationState is Faulted, this is an error code indicating the
            reason.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.InvokeQuorumLossResult.SelectedPartition">
            <summary>
            Gets this class returns information about the partition that the user-induced operation acted upon.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.KeyValueStoreReplicaStatus">
            <summary>
            Key value store related information for the replica.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.KeyValueStoreReplicaStatus.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the KeyValueStoreReplicaStatus class.
            </summary>
            <param name="databaseRowCountEstimate">Value indicating the estimated number of rows in the underlying
            database.</param>
            <param name="databaseLogicalSizeEstimate">Value indicating the estimated size of the underlying database.</param>
            <param name="copyNotificationCurrentKeyFilter">Value indicating the latest key-prefix filter applied to enumeration
            during the callback. Null if there is no pending callback.</param>
            <param name="copyNotificationCurrentProgress">Value indicating the latest number of keys enumerated during the
            callback. 0 if there is no pending callback.</param>
            <param name="statusDetails">Value indicating the current status details of the replica.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.KeyValueStoreReplicaStatus.DatabaseRowCountEstimate">
            <summary>
            Gets value indicating the estimated number of rows in the underlying database.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.KeyValueStoreReplicaStatus.DatabaseLogicalSizeEstimate">
            <summary>
            Gets value indicating the estimated size of the underlying database.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.KeyValueStoreReplicaStatus.CopyNotificationCurrentKeyFilter">
            <summary>
            Gets value indicating the latest key-prefix filter applied to enumeration during the callback. Null if there is no
            pending callback.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.KeyValueStoreReplicaStatus.CopyNotificationCurrentProgress">
            <summary>
            Gets value indicating the latest number of keys enumerated during the callback. 0 if there is no pending callback.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.KeyValueStoreReplicaStatus.StatusDetails">
            <summary>
            Gets value indicating the current status details of the replica.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.LoadedPartitionInformationQueryDescription">
            <summary>
            Represents data structure that contains query information.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.LoadedPartitionInformationQueryDescription.#ctor(System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.Ordering},System.Nullable{System.Int64},Microsoft.ServiceFabric.Common.ContinuationToken)">
            <summary>
            Initializes a new instance of the LoadedPartitionInformationQueryDescription class.
            </summary>
            <param name="metricName">Name of the metric for which this information is provided.</param>
            <param name="serviceName">Name of the service this partition belongs to.</param>
            <param name="ordering">Ordering of partitions' load. Possible values include: 'Desc', 'Asc'
            
            Defines the order.
            </param>
            <param name="maxResults">The maximum number of results to be returned as part of the paged queries. This parameter
            defines the upper bound on the number of results returned. The results returned can be less than the specified
            maximum results if they do not fit in the message as per the max message size restrictions defined in the
            configuration. If this parameter is zero or not specified, the paged query includes as many results as possible
            that fit in the return message.</param>
            <param name="continuationToken">The continuation token parameter is used to obtain next set of results. The
            continuation token is included in the response of the API when the results from the system do not fit in a single
            response. When this value is passed to the next API call, the API returns next set of results. If there are no
            further results, then the continuation token is not included in the response.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadedPartitionInformationQueryDescription.MetricName">
            <summary>
            Gets name of the metric for which this information is provided.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadedPartitionInformationQueryDescription.ServiceName">
            <summary>
            Gets name of the service this partition belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadedPartitionInformationQueryDescription.Ordering">
            <summary>
            Gets ordering of partitions' load. Possible values include: 'Desc', 'Asc'
            
            Defines the order.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadedPartitionInformationQueryDescription.MaxResults">
            <summary>
            Gets the maximum number of results to be returned as part of the paged queries. This parameter defines the upper
            bound on the number of results returned. The results returned can be less than the specified maximum results if
            they do not fit in the message as per the max message size restrictions defined in the configuration. If this
            parameter is zero or not specified, the paged query includes as many results as possible that fit in the return
            message.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadedPartitionInformationQueryDescription.ContinuationToken">
            <summary>
            Gets the continuation token parameter is used to obtain next set of results. The continuation token is included in
            the response of the API when the results from the system do not fit in a single response. When this value is passed
            to the next API call, the API returns next set of results. If there are no further results, then the continuation
            token is not included in the response.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.LoadedPartitionInformationResult">
            <summary>
            Represents partition information.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.LoadedPartitionInformationResult.#ctor(System.String,Microsoft.ServiceFabric.Common.PartitionId,System.String,System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the LoadedPartitionInformationResult class.
            </summary>
            <param name="serviceName">Name of the service this partition belongs to.</param>
            <param name="partitionId">Id of the partition.</param>
            <param name="metricName">Name of the metric for which this information is provided.</param>
            <param name="load">Load for metric.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadedPartitionInformationResult.ServiceName">
            <summary>
            Gets name of the service this partition belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadedPartitionInformationResult.PartitionId">
            <summary>
            Gets id of the partition.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadedPartitionInformationResult.MetricName">
            <summary>
            Gets name of the metric for which this information is provided.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadedPartitionInformationResult.Load">
            <summary>
            Gets load for metric.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.LoadMetricInformation">
            <summary>
            Represents data structure that contains load information for a certain metric in a cluster.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.LoadMetricInformation.#ctor(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.ServiceFabric.Common.NodeId,System.String,System.String,Microsoft.ServiceFabric.Common.NodeId,System.String)">
            <summary>
            Initializes a new instance of the LoadMetricInformation class.
            </summary>
            <param name="name">Name of the metric for which this load information is provided.</param>
            <param name="isBalancedBefore">Value that indicates whether the metrics is balanced or not before resource balancer
            run</param>
            <param name="isBalancedAfter">Value that indicates whether the metrics is balanced or not after resource balancer
            run.</param>
            <param name="deviationBefore">The standard average deviation of the metrics before resource balancer run.</param>
            <param name="deviationAfter">The standard average deviation of the metrics after resource balancer run.</param>
            <param name="balancingThreshold">The balancing threshold for a certain metric.</param>
            <param name="action">The current action being taken with regard to this metric</param>
            <param name="activityThreshold">The Activity Threshold specified for this metric in the system Cluster
            Manifest.</param>
            <param name="clusterCapacity">The total cluster capacity for a given metric</param>
            <param name="clusterLoad">The total cluster load. In future releases of Service Fabric this parameter will be
            deprecated in favor of CurrentClusterLoad.</param>
            <param name="currentClusterLoad">The total cluster load.</param>
            <param name="clusterRemainingCapacity">The remaining capacity for the metric in the cluster. In future releases of
            Service Fabric this parameter will be deprecated in favor of ClusterCapacityRemaining.</param>
            <param name="clusterCapacityRemaining">The remaining capacity for the metric in the cluster.</param>
            <param name="isClusterCapacityViolation">Indicates that the metric is currently over capacity in the
            cluster.</param>
            <param name="nodeBufferPercentage">The reserved percentage of total node capacity for this metric.</param>
            <param name="clusterBufferedCapacity">Remaining capacity in the cluster excluding the reserved space. In future
            releases of Service Fabric this parameter will be deprecated in favor of BufferedClusterCapacityRemaining.</param>
            <param name="bufferedClusterCapacityRemaining">Remaining capacity in the cluster excluding the reserved
            space.</param>
            <param name="clusterRemainingBufferedCapacity">The remaining percentage of cluster total capacity for this
            metric.</param>
            <param name="minNodeLoadValue">The minimum load on any node for this metric. In future releases of Service Fabric
            this parameter will be deprecated in favor of MinimumNodeLoad.</param>
            <param name="minimumNodeLoad">The minimum load on any node for this metric.</param>
            <param name="minNodeLoadNodeId">The node id of the node with the minimum load for this metric.</param>
            <param name="maxNodeLoadValue">The maximum load on any node for this metric. In future releases of Service Fabric
            this parameter will be deprecated in favor of MaximumNodeLoad.</param>
            <param name="maximumNodeLoad">The maximum load on any node for this metric.</param>
            <param name="maxNodeLoadNodeId">The node id of the node with the maximum load for this metric.</param>
            <param name="plannedLoadRemoval">This value represents the load of the replicas that are planned to be removed in
            the future within the cluster.
            This kind of load is reported for replicas that are currently being moving to other nodes and for replicas that are
            currently being dropped but still use the load on the source node.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.Name">
            <summary>
            Gets name of the metric for which this load information is provided.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.IsBalancedBefore">
            <summary>
            Gets value that indicates whether the metrics is balanced or not before resource balancer run
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.IsBalancedAfter">
            <summary>
            Gets value that indicates whether the metrics is balanced or not after resource balancer run.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.DeviationBefore">
            <summary>
            Gets the standard average deviation of the metrics before resource balancer run.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.DeviationAfter">
            <summary>
            Gets the standard average deviation of the metrics after resource balancer run.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.BalancingThreshold">
            <summary>
            Gets the balancing threshold for a certain metric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.Action">
            <summary>
            Gets the current action being taken with regard to this metric
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.ActivityThreshold">
            <summary>
            Gets the Activity Threshold specified for this metric in the system Cluster Manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.ClusterCapacity">
            <summary>
            Gets the total cluster capacity for a given metric
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.ClusterLoad">
            <summary>
            Gets the total cluster load. In future releases of Service Fabric this parameter will be deprecated in favor of
            CurrentClusterLoad.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.CurrentClusterLoad">
            <summary>
            Gets the total cluster load.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.ClusterRemainingCapacity">
            <summary>
            Gets the remaining capacity for the metric in the cluster. In future releases of Service Fabric this parameter will
            be deprecated in favor of ClusterCapacityRemaining.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.ClusterCapacityRemaining">
            <summary>
            Gets the remaining capacity for the metric in the cluster.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.IsClusterCapacityViolation">
            <summary>
            Gets indicates that the metric is currently over capacity in the cluster.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.NodeBufferPercentage">
            <summary>
            Gets the reserved percentage of total node capacity for this metric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.ClusterBufferedCapacity">
            <summary>
            Gets remaining capacity in the cluster excluding the reserved space. In future releases of Service Fabric this
            parameter will be deprecated in favor of BufferedClusterCapacityRemaining.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.BufferedClusterCapacityRemaining">
            <summary>
            Gets remaining capacity in the cluster excluding the reserved space.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.ClusterRemainingBufferedCapacity">
            <summary>
            Gets the remaining percentage of cluster total capacity for this metric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.MinNodeLoadValue">
            <summary>
            Gets the minimum load on any node for this metric. In future releases of Service Fabric this parameter will be
            deprecated in favor of MinimumNodeLoad.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.MinimumNodeLoad">
            <summary>
            Gets the minimum load on any node for this metric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.MinNodeLoadNodeId">
            <summary>
            Gets the node id of the node with the minimum load for this metric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.MaxNodeLoadValue">
            <summary>
            Gets the maximum load on any node for this metric. In future releases of Service Fabric this parameter will be
            deprecated in favor of MaximumNodeLoad.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.MaximumNodeLoad">
            <summary>
            Gets the maximum load on any node for this metric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.MaxNodeLoadNodeId">
            <summary>
            Gets the node id of the node with the maximum load for this metric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricInformation.PlannedLoadRemoval">
            <summary>
            Gets this value represents the load of the replicas that are planned to be removed in the future within the
            cluster.
            This kind of load is reported for replicas that are currently being moving to other nodes and for replicas that are
            currently being dropped but still use the load on the source node.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.LoadMetricReport">
            <summary>
            Represents the load metric report which contains the time metric was reported, its name and value.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.LoadMetricReport.#ctor(System.Nullable{System.DateTime},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the LoadMetricReport class.
            </summary>
            <param name="lastReportedUtc">Gets the UTC time when the load was reported.</param>
            <param name="name">The name of the load metric.</param>
            <param name="value">The value of the load metric. In future releases of Service Fabric this parameter will be
            deprecated in favor of CurrentValue.</param>
            <param name="currentValue">The value of the load metric.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricReport.LastReportedUtc">
            <summary>
            Gets the UTC time when the load was reported.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricReport.Name">
            <summary>
            Gets the name of the load metric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricReport.Value">
            <summary>
            Gets the value of the load metric. In future releases of Service Fabric this parameter will be deprecated in favor
            of CurrentValue.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricReport.CurrentValue">
            <summary>
            Gets the value of the load metric.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.LoadMetricReportInfo">
            <summary>
            Information about load reported by replica.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.LoadMetricReportInfo.#ctor(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the LoadMetricReportInfo class.
            </summary>
            <param name="name">The name of the metric.</param>
            <param name="value">The value of the load for the metric. In future releases of Service Fabric this parameter will
            be deprecated in favor of CurrentValue.</param>
            <param name="currentValue">The double value of the load for the metric.</param>
            <param name="lastReportedUtc">The UTC time when the load is reported.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricReportInfo.Name">
            <summary>
            Gets the name of the metric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricReportInfo.Value">
            <summary>
            Gets the value of the load for the metric. In future releases of Service Fabric this parameter will be deprecated
            in favor of CurrentValue.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricReportInfo.CurrentValue">
            <summary>
            Gets the double value of the load for the metric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LoadMetricReportInfo.LastReportedUtc">
            <summary>
            Gets the UTC time when the load is reported.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.LocalNetworkResourceProperties">
            <summary>
            Information about a Service Fabric container network local to a single Service Fabric cluster.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.LocalNetworkResourceProperties.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the LocalNetworkResourceProperties class.
            </summary>
            <param name="description">User readable description of the network.</param>
            <param name="networkAddressPrefix">Address space for the local container network.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.LocalNetworkResourceProperties.NetworkAddressPrefix">
            <summary>
            Gets address space for the local container network.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ManagedApplicationIdentity">
            <summary>
            Describes a managed application identity.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ManagedApplicationIdentity.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ManagedApplicationIdentity class.
            </summary>
            <param name="name">The name of the identity.</param>
            <param name="principalId">The identity's PrincipalId.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ManagedApplicationIdentity.Name">
            <summary>
            Gets the name of the identity.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ManagedApplicationIdentity.PrincipalId">
            <summary>
            Gets the identity's PrincipalId.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ManagedApplicationIdentityDescription">
            <summary>
            Managed application identity description.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ManagedApplicationIdentityDescription.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ManagedApplicationIdentity})">
            <summary>
            Initializes a new instance of the ManagedApplicationIdentityDescription class.
            </summary>
            <param name="tokenServiceEndpoint">Token service endpoint.</param>
            <param name="managedIdentities">A list of managed application identity objects.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ManagedApplicationIdentityDescription.TokenServiceEndpoint">
            <summary>
            Gets token service endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ManagedApplicationIdentityDescription.ManagedIdentities">
            <summary>
            Gets a list of managed application identity objects.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ManagedIdentityAzureBlobBackupStorageDescription">
            <summary>
            Describes the parameters for Azure blob store (connected using managed identity) used for storing and enumerating
            backups.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ManagedIdentityAzureBlobBackupStorageDescription.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ManagedIdentityType},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ManagedIdentityAzureBlobBackupStorageDescription class.
            </summary>
            <param name="managedIdentityType">The type of managed identity to be used to connect to Azure Blob Store via
            Managed Identity.
            . Possible values include: 'Invalid', 'VMSS', 'Cluster'</param>
            <param name="blobServiceUri">The Blob Service Uri to connect to the Azure blob store..</param>
            <param name="containerName">The name of the container in the blob store to store and enumerate backups
            from.</param>
            <param name="friendlyName">Friendly name for this backup storage.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ManagedIdentityAzureBlobBackupStorageDescription.ManagedIdentityType">
            <summary>
            Gets the type of managed identity to be used to connect to Azure Blob Store via Managed Identity.
            . Possible values include: 'Invalid', 'VMSS', 'Cluster'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ManagedIdentityAzureBlobBackupStorageDescription.BlobServiceUri">
            <summary>
            Gets the Blob Service Uri to connect to the Azure blob store..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ManagedIdentityAzureBlobBackupStorageDescription.ContainerName">
            <summary>
            Gets the name of the container in the blob store to store and enumerate backups from.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ManagedIdentityType">
            <summary>
            Defines values for ManagedIdentityType.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ManagedIdentityType.Invalid">
            <summary>
            Indicates an invalid managed identity type. All Service Fabric enumerations have the invalid type.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ManagedIdentityType.VMSS">
            <summary>
            Indicates VMSS managed identity should be used to connect to Azure blob store.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ManagedIdentityType.Cluster">
            <summary>
            Indicates cluster managed identity should be used to connect to Azure blob store.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.MetricLoadDescription">
            <summary>
            Specifies metric load information.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.MetricLoadDescription.#ctor(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the MetricLoadDescription class.
            </summary>
            <param name="metricName">The name of the reported metric.</param>
            <param name="currentLoad">The current value of the metric load.</param>
            <param name="predictedLoad">The predicted value of the metric load.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.MetricLoadDescription.MetricName">
            <summary>
            Gets the name of the reported metric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.MetricLoadDescription.CurrentLoad">
            <summary>
            Gets the current value of the metric load.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.MetricLoadDescription.PredictedLoad">
            <summary>
            Gets the predicted value of the metric load.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.MonitoringPolicyDescription">
            <summary>
            Describes the parameters for monitoring an upgrade in Monitored mode.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.MonitoringPolicyDescription.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.FailureAction},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the MonitoringPolicyDescription class.
            </summary>
            <param name="failureAction">The compensating action to perform when a Monitored upgrade encounters monitoring
            policy or health policy violations.
            Invalid indicates the failure action is invalid. Rollback specifies that the upgrade will start rolling back
            automatically.
            Manual indicates that the upgrade will switch to UnmonitoredManual upgrade mode.
            . Possible values include: 'Invalid', 'Rollback', 'Manual'</param>
            <param name="healthCheckWaitDurationInMilliseconds">The amount of time to wait after completing an upgrade domain
            before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that
            fails, then it is interpreted as a number representing the total number of milliseconds.</param>
            <param name="healthCheckStableDurationInMilliseconds">The amount of time that the application or cluster must
            remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string
            representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number
            of milliseconds.</param>
            <param name="healthCheckRetryTimeoutInMilliseconds">The amount of time to retry health evaluation when the
            application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string
            representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number
            of milliseconds.</param>
            <param name="upgradeTimeoutInMilliseconds">The amount of time the overall upgrade has to complete before
            FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails,
            then it is interpreted as a number representing the total number of milliseconds.</param>
            <param name="upgradeDomainTimeoutInMilliseconds">The amount of time each upgrade domain has to complete before
            FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails,
            then it is interpreted as a number representing the total number of milliseconds.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.MonitoringPolicyDescription.FailureAction">
            <summary>
            Gets the compensating action to perform when a Monitored upgrade encounters monitoring policy or health policy
            violations.
            Invalid indicates the failure action is invalid. Rollback specifies that the upgrade will start rolling back
            automatically.
            Manual indicates that the upgrade will switch to UnmonitoredManual upgrade mode.
            . Possible values include: 'Invalid', 'Rollback', 'Manual'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.MonitoringPolicyDescription.HealthCheckWaitDurationInMilliseconds">
            <summary>
            Gets the amount of time to wait after completing an upgrade domain before applying health policies. It is first
            interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number
            representing the total number of milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.MonitoringPolicyDescription.HealthCheckStableDurationInMilliseconds">
            <summary>
            Gets the amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next
            upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is
            interpreted as a number representing the total number of milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.MonitoringPolicyDescription.HealthCheckRetryTimeoutInMilliseconds">
            <summary>
            Gets the amount of time to retry health evaluation when the application or cluster is unhealthy before
            FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails,
            then it is interpreted as a number representing the total number of milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.MonitoringPolicyDescription.UpgradeTimeoutInMilliseconds">
            <summary>
            Gets the amount of time the overall upgrade has to complete before FailureAction is executed. It is first
            interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number
            representing the total number of milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.MonitoringPolicyDescription.UpgradeDomainTimeoutInMilliseconds">
            <summary>
            Gets the amount of time each upgrade domain has to complete before FailureAction is executed. It is first
            interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number
            representing the total number of milliseconds.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.MoveCost">
            <summary>
            Defines values for MoveCost.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.MoveCost.Zero">
            <summary>
            Zero move cost. This value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.MoveCost.Low">
            <summary>
            Specifies the move cost of the service as Low. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.MoveCost.Medium">
            <summary>
            Specifies the move cost of the service as Medium. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.MoveCost.High">
            <summary>
            Specifies the move cost of the service as High. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.MoveCost.VeryHigh">
            <summary>
            Specifies the move cost of the service as VeryHigh. The value is 4.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NamedPartitionInformation">
            <summary>
            Describes the partition information for the name as a string that is based on partition schemes.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NamedPartitionInformation.#ctor(Microsoft.ServiceFabric.Common.PartitionId,System.String)">
            <summary>
            Initializes a new instance of the NamedPartitionInformation class.
            </summary>
            <param name="id">An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly
            generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the
            service. If the same service was deleted and recreated the IDs of its partitions would be different.</param>
            <param name="name">Name of the partition.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NamedPartitionInformation.Name">
            <summary>
            Gets name of the partition.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NamedPartitionSchemeDescription">
            <summary>
            Describes the named partition scheme of the service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NamedPartitionSchemeDescription.#ctor(System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the NamedPartitionSchemeDescription class.
            </summary>
            <param name="count">The number of partitions.</param>
            <param name="names">Array of size specified by the ‘Count’ parameter, for the names of the partitions.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NamedPartitionSchemeDescription.Count">
            <summary>
            Gets the number of partitions.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NamedPartitionSchemeDescription.Names">
            <summary>
            Gets array of size specified by the ‘Count’ parameter, for the names of the partitions.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NetworkKind">
            <summary>
            Defines values for NetworkKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NetworkKind.Local">
            <summary>
            Indicates a container network local to a single Service Fabric cluster. The value is 1.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NetworkRef">
            <summary>
            Describes a network reference in a service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NetworkRef.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.EndpointRef})">
            <summary>
            Initializes a new instance of the NetworkRef class.
            </summary>
            <param name="name">Name of the network</param>
            <param name="endpointRefs">A list of endpoints that are exposed on this network.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NetworkRef.Name">
            <summary>
            Gets name of the network
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NetworkRef.EndpointRefs">
            <summary>
            Gets a list of endpoints that are exposed on this network.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NetworkResourceDescription">
            <summary>
            This type describes a network resource.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NetworkResourceDescription.#ctor(System.String,Microsoft.ServiceFabric.Common.NetworkResourceProperties)">
            <summary>
            Initializes a new instance of the NetworkResourceDescription class.
            </summary>
            <param name="name">Name of the Network resource.</param>
            <param name="properties">Describes properties of a network resource.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NetworkResourceDescription.Name">
            <summary>
            Gets name of the Network resource.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NetworkResourceDescription.Properties">
            <summary>
            Gets properties of a network resource.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NetworkResourceProperties">
            <summary>
            Describes properties of a network resource.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NetworkResourceProperties.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.NetworkKind},System.String)">
            <summary>
            Initializes a new instance of the NetworkResourceProperties class.
            </summary>
            <param name="kind">The type of a Service Fabric container network.</param>
            <param name="description">User readable description of the network.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NetworkResourceProperties.Description">
            <summary>
            Gets user readable description of the network.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NetworkResourceProperties.Status">
            <summary>
            Gets status of the network. Possible values include: 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting',
            'Failed'
            
            Status of the resource.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NetworkResourceProperties.StatusDetails">
            <summary>
            Gets additional information about the current status of the network.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NetworkResourcePropertiesBase">
            <summary>
            This type describes the properties of a network resource, including its kind.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NetworkResourcePropertiesBase.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.NetworkKind})">
            <summary>
            Initializes a new instance of the NetworkResourcePropertiesBase class.
            </summary>
            <param name="kind">The type of a Service Fabric container network.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NetworkResourcePropertiesBase.Kind">
            <summary>
            Gets the type of a Service Fabric container network.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeAbortedEvent">
            <summary>
            Node Aborted event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeAbortedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int64},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the NodeAbortedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="nodeInstance">Id of Node instance.</param>
            <param name="nodeId">Id of Node.</param>
            <param name="upgradeDomain">Upgrade domain of Node.</param>
            <param name="faultDomain">Fault domain of Node.</param>
            <param name="ipAddressOrFQDN">IP address or FQDN.</param>
            <param name="hostname">Name of Host.</param>
            <param name="isSeedNode">Indicates if it is seed node.</param>
            <param name="nodeVersion">Version of Node.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeAbortedEvent.NodeInstance">
            <summary>
            Gets id of Node instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeAbortedEvent.NodeId">
            <summary>
            Gets id of Node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeAbortedEvent.UpgradeDomain">
            <summary>
            Gets upgrade domain of Node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeAbortedEvent.FaultDomain">
            <summary>
            Gets fault domain of Node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeAbortedEvent.IpAddressOrFQDN">
            <summary>
            Gets IP address or FQDN.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeAbortedEvent.Hostname">
            <summary>
            Gets name of Host.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeAbortedEvent.IsSeedNode">
            <summary>
            Gets indicates if it is seed node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeAbortedEvent.NodeVersion">
            <summary>
            Gets version of Node.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeAddedToClusterEvent">
            <summary>
            Node Added event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeAddedToClusterEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.NodeName,System.String,System.Nullable{System.Int64},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the NodeAddedToClusterEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="nodeId">Id of Node.</param>
            <param name="nodeInstance">Id of Node instance.</param>
            <param name="nodeType">Type of Node.</param>
            <param name="fabricVersion">Fabric version.</param>
            <param name="ipAddressOrFQDN">IP address or FQDN.</param>
            <param name="nodeCapacities">Capacities.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeAddedToClusterEvent.NodeId">
            <summary>
            Gets id of Node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeAddedToClusterEvent.NodeInstance">
            <summary>
            Gets id of Node instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeAddedToClusterEvent.NodeType">
            <summary>
            Gets type of Node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeAddedToClusterEvent.FabricVersion">
            <summary>
            Gets fabric version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeAddedToClusterEvent.IpAddressOrFQDN">
            <summary>
            Gets IP address or FQDN.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeAddedToClusterEvent.NodeCapacities">
            <summary>
            Gets capacities.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeClosedEvent">
            <summary>
            Node Closed event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeClosedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.NodeName,System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the NodeClosedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="nodeId">Id of Node.</param>
            <param name="nodeInstance">Id of Node instance.</param>
            <param name="error">Describes error.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeClosedEvent.NodeId">
            <summary>
            Gets id of Node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeClosedEvent.NodeInstance">
            <summary>
            Gets id of Node instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeClosedEvent.Error">
            <summary>
            Gets error.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeDeactivateCompletedEvent">
            <summary>
            Node Deactivate Completed event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeDeactivateCompletedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the NodeDeactivateCompletedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="nodeInstance">Id of Node instance.</param>
            <param name="effectiveDeactivateIntent">Describes deactivate intent.</param>
            <param name="batchIdsWithDeactivateIntent">Batch Ids.</param>
            <param name="startTime">Start time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeDeactivateCompletedEvent.NodeInstance">
            <summary>
            Gets id of Node instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeDeactivateCompletedEvent.EffectiveDeactivateIntent">
            <summary>
            Gets deactivate intent.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeDeactivateCompletedEvent.BatchIdsWithDeactivateIntent">
            <summary>
            Gets batch Ids.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeDeactivateCompletedEvent.StartTime">
            <summary>
            Gets start time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeDeactivateStartedEvent">
            <summary>
            Node Deactivate Started event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeDeactivateStartedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the NodeDeactivateStartedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="nodeInstance">Id of Node instance.</param>
            <param name="batchId">Batch Id.</param>
            <param name="deactivateIntent">Describes deactivate intent.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeDeactivateStartedEvent.NodeInstance">
            <summary>
            Gets id of Node instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeDeactivateStartedEvent.BatchId">
            <summary>
            Gets batch Id.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeDeactivateStartedEvent.DeactivateIntent">
            <summary>
            Gets deactivate intent.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeDeactivationInfo">
            <summary>
            Information about the node deactivation. This information is valid for a node that is undergoing deactivation or
            has already been deactivated.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeDeactivationInfo.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.NodeDeactivationIntent},System.Nullable{Microsoft.ServiceFabric.Common.NodeDeactivationStatus},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.NodeDeactivationTask},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.SafetyCheckWrapper})">
            <summary>
            Initializes a new instance of the NodeDeactivationInfo class.
            </summary>
            <param name="nodeDeactivationIntent">The intent or the reason for deactivating the node. Following are the possible
            values for it. Possible values include: 'Invalid', 'Pause', 'Restart', 'RemoveData', 'RemoveNode'</param>
            <param name="nodeDeactivationStatus">The status of node deactivation operation. Following are the possible values.
            Possible values include: 'None', 'SafetyCheckInProgress', 'SafetyCheckComplete', 'Completed'</param>
            <param name="nodeDeactivationTask">List of tasks representing the deactivation operation on the node.</param>
            <param name="pendingSafetyChecks">List of pending safety checks</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeDeactivationInfo.NodeDeactivationIntent">
            <summary>
            Gets the intent or the reason for deactivating the node. Following are the possible values for it. Possible values
            include: 'Invalid', 'Pause', 'Restart', 'RemoveData', 'RemoveNode'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeDeactivationInfo.NodeDeactivationStatus">
            <summary>
            Gets the status of node deactivation operation. Following are the possible values. Possible values include: 'None',
            'SafetyCheckInProgress', 'SafetyCheckComplete', 'Completed'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeDeactivationInfo.NodeDeactivationTask">
            <summary>
            Gets list of tasks representing the deactivation operation on the node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeDeactivationInfo.PendingSafetyChecks">
            <summary>
            Gets list of pending safety checks
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeDeactivationIntent">
            <summary>
            Defines values for NodeDeactivationIntent.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeDeactivationIntent.Invalid">
            <summary>
            Indicates the node deactivation intent is invalid. All Service Fabric enumerations have the invalid type. The value
            is zero. This value is not used.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeDeactivationIntent.Pause">
            <summary>
            Indicates that the node should be paused. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeDeactivationIntent.Restart">
            <summary>
            Indicates that the intent is for the node to be restarted after a short period of time. Service Fabric does not
            restart the node, this action is done outside of Service Fabric. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeDeactivationIntent.RemoveData">
            <summary>
            Indicates that the intent is to reimage the node. Service Fabric does not reimage the node, this action is done
            outside of Service Fabric. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeDeactivationIntent.RemoveNode">
            <summary>
            Indicates that the node is being decommissioned and is not expected to return. Service Fabric does not decommission
            the node, this action is done outside of Service Fabric. The value is 4.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeDeactivationStatus">
            <summary>
            Defines values for NodeDeactivationStatus.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeDeactivationStatus.None">
            <summary>
            No status is associated with the task. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeDeactivationStatus.SafetyCheckInProgress">
            <summary>
            When a node is deactivated Service Fabric performs checks to ensure that the operation is safe to proceed to ensure
            availability of the service and reliability of the state. This value indicates that one or more safety checks are
            in progress. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeDeactivationStatus.SafetyCheckComplete">
            <summary>
            When a node is deactivated Service Fabric performs checks to ensure that the operation is safe to proceed to ensure
            availability of the service and reliability of the state. This value indicates that all safety checks have been
            completed. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeDeactivationStatus.Completed">
            <summary>
            The task is completed. The value is 3.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeDeactivationTask">
            <summary>
            The task representing the deactivation operation on the node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeDeactivationTask.#ctor(Microsoft.ServiceFabric.Common.NodeDeactivationTaskId,System.Nullable{Microsoft.ServiceFabric.Common.NodeDeactivationIntent})">
            <summary>
            Initializes a new instance of the NodeDeactivationTask class.
            </summary>
            <param name="nodeDeactivationTaskId">Identity of the task related to deactivation operation on the node.</param>
            <param name="nodeDeactivationIntent">The intent or the reason for deactivating the node. Following are the possible
            values for it. Possible values include: 'Invalid', 'Pause', 'Restart', 'RemoveData', 'RemoveNode'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeDeactivationTask.NodeDeactivationTaskId">
            <summary>
            Gets identity of the task related to deactivation operation on the node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeDeactivationTask.NodeDeactivationIntent">
            <summary>
            Gets the intent or the reason for deactivating the node. Following are the possible values for it. Possible values
            include: 'Invalid', 'Pause', 'Restart', 'RemoveData', 'RemoveNode'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeDeactivationTaskId">
            <summary>
            Identity of the task related to deactivation operation on the node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeDeactivationTaskId.#ctor(System.String,System.Nullable{Microsoft.ServiceFabric.Common.NodeDeactivationTaskType})">
            <summary>
            Initializes a new instance of the NodeDeactivationTaskId class.
            </summary>
            <param name="id">Value of the task id.</param>
            <param name="nodeDeactivationTaskType">The type of the task that performed the node deactivation. Following are the
            possible values. Possible values include: 'Invalid', 'Infrastructure', 'Repair', 'Client'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeDeactivationTaskId.Id">
            <summary>
            Gets value of the task id.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeDeactivationTaskId.NodeDeactivationTaskType">
            <summary>
            Gets the type of the task that performed the node deactivation. Following are the possible values. Possible values
            include: 'Invalid', 'Infrastructure', 'Repair', 'Client'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeDeactivationTaskType">
            <summary>
            Defines values for NodeDeactivationTaskType.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeDeactivationTaskType.Invalid">
            <summary>
            Indicates the node deactivation task type is invalid. All Service Fabric enumerations have the invalid type. The
            value is zero. This value is not used.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeDeactivationTaskType.Infrastructure">
            <summary>
            Specifies the task created by Infrastructure hosting the nodes. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeDeactivationTaskType.Repair">
            <summary>
            Specifies the task that was created by the Repair Manager service. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeDeactivationTaskType.Client">
            <summary>
            Specifies that the task was created by using the public API. The value is 3.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeDownEvent">
            <summary>
            Node Down event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeDownEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the NodeDownEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="nodeInstance">Id of Node instance.</param>
            <param name="lastNodeUpAt">Time when Node was last up.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeDownEvent.NodeInstance">
            <summary>
            Gets id of Node instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeDownEvent.LastNodeUpAt">
            <summary>
            Gets time when Node was last up.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeEvent">
            <summary>
            Represents the base for all Node Events.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.Nullable{Microsoft.ServiceFabric.Common.FabricEventKind},Microsoft.ServiceFabric.Common.NodeName,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the NodeEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="kind">The kind of FabricEvent.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeEvent.NodeName">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeHealth">
            <summary>
            Information about the health of a Service Fabric node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeHealth.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvent},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper},Microsoft.ServiceFabric.Common.HealthStatistics,Microsoft.ServiceFabric.Common.NodeName)">
            <summary>
            Initializes a new instance of the NodeHealth class.
            </summary>
            <param name="aggregatedHealthState">The HealthState representing the aggregated health state of the entity computed
            by Health Manager.
            The health evaluation of the entity reflects all events reported on the entity and its children (if any).
            The aggregation is done by applying the desired health policy.
            . Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            
            The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
            </param>
            <param name="healthEvents">The list of health events reported on the entity.</param>
            <param name="unhealthyEvaluations">The unhealthy evaluations that show why the current aggregated health state was
            returned by Health Manager.</param>
            <param name="healthStatistics">Shows the health statistics for all children types of the queried entity.</param>
            <param name="name">Name of the node whose health information is described by this object.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeHealth.Name">
            <summary>
            Gets name of the node whose health information is described by this object.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeHealthEvaluation">
            <summary>
            Represents health evaluation for a node, containing information about the data and the algorithm used by health
            store to evaluate health. The evaluation is returned only when the aggregated health state is either Error or
            Warning.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,Microsoft.ServiceFabric.Common.NodeName,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the NodeHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the current aggregated health state of
            the node. The types of the unhealthy evaluations can be EventHealthEvaluation.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeHealthEvaluation.NodeName">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the current aggregated health state of the node. The types of the
            unhealthy evaluations can be EventHealthEvaluation.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeHealthReportExpiredEvent">
            <summary>
            Node Health Report Expired event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeHealthReportExpiredEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the NodeHealthReportExpiredEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="nodeInstanceId">Id of Node instance.</param>
            <param name="sourceId">Id of report source.</param>
            <param name="property">Describes the property.</param>
            <param name="healthState">Describes the property health state.</param>
            <param name="timeToLiveMs">Time to live in milli-seconds.</param>
            <param name="sequenceNumber">Sequence number of report.</param>
            <param name="description">Description of report.</param>
            <param name="removeWhenExpired">Indicates the removal when it expires.</param>
            <param name="sourceUtcTimestamp">Source time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeHealthReportExpiredEvent.NodeInstanceId">
            <summary>
            Gets id of Node instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeHealthReportExpiredEvent.SourceId">
            <summary>
            Gets id of report source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeHealthReportExpiredEvent.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeHealthReportExpiredEvent.HealthState">
            <summary>
            Gets the property health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeHealthReportExpiredEvent.TimeToLiveMs">
            <summary>
            Gets time to live in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeHealthReportExpiredEvent.SequenceNumber">
            <summary>
            Gets sequence number of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeHealthReportExpiredEvent.Description">
            <summary>
            Gets description of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeHealthReportExpiredEvent.RemoveWhenExpired">
            <summary>
            Gets indicates the removal when it expires.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeHealthReportExpiredEvent.SourceUtcTimestamp">
            <summary>
            Gets source time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeHealthState">
            <summary>
            Represents the health state of a node, which contains the node identifier and its aggregated health state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeHealthState.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.NodeId)">
            <summary>
            Initializes a new instance of the NodeHealthState class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="name">The name of a Service Fabric node.</param>
            <param name="id">An internal ID used by Service Fabric to uniquely identify a node. Node Id is deterministically
            generated from node name.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeHealthState.Name">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeHealthState.Id">
            <summary>
            Gets an internal ID used by Service Fabric to uniquely identify a node. Node Id is deterministically generated from
            node name.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeHealthStateChunk">
            <summary>
            Represents the health state chunk of a node, which contains the node name and its aggregated health state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeHealthStateChunk.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},Microsoft.ServiceFabric.Common.NodeName)">
            <summary>
            Initializes a new instance of the NodeHealthStateChunk class.
            </summary>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeHealthStateChunk.NodeName">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeHealthStateChunkList">
            <summary>
            The list of node health state chunks in the cluster that respect the input filters in the chunk query. Returned by
            get cluster health state chunks query.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeHealthStateChunkList.#ctor(System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.NodeHealthStateChunk})">
            <summary>
            Initializes a new instance of the NodeHealthStateChunkList class.
            </summary>
            <param name="totalCount">Total number of entity health state objects that match the specified filters from the
            cluster health chunk query description.
            </param>
            <param name="items">The list of node health state chunks that respect the input filters in the chunk query.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeHealthStateChunkList.Items">
            <summary>
            Gets the list of node health state chunks that respect the input filters in the chunk query.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeHealthStateFilter">
            <summary>
            Defines matching criteria to determine whether a node should be included in the returned cluster health chunk.
            One filter can match zero, one or multiple nodes, depending on its properties.
            Can be specified in the cluster health chunk query description.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeHealthStateFilter.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the NodeHealthStateFilter class.
            </summary>
            <param name="nodeNameFilter">Name of the node that matches the filter. The filter is applied only to the specified
            node, if it exists.
            If the node doesn't exist, no node is returned in the cluster health chunk based on this filter.
            If the node exists, it is included in the cluster health chunk if the health state matches the other filter
            properties.
            If not specified, all nodes that match the parent filters (if any) are taken into consideration and matched against
            the other filter members, like health state filter.
            </param>
            <param name="healthStateFilter">The filter for the health state of the nodes. It allows selecting nodes if they
            match the desired health states.
            The possible values are integer value of one of the following health states. Only nodes that match the filter are
            returned. All nodes are used to evaluate the cluster aggregated health state.
            If not specified, default value is None, unless the node name is specified. If the filter has default value and
            node name is specified, the matching node is returned.
            The state values are flag-based enumeration, so the value could be a combination of these values obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6, it matches nodes with HealthState value of OK (2) and Warning (4).
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeHealthStateFilter.NodeNameFilter">
            <summary>
            Gets name of the node that matches the filter. The filter is applied only to the specified node, if it exists.
            If the node doesn't exist, no node is returned in the cluster health chunk based on this filter.
            If the node exists, it is included in the cluster health chunk if the health state matches the other filter
            properties.
            If not specified, all nodes that match the parent filters (if any) are taken into consideration and matched against
            the other filter members, like health state filter.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeHealthStateFilter.HealthStateFilter">
            <summary>
            Gets the filter for the health state of the nodes. It allows selecting nodes if they match the desired health
            states.
            The possible values are integer value of one of the following health states. Only nodes that match the filter are
            returned. All nodes are used to evaluate the cluster aggregated health state.
            If not specified, default value is None, unless the node name is specified. If the filter has default value and
            node name is specified, the matching node is returned.
            The state values are flag-based enumeration, so the value could be a combination of these values obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6, it matches nodes with HealthState value of OK (2) and Warning (4).
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeId">
            <summary>
            An internal ID used by Service Fabric to uniquely identify a node. Node Id is deterministically generated from node
            name.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the NodeId class.
            </summary>
            <param name="id">Value of the node Id. This is a 128 bit integer.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeId.Id">
            <summary>
            Gets value of the node Id. This is a 128 bit integer.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeImpact">
            <summary>
            Describes the expected impact of a repair to a particular node.
            
            This type supports the Service Fabric platform; it is not meant to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeImpact.#ctor(System.String,System.Nullable{Microsoft.ServiceFabric.Common.ImpactLevel})">
            <summary>
            Initializes a new instance of the NodeImpact class.
            </summary>
            <param name="nodeName">The name of the impacted node.</param>
            <param name="impactLevel">The level of impact expected. Possible values include: 'Invalid', 'None', 'Restart',
            'RemoveData', 'RemoveNode'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeImpact.NodeName">
            <summary>
            Gets the name of the impacted node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeImpact.ImpactLevel">
            <summary>
            Gets the level of impact expected. Possible values include: 'Invalid', 'None', 'Restart', 'RemoveData',
            'RemoveNode'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeInfo">
            <summary>
            Information about a node in Service Fabric cluster.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeInfo.#ctor(Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.NodeStatus},System.String,System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Nullable{System.Boolean},System.String,System.String,Microsoft.ServiceFabric.Common.NodeId,System.String,Microsoft.ServiceFabric.Common.NodeDeactivationInfo,System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the NodeInfo class.
            </summary>
            <param name="name">The name of a Service Fabric node.</param>
            <param name="ipAddressOrFQDN">The IP address or fully qualified domain name of the node.</param>
            <param name="type">The type of the node.</param>
            <param name="codeVersion">The version of Service Fabric binaries that the node is running.</param>
            <param name="configVersion">The version of Service Fabric cluster manifest that the node is using.</param>
            <param name="nodeStatus">The status of the node. Possible values include: 'Invalid', 'Up', 'Down', 'Enabling',
            'Disabling', 'Disabled', 'Unknown', 'Removed'</param>
            <param name="nodeUpTimeInSeconds">Time in seconds since the node has been in NodeStatus Up. Value zero indicates
            that the node is not Up.</param>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="isSeedNode">Indicates if the node is a seed node or not. Returns true if the node is a seed node,
            otherwise false. A quorum of seed nodes are required for proper operation of Service Fabric cluster.</param>
            <param name="upgradeDomain">The upgrade domain of the node.</param>
            <param name="faultDomain">The fault domain of the node.</param>
            <param name="id">An internal ID used by Service Fabric to uniquely identify a node. Node Id is deterministically
            generated from node name.</param>
            <param name="instanceId">The ID representing the node instance. While the ID of the node is deterministically
            generated from the node name and remains same across restarts, the InstanceId changes every time node
            restarts.</param>
            <param name="nodeDeactivationInfo">Information about the node deactivation. This information is valid for a node
            that is undergoing deactivation or has already been deactivated.</param>
            <param name="isStopped">Indicates if the node is stopped by calling stop node API or not. Returns true if the node
            is stopped, otherwise false.</param>
            <param name="nodeDownTimeInSeconds">Time in seconds since the node has been in NodeStatus Down. Value zero
            indicates node is not NodeStatus Down.</param>
            <param name="nodeUpAt">Date time in UTC when the node came up. If the node has never been up then this value will
            be zero date time.</param>
            <param name="nodeDownAt">Date time in UTC when the node went down. If node has never been down then this value will
            be zero date time.</param>
            <param name="nodeTags">List that contains tags, which will be applied to the nodes.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.Name">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.IpAddressOrFQDN">
            <summary>
            Gets the IP address or fully qualified domain name of the node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.Type">
            <summary>
            Gets the type of the node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.CodeVersion">
            <summary>
            Gets the version of Service Fabric binaries that the node is running.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.ConfigVersion">
            <summary>
            Gets the version of Service Fabric cluster manifest that the node is using.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.NodeStatus">
            <summary>
            Gets the status of the node. Possible values include: 'Invalid', 'Up', 'Down', 'Enabling', 'Disabling', 'Disabled',
            'Unknown', 'Removed'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.NodeUpTimeInSeconds">
            <summary>
            Gets time in seconds since the node has been in NodeStatus Up. Value zero indicates that the node is not Up.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.HealthState">
            <summary>
            Gets the health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica
            etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.IsSeedNode">
            <summary>
            Gets indicates if the node is a seed node or not. Returns true if the node is a seed node, otherwise false. A
            quorum of seed nodes are required for proper operation of Service Fabric cluster.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.UpgradeDomain">
            <summary>
            Gets the upgrade domain of the node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.FaultDomain">
            <summary>
            Gets the fault domain of the node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.Id">
            <summary>
            Gets an internal ID used by Service Fabric to uniquely identify a node. Node Id is deterministically generated from
            node name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.InstanceId">
            <summary>
            Gets the ID representing the node instance. While the ID of the node is deterministically generated from the node
            name and remains same across restarts, the InstanceId changes every time node restarts.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.NodeDeactivationInfo">
            <summary>
            Gets information about the node deactivation. This information is valid for a node that is undergoing deactivation
            or has already been deactivated.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.IsStopped">
            <summary>
            Gets indicates if the node is stopped by calling stop node API or not. Returns true if the node is stopped,
            otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.NodeDownTimeInSeconds">
            <summary>
            Gets time in seconds since the node has been in NodeStatus Down. Value zero indicates node is not NodeStatus Down.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.NodeUpAt">
            <summary>
            Gets date time in UTC when the node came up. If the node has never been up then this value will be zero date time.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.NodeDownAt">
            <summary>
            Gets date time in UTC when the node went down. If node has never been down then this value will be zero date time.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeInfo.NodeTags">
            <summary>
            Gets list that contains tags, which will be applied to the nodes.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeLoadInfo">
            <summary>
            Information about load on a Service Fabric node. It holds a summary of all metrics and their load on a node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeLoadInfo.#ctor(Microsoft.ServiceFabric.Common.NodeName,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.NodeLoadMetricInformation})">
            <summary>
            Initializes a new instance of the NodeLoadInfo class.
            </summary>
            <param name="nodeName">Name of the node for which the load information is provided by this object.</param>
            <param name="nodeLoadMetricInformation">List that contains metrics and their load information on this node.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeLoadInfo.NodeName">
            <summary>
            Gets name of the node for which the load information is provided by this object.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeLoadInfo.NodeLoadMetricInformation">
            <summary>
            Gets list that contains metrics and their load information on this node.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeLoadMetricInformation">
            <summary>
            Represents data structure that contains load information for a certain metric on a node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeLoadMetricInformation.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the NodeLoadMetricInformation class.
            </summary>
            <param name="name">Name of the metric for which this load information is provided.</param>
            <param name="nodeCapacity">Total capacity on the node for this metric.</param>
            <param name="nodeLoad">Current load on the node for this metric. In future releases of Service Fabric this
            parameter will be deprecated in favor of CurrentNodeLoad.</param>
            <param name="nodeRemainingCapacity">The remaining capacity on the node for this metric. In future releases of
            Service Fabric this parameter will be deprecated in favor of NodeCapacityRemaining.</param>
            <param name="isCapacityViolation">Indicates if there is a capacity violation for this metric on the node.</param>
            <param name="nodeBufferedCapacity">The value that indicates the reserved capacity for this metric on the
            node.</param>
            <param name="nodeRemainingBufferedCapacity">The remaining reserved capacity for this metric on the node. In future
            releases of Service Fabric this parameter will be deprecated in favor of BufferedNodeCapacityRemaining.</param>
            <param name="currentNodeLoad">Current load on the node for this metric.</param>
            <param name="nodeCapacityRemaining">The remaining capacity on the node for the metric.</param>
            <param name="bufferedNodeCapacityRemaining">The remaining capacity which is not reserved by NodeBufferPercentage
            for this metric on the node.</param>
            <param name="plannedNodeLoadRemoval">This value represents the load of the replicas that are planned to be removed
            in the future.
            This kind of load is reported for replicas that are currently being moving to other nodes and for replicas that are
            currently being dropped but still use the load on the source node.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeLoadMetricInformation.Name">
            <summary>
            Gets name of the metric for which this load information is provided.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeLoadMetricInformation.NodeCapacity">
            <summary>
            Gets total capacity on the node for this metric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeLoadMetricInformation.NodeLoad">
            <summary>
            Gets current load on the node for this metric. In future releases of Service Fabric this parameter will be
            deprecated in favor of CurrentNodeLoad.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeLoadMetricInformation.NodeRemainingCapacity">
            <summary>
            Gets the remaining capacity on the node for this metric. In future releases of Service Fabric this parameter will
            be deprecated in favor of NodeCapacityRemaining.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeLoadMetricInformation.IsCapacityViolation">
            <summary>
            Gets indicates if there is a capacity violation for this metric on the node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeLoadMetricInformation.NodeBufferedCapacity">
            <summary>
            Gets the value that indicates the reserved capacity for this metric on the node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeLoadMetricInformation.NodeRemainingBufferedCapacity">
            <summary>
            Gets the remaining reserved capacity for this metric on the node. In future releases of Service Fabric this
            parameter will be deprecated in favor of BufferedNodeCapacityRemaining.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeLoadMetricInformation.CurrentNodeLoad">
            <summary>
            Gets current load on the node for this metric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeLoadMetricInformation.NodeCapacityRemaining">
            <summary>
            Gets the remaining capacity on the node for the metric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeLoadMetricInformation.BufferedNodeCapacityRemaining">
            <summary>
            Gets the remaining capacity which is not reserved by NodeBufferPercentage for this metric on the node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeLoadMetricInformation.PlannedNodeLoadRemoval">
            <summary>
            Gets this value represents the load of the replicas that are planned to be removed in the future.
            This kind of load is reported for replicas that are currently being moving to other nodes and for replicas that are
            currently being dropped but still use the load on the source node.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeNewHealthReportEvent">
            <summary>
            Node Health Report Created event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeNewHealthReportEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the NodeNewHealthReportEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="nodeInstanceId">Id of Node instance.</param>
            <param name="sourceId">Id of report source.</param>
            <param name="property">Describes the property.</param>
            <param name="healthState">Describes the property health state.</param>
            <param name="timeToLiveMs">Time to live in milli-seconds.</param>
            <param name="sequenceNumber">Sequence number of report.</param>
            <param name="description">Description of report.</param>
            <param name="removeWhenExpired">Indicates the removal when it expires.</param>
            <param name="sourceUtcTimestamp">Source time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeNewHealthReportEvent.NodeInstanceId">
            <summary>
            Gets id of Node instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeNewHealthReportEvent.SourceId">
            <summary>
            Gets id of report source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeNewHealthReportEvent.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeNewHealthReportEvent.HealthState">
            <summary>
            Gets the property health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeNewHealthReportEvent.TimeToLiveMs">
            <summary>
            Gets time to live in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeNewHealthReportEvent.SequenceNumber">
            <summary>
            Gets sequence number of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeNewHealthReportEvent.Description">
            <summary>
            Gets description of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeNewHealthReportEvent.RemoveWhenExpired">
            <summary>
            Gets indicates the removal when it expires.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeNewHealthReportEvent.SourceUtcTimestamp">
            <summary>
            Gets source time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeOpenFailedEvent">
            <summary>
            Node Open Failed event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeOpenFailedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int64},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the NodeOpenFailedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="nodeInstance">Id of Node instance.</param>
            <param name="nodeId">Id of Node.</param>
            <param name="upgradeDomain">Upgrade domain of Node.</param>
            <param name="faultDomain">Fault domain of Node.</param>
            <param name="ipAddressOrFQDN">IP address or FQDN.</param>
            <param name="hostname">Name of Host.</param>
            <param name="isSeedNode">Indicates if it is seed node.</param>
            <param name="nodeVersion">Version of Node.</param>
            <param name="error">Describes the error.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeOpenFailedEvent.NodeInstance">
            <summary>
            Gets id of Node instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeOpenFailedEvent.NodeId">
            <summary>
            Gets id of Node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeOpenFailedEvent.UpgradeDomain">
            <summary>
            Gets upgrade domain of Node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeOpenFailedEvent.FaultDomain">
            <summary>
            Gets fault domain of Node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeOpenFailedEvent.IpAddressOrFQDN">
            <summary>
            Gets IP address or FQDN.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeOpenFailedEvent.Hostname">
            <summary>
            Gets name of Host.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeOpenFailedEvent.IsSeedNode">
            <summary>
            Gets indicates if it is seed node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeOpenFailedEvent.NodeVersion">
            <summary>
            Gets version of Node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeOpenFailedEvent.Error">
            <summary>
            Gets the error.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeOpenSucceededEvent">
            <summary>
            Node Opened Succeeded event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeOpenSucceededEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int64},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the NodeOpenSucceededEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="nodeInstance">Id of Node instance.</param>
            <param name="nodeId">Id of Node.</param>
            <param name="upgradeDomain">Upgrade domain of Node.</param>
            <param name="faultDomain">Fault domain of Node.</param>
            <param name="ipAddressOrFQDN">IP address or FQDN.</param>
            <param name="hostname">Name of Host.</param>
            <param name="isSeedNode">Indicates if it is seed node.</param>
            <param name="nodeVersion">Version of Node.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeOpenSucceededEvent.NodeInstance">
            <summary>
            Gets id of Node instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeOpenSucceededEvent.NodeId">
            <summary>
            Gets id of Node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeOpenSucceededEvent.UpgradeDomain">
            <summary>
            Gets upgrade domain of Node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeOpenSucceededEvent.FaultDomain">
            <summary>
            Gets fault domain of Node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeOpenSucceededEvent.IpAddressOrFQDN">
            <summary>
            Gets IP address or FQDN.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeOpenSucceededEvent.Hostname">
            <summary>
            Gets name of Host.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeOpenSucceededEvent.IsSeedNode">
            <summary>
            Gets indicates if it is seed node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeOpenSucceededEvent.NodeVersion">
            <summary>
            Gets version of Node.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeRemovedFromClusterEvent">
            <summary>
            Node Removed event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeRemovedFromClusterEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.NodeName,System.String,System.Nullable{System.Int64},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the NodeRemovedFromClusterEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="nodeId">Id of Node.</param>
            <param name="nodeInstance">Id of Node instance.</param>
            <param name="nodeType">Type of Node.</param>
            <param name="fabricVersion">Fabric version.</param>
            <param name="ipAddressOrFQDN">IP address or FQDN.</param>
            <param name="nodeCapacities">Capacities.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeRemovedFromClusterEvent.NodeId">
            <summary>
            Gets id of Node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeRemovedFromClusterEvent.NodeInstance">
            <summary>
            Gets id of Node instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeRemovedFromClusterEvent.NodeType">
            <summary>
            Gets type of Node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeRemovedFromClusterEvent.FabricVersion">
            <summary>
            Gets fabric version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeRemovedFromClusterEvent.IpAddressOrFQDN">
            <summary>
            Gets IP address or FQDN.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeRemovedFromClusterEvent.NodeCapacities">
            <summary>
            Gets capacities.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeRepairImpactDescription">
            <summary>
            Describes the expected impact of a repair on a set of nodes.
            
            This type supports the Service Fabric platform; it is not meant to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeRepairImpactDescription.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.NodeImpact})">
            <summary>
            Initializes a new instance of the NodeRepairImpactDescription class.
            </summary>
            <param name="nodeImpactList">The list of nodes impacted by a repair action and their respective expected
            impact.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeRepairImpactDescription.NodeImpactList">
            <summary>
            Gets the list of nodes impacted by a repair action and their respective expected impact.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeRepairTargetDescription">
            <summary>
            Describes the list of nodes targeted by a repair action.
            
            This type supports the Service Fabric platform; it is not meant to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeRepairTargetDescription.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the NodeRepairTargetDescription class.
            </summary>
            <param name="nodeNames">The list of nodes targeted by a repair action.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeRepairTargetDescription.NodeNames">
            <summary>
            Gets the list of nodes targeted by a repair action.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeResult">
            <summary>
            Contains information about a node that was targeted by a user-induced operation.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeResult.#ctor(Microsoft.ServiceFabric.Common.NodeName,System.String)">
            <summary>
            Initializes a new instance of the NodeResult class.
            </summary>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="nodeInstanceId">The node instance id.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeResult.NodeName">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeResult.NodeInstanceId">
            <summary>
            Gets the node instance id.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodesHealthEvaluation">
            <summary>
            Represents health evaluation for nodes, containing health evaluations for each unhealthy node that impacted current
            aggregated health state. Can be returned when evaluating cluster health and the aggregated health state is either
            Error or Warning.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodesHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the NodesHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="maxPercentUnhealthyNodes">Maximum allowed percentage of unhealthy nodes from the
            ClusterHealthPolicy.</param>
            <param name="totalCount">Total number of nodes found in the health store.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the aggregated health state. Includes
            all the unhealthy NodeHealthEvaluation that impacted the aggregated health.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodesHealthEvaluation.MaxPercentUnhealthyNodes">
            <summary>
            Gets maximum allowed percentage of unhealthy nodes from the ClusterHealthPolicy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodesHealthEvaluation.TotalCount">
            <summary>
            Gets total number of nodes found in the health store.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodesHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy
            NodeHealthEvaluation that impacted the aggregated health.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeStatus">
            <summary>
            Defines values for NodeStatus.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeStatus.Invalid">
            <summary>
            Indicates the node status is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeStatus.Up">
            <summary>
            Indicates the node is up. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeStatus.Down">
            <summary>
            Indicates the node is down. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeStatus.Enabling">
            <summary>
            Indicates the node is in process of being enabled. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeStatus.Disabling">
            <summary>
            Indicates the node is in the process of being disabled. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeStatus.Disabled">
            <summary>
            Indicates the node is disabled. The value is 5.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeStatus.Unknown">
            <summary>
            Indicates the node is unknown. A node would be in Unknown state if Service Fabric does not have authoritative
            information about that node. This can happen if the system learns about a node at runtime.The value is 6.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeStatus.Removed">
            <summary>
            Indicates the node is removed. A node would be in Removed state if NodeStateRemoved API has been called for this
            node. In other words, Service Fabric has been informed that the persisted state on the node has been permanently
            lost. The value is 7.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeStatusFilter">
            <summary>
            Defines values for NodeStatusFilter.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeStatusFilter.Default">
            <summary>
            This filter value will match all of the nodes excepts the ones with status as Unknown or Removed.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeStatusFilter.All">
            <summary>
            This filter value will match all of the nodes.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeStatusFilter.Up">
            <summary>
            This filter value will match nodes that are Up.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeStatusFilter.Down">
            <summary>
            This filter value will match nodes that are Down.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeStatusFilter.Enabling">
            <summary>
            This filter value will match nodes that are in the process of being enabled with status as Enabling.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeStatusFilter.Disabling">
            <summary>
            This filter value will match nodes that are in the process of being disabled with status as Disabling.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeStatusFilter.Disabled">
            <summary>
            This filter value will match nodes that are Disabled.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeStatusFilter.Unknown">
            <summary>
            This filter value will match nodes whose status is Unknown. A node would be in Unknown state if Service Fabric does
            not have authoritative information about that node. This can happen if the system learns about a node at runtime.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeStatusFilter.Removed">
            <summary>
            This filter value will match nodes whose status is Removed. These are the nodes that are removed from the cluster
            using the RemoveNodeState API.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeTagsDescription">
            <summary>
            Describes the tags required for placement or running of the service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeTagsDescription.#ctor(System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the NodeTagsDescription class.
            </summary>
            <param name="count">The number of tags.</param>
            <param name="tags">Array of size specified by the ‘Count’ parameter, for the placement tags of the service.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeTagsDescription.Count">
            <summary>
            Gets the number of tags.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeTagsDescription.Tags">
            <summary>
            Gets array of size specified by the ‘Count’ parameter, for the placement tags of the service.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeTransitionProgress">
            <summary>
            Information about an NodeTransition operation.  This class contains an OperationState and a NodeTransitionResult. 
            The NodeTransitionResult is not valid until OperationState
            is Completed or Faulted.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeTransitionProgress.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.OperationState},Microsoft.ServiceFabric.Common.NodeTransitionResult)">
            <summary>
            Initializes a new instance of the NodeTransitionProgress class.
            </summary>
            <param name="state">The state of the operation. Possible values include: 'Invalid', 'Running', 'RollingBack',
            'Completed', 'Faulted', 'Cancelled', 'ForceCancelled'</param>
            <param name="nodeTransitionResult">Represents information about an operation in a terminal state (Completed or
            Faulted).</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeTransitionProgress.State">
            <summary>
            Gets the state of the operation. Possible values include: 'Invalid', 'Running', 'RollingBack', 'Completed',
            'Faulted', 'Cancelled', 'ForceCancelled'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeTransitionProgress.NodeTransitionResult">
            <summary>
            Gets represents information about an operation in a terminal state (Completed or Faulted).
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeTransitionResult">
            <summary>
            Represents information about an operation in a terminal state (Completed or Faulted).
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeTransitionResult.#ctor(System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.NodeResult)">
            <summary>
            Initializes a new instance of the NodeTransitionResult class.
            </summary>
            <param name="errorCode">If OperationState is Completed, this is 0.  If OperationState is Faulted, this is an error
            code indicating the reason.</param>
            <param name="nodeResult">Contains information about a node that was targeted by a user-induced operation.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeTransitionResult.ErrorCode">
            <summary>
            Gets if OperationState is Completed, this is 0.  If OperationState is Faulted, this is an error code indicating the
            reason.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeTransitionResult.NodeResult">
            <summary>
            Gets contains information about a node that was targeted by a user-induced operation.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeTransitionType">
            <summary>
            Defines values for NodeTransitionType.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeTransitionType.Invalid">
            <summary>
            Reserved.  Do not pass into API.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeTransitionType.Start">
            <summary>
            Transition a stopped node to up.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeTransitionType.Stop">
            <summary>
            Transition an up node to stopped.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeTypeHealthPolicyMapItem">
            <summary>
            Defines an item in NodeTypeHealthPolicyMap.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeTypeHealthPolicyMapItem.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the NodeTypeHealthPolicyMapItem class.
            </summary>
            <param name="key">The key of the node type health policy map item. This is the name of the node type.</param>
            <param name="value">The value of the node type health policy map item.
            If the percentage is respected but there is at least one unhealthy node in the node type, the health is evaluated
            as Warning.
            The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the node
            type.
            The computation rounds up to tolerate one failure on small numbers of nodes.
            The max percent unhealthy nodes allowed for the node type. Must be between zero and 100.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeTypeHealthPolicyMapItem.Key">
            <summary>
            Gets the key of the node type health policy map item. This is the name of the node type.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeTypeHealthPolicyMapItem.Value">
            <summary>
            Gets the value of the node type health policy map item.
            If the percentage is respected but there is at least one unhealthy node in the node type, the health is evaluated
            as Warning.
            The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the node
            type.
            The computation rounds up to tolerate one failure on small numbers of nodes.
            The max percent unhealthy nodes allowed for the node type. Must be between zero and 100.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeTypeNodesHealthEvaluation">
            <summary>
            Represents health evaluation for nodes of a particular node type. The node type nodes evaluation can be returned
            when cluster health evaluation returns unhealthy aggregated health state, either Error or Warning. It contains
            health evaluations for each unhealthy node of the included node type that impacted current aggregated health state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeTypeNodesHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the NodeTypeNodesHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="nodeTypeName">The node type name as defined in the cluster manifest.</param>
            <param name="maxPercentUnhealthyNodes">Maximum allowed percentage of unhealthy nodes for the node type, specified
            as an entry in NodeTypeHealthPolicyMap.</param>
            <param name="totalCount">Total number of nodes of the node type found in the health store.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the aggregated health state. Includes
            all the unhealthy NodeHealthEvaluation of this node type that impacted the aggregated health.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeTypeNodesHealthEvaluation.NodeTypeName">
            <summary>
            Gets the node type name as defined in the cluster manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeTypeNodesHealthEvaluation.MaxPercentUnhealthyNodes">
            <summary>
            Gets maximum allowed percentage of unhealthy nodes for the node type, specified as an entry in
            NodeTypeHealthPolicyMap.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeTypeNodesHealthEvaluation.TotalCount">
            <summary>
            Gets total number of nodes of the node type found in the health store.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeTypeNodesHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy
            NodeHealthEvaluation of this node type that impacted the aggregated health.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeUpEvent">
            <summary>
            Node Up event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeUpEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.NodeName,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the NodeUpEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="nodeInstance">Id of Node instance.</param>
            <param name="lastNodeDownAt">Time when Node was last down.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeUpEvent.NodeInstance">
            <summary>
            Gets id of Node instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeUpEvent.LastNodeDownAt">
            <summary>
            Gets time when Node was last down.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeUpgradePhase">
            <summary>
            Defines values for NodeUpgradePhase.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeUpgradePhase.Invalid">
            <summary>
            Indicates the upgrade state is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeUpgradePhase.PreUpgradeSafetyCheck">
            <summary>
            The upgrade has not started yet due to pending safety checks. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeUpgradePhase.Upgrading">
            <summary>
            The upgrade is in progress. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeUpgradePhase.PostUpgradeSafetyCheck">
            <summary>
            The upgrade has completed and post upgrade safety checks are being performed. The value is 3.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeUpgradeProgressInfo">
            <summary>
            Information about the upgrading node and its status
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeUpgradeProgressInfo.#ctor(Microsoft.ServiceFabric.Common.NodeName,System.Nullable{Microsoft.ServiceFabric.Common.NodeUpgradePhase},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.SafetyCheckWrapper})">
            <summary>
            Initializes a new instance of the NodeUpgradeProgressInfo class.
            </summary>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="upgradePhase">The state of the upgrading node. Possible values include: 'Invalid',
            'PreUpgradeSafetyCheck', 'Upgrading', 'PostUpgradeSafetyCheck'</param>
            <param name="pendingSafetyChecks">List of pending safety checks</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeUpgradeProgressInfo.NodeName">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeUpgradeProgressInfo.UpgradePhase">
            <summary>
            Gets the state of the upgrading node. Possible values include: 'Invalid', 'PreUpgradeSafetyCheck', 'Upgrading',
            'PostUpgradeSafetyCheck'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeUpgradeProgressInfo.PendingSafetyChecks">
            <summary>
            Gets list of pending safety checks
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.OperatingSystemType">
            <summary>
            Defines values for OperatingSystemType.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.OperatingSystemType.Linux">
            <summary>
            The required operating system is Linux.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.OperatingSystemType.Windows">
            <summary>
            The required operating system is Windows.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.OperationState">
            <summary>
            Defines values for OperationState.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.OperationState.Invalid">
            <summary>
            The operation state is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.OperationState.Running">
            <summary>
            The operation is in progress.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.OperationState.RollingBack">
            <summary>
            The operation is rolling back internal system state because it encountered a fatal error or was cancelled by the
            user.  "RollingBack"     does not refer to user state.  For example, if CancelOperation is called on a command of
            type PartitionDataLoss, state of "RollingBack" does not mean service data is being restored (assuming the command
            has progressed far enough to cause data loss). It means the system is rolling back/cleaning up internal system
            state associated with the command.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.OperationState.Completed">
            <summary>
            The operation has completed successfully and is no longer running.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.OperationState.Faulted">
            <summary>
            The operation has failed and is no longer running.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.OperationState.Cancelled">
            <summary>
            The operation was cancelled by the user using CancelOperation, and is no longer running.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.OperationState.ForceCancelled">
            <summary>
            The operation was cancelled by the user using CancelOperation, with the force parameter set to true.  It is no
            longer running.  Refer to CancelOperation for more details.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.OperationStatus">
            <summary>
            Contains the OperationId, OperationState, and OperationType for user-induced operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.OperationStatus.#ctor(System.Nullable{System.Guid},System.Nullable{Microsoft.ServiceFabric.Common.OperationState},System.Nullable{Microsoft.ServiceFabric.Common.OperationType})">
            <summary>
            Initializes a new instance of the OperationStatus class.
            </summary>
            <param name="operationId">A GUID that identifies a call to this API.  This is also passed into the corresponding
            GetProgress API.</param>
            <param name="state">The state of the operation. Possible values include: 'Invalid', 'Running', 'RollingBack',
            'Completed', 'Faulted', 'Cancelled', 'ForceCancelled'</param>
            <param name="type">The type of the operation. Possible values include: 'Invalid', 'PartitionDataLoss',
            'PartitionQuorumLoss', 'PartitionRestart', 'NodeTransition'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.OperationStatus.OperationId">
            <summary>
            Gets a GUID that identifies a call to this API.  This is also passed into the corresponding GetProgress API.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.OperationStatus.State">
            <summary>
            Gets the state of the operation. Possible values include: 'Invalid', 'Running', 'RollingBack', 'Completed',
            'Faulted', 'Cancelled', 'ForceCancelled'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.OperationStatus.Type">
            <summary>
            Gets the type of the operation. Possible values include: 'Invalid', 'PartitionDataLoss', 'PartitionQuorumLoss',
            'PartitionRestart', 'NodeTransition'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.OperationType">
            <summary>
            Defines values for OperationType.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.OperationType.Invalid">
            <summary>
            The operation state is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.OperationType.PartitionDataLoss">
            <summary>
            An operation started using the StartDataLoss API.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.OperationType.PartitionQuorumLoss">
            <summary>
            An operation started using the StartQuorumLoss API.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.OperationType.PartitionRestart">
            <summary>
            An operation started using the StartPartitionRestart API.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.OperationType.NodeTransition">
            <summary>
            An operation started using the StartNodeTransition API.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Ordering">
            <summary>
            Defines values for Ordering.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.Ordering.Desc">
            <summary>
            Descending sort order.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.Ordering.Asc">
            <summary>
            Ascending sort order.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PackageSharingPolicyInfo">
            <summary>
            Represents a policy for the package sharing.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PackageSharingPolicyInfo.#ctor(System.String,System.Nullable{Microsoft.ServiceFabric.Common.PackageSharingPolicyScope})">
            <summary>
            Initializes a new instance of the PackageSharingPolicyInfo class.
            </summary>
            <param name="sharedPackageName">The name of code, configuration or data package that should be shared.</param>
            <param name="packageSharingScope">Represents the scope for PackageSharingPolicy. This is specified during
            DeployServicePackageToNode operation. Possible values include: 'None', 'All', 'Code', 'Config', 'Data'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PackageSharingPolicyInfo.SharedPackageName">
            <summary>
            Gets the name of code, configuration or data package that should be shared.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PackageSharingPolicyInfo.PackageSharingScope">
            <summary>
            Gets represents the scope for PackageSharingPolicy. This is specified during DeployServicePackageToNode operation.
            Possible values include: 'None', 'All', 'Code', 'Config', 'Data'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PackageSharingPolicyScope">
            <summary>
            Defines values for PackageSharingPolicyScope.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PackageSharingPolicyScope.None">
            <summary>
            No package sharing policy scope. The value is 0.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PackageSharingPolicyScope.All">
            <summary>
            Share all code, config and data packages from corresponding service manifest. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PackageSharingPolicyScope.Code">
            <summary>
            Share all code packages from corresponding service manifest. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PackageSharingPolicyScope.Config">
            <summary>
            Share all config packages from corresponding service manifest. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PackageSharingPolicyScope.Data">
            <summary>
            Share all data packages from corresponding service manifest. The value is 4.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionAccessStatus">
            <summary>
            Defines values for PartitionAccessStatus.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PartitionAccessStatus.Invalid">
            <summary>
            Indicates that the read or write operation access status is not valid. This value is not returned to the caller.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PartitionAccessStatus.Granted">
            <summary>
            Indicates that the read or write operation access is granted and the operation is allowed.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PartitionAccessStatus.ReconfigurationPending">
            <summary>
            Indicates that the client should try again later, because a reconfiguration is in progress.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PartitionAccessStatus.NotPrimary">
            <summary>
            Indicates that this client request was received by a replica that is not a Primary replica.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PartitionAccessStatus.NoWriteQuorum">
            <summary>
            Indicates that no write quorum is available and, therefore, no write operation can be accepted.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionAnalysisEvent">
            <summary>
            Represents the base for all Partition Analysis Events.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionAnalysisEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.Nullable{Microsoft.ServiceFabric.Common.FabricEventKind},Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.AnalysisEventMetadata,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the PartitionAnalysisEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="kind">The kind of FabricEvent.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="metadata">Metadata about an Analysis Event.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionAnalysisEvent.Metadata">
            <summary>
            Gets metadata about an Analysis Event.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionBackupConfigurationInfo">
            <summary>
            Backup configuration information, for a specific partition, specifying what backup policy is being applied and
            suspend description, if any.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionBackupConfigurationInfo.#ctor(System.String,System.Nullable{Microsoft.ServiceFabric.Common.BackupPolicyScope},Microsoft.ServiceFabric.Common.BackupSuspensionInfo,Microsoft.ServiceFabric.Common.ServiceName,Microsoft.ServiceFabric.Common.PartitionId)">
            <summary>
            Initializes a new instance of the PartitionBackupConfigurationInfo class.
            </summary>
            <param name="policyName">The name of the backup policy which is applicable to this Service Fabric application or
            service or partition.</param>
            <param name="policyInheritedFrom">Specifies the scope at which the backup policy is applied.
            . Possible values include: 'Invalid', 'Partition', 'Service', 'Application'</param>
            <param name="suspensionInfo">Describes the backup suspension details.
            </param>
            <param name="serviceName">The full name of the service with 'fabric:' URI scheme.</param>
            <param name="partitionId">The partition ID identifying the partition.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionBackupConfigurationInfo.ServiceName">
            <summary>
            Gets the full name of the service with 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionBackupConfigurationInfo.PartitionId">
            <summary>
            Gets the partition ID identifying the partition.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionBackupEntity">
            <summary>
            Identifies the Service Fabric stateful partition which is being backed up.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionBackupEntity.#ctor(Microsoft.ServiceFabric.Common.ServiceName,Microsoft.ServiceFabric.Common.PartitionId)">
            <summary>
            Initializes a new instance of the PartitionBackupEntity class.
            </summary>
            <param name="serviceName">The full name of the service with 'fabric:' URI scheme.</param>
            <param name="partitionId">The partition ID identifying the partition.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionBackupEntity.ServiceName">
            <summary>
            Gets the full name of the service with 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionBackupEntity.PartitionId">
            <summary>
            Gets the partition ID identifying the partition.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionDataLossProgress">
            <summary>
            Information about a partition data loss user-induced operation.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionDataLossProgress.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.OperationState},Microsoft.ServiceFabric.Common.InvokeDataLossResult)">
            <summary>
            Initializes a new instance of the PartitionDataLossProgress class.
            </summary>
            <param name="state">The state of the operation. Possible values include: 'Invalid', 'Running', 'RollingBack',
            'Completed', 'Faulted', 'Cancelled', 'ForceCancelled'</param>
            <param name="invokeDataLossResult">Represents information about an operation in a terminal state (Completed or
            Faulted).</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionDataLossProgress.State">
            <summary>
            Gets the state of the operation. Possible values include: 'Invalid', 'Running', 'RollingBack', 'Completed',
            'Faulted', 'Cancelled', 'ForceCancelled'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionDataLossProgress.InvokeDataLossResult">
            <summary>
            Gets represents information about an operation in a terminal state (Completed or Faulted).
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionEvent">
            <summary>
            Represents the base for all Partition Events.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.Nullable{Microsoft.ServiceFabric.Common.FabricEventKind},Microsoft.ServiceFabric.Common.PartitionId,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the PartitionEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="kind">The kind of FabricEvent.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionEvent.PartitionId">
            <summary>
            Gets an internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when
            the service was created. The partition ID is unique and does not change for the lifetime of the service. If the
            same service was deleted and recreated the IDs of its partitions would be different.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionHealth">
            <summary>
            Information about the health of a Service Fabric partition.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionHealth.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvent},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper},Microsoft.ServiceFabric.Common.HealthStatistics,Microsoft.ServiceFabric.Common.PartitionId,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ReplicaHealthState})">
            <summary>
            Initializes a new instance of the PartitionHealth class.
            </summary>
            <param name="aggregatedHealthState">The HealthState representing the aggregated health state of the entity computed
            by Health Manager.
            The health evaluation of the entity reflects all events reported on the entity and its children (if any).
            The aggregation is done by applying the desired health policy.
            . Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            
            The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
            </param>
            <param name="healthEvents">The list of health events reported on the entity.</param>
            <param name="unhealthyEvaluations">The unhealthy evaluations that show why the current aggregated health state was
            returned by Health Manager.</param>
            <param name="healthStatistics">Shows the health statistics for all children types of the queried entity.</param>
            <param name="partitionId">ID of the partition whose health information is described by this object.</param>
            <param name="replicaHealthStates">The list of replica health states associated with the partition.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealth.PartitionId">
            <summary>
            Gets ID of the partition whose health information is described by this object.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealth.ReplicaHealthStates">
            <summary>
            Gets the list of replica health states associated with the partition.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionHealthEvaluation">
            <summary>
            Represents health evaluation for a partition, containing information about the data and the algorithm used by
            health store to evaluate health. The evaluation is returned only when the aggregated health state is either Error
            or Warning.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,Microsoft.ServiceFabric.Common.PartitionId,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the PartitionHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="partitionId">Id of the partition whose health evaluation is described by this object.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the current aggregated health state of
            the partition. The types of the unhealthy evaluations can be ReplicasHealthEvaluation or
            EventHealthEvaluation.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealthEvaluation.PartitionId">
            <summary>
            Gets id of the partition whose health evaluation is described by this object.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the current aggregated health state of the partition. The types of
            the unhealthy evaluations can be ReplicasHealthEvaluation or EventHealthEvaluation.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionHealthReportExpiredEvent">
            <summary>
            Partition Health Report Expired event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionHealthReportExpiredEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.PartitionId,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the PartitionHealthReportExpiredEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="sourceId">Id of report source.</param>
            <param name="property">Describes the property.</param>
            <param name="healthState">Describes the property health state.</param>
            <param name="timeToLiveMs">Time to live in milli-seconds.</param>
            <param name="sequenceNumber">Sequence number of report.</param>
            <param name="description">Description of report.</param>
            <param name="removeWhenExpired">Indicates the removal when it expires.</param>
            <param name="sourceUtcTimestamp">Source time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealthReportExpiredEvent.SourceId">
            <summary>
            Gets id of report source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealthReportExpiredEvent.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealthReportExpiredEvent.HealthState">
            <summary>
            Gets the property health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealthReportExpiredEvent.TimeToLiveMs">
            <summary>
            Gets time to live in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealthReportExpiredEvent.SequenceNumber">
            <summary>
            Gets sequence number of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealthReportExpiredEvent.Description">
            <summary>
            Gets description of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealthReportExpiredEvent.RemoveWhenExpired">
            <summary>
            Gets indicates the removal when it expires.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealthReportExpiredEvent.SourceUtcTimestamp">
            <summary>
            Gets source time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionHealthState">
            <summary>
            Represents the health state of a partition, which contains the partition identifier and its aggregated health
            state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionHealthState.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},Microsoft.ServiceFabric.Common.PartitionId)">
            <summary>
            Initializes a new instance of the PartitionHealthState class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="partitionId">Id of the partition whose health state is described by this object.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealthState.PartitionId">
            <summary>
            Gets id of the partition whose health state is described by this object.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionHealthStateChunk">
            <summary>
            Represents the health state chunk of a partition, which contains the partition ID, its aggregated health state and
            any replicas that respect the filters in the cluster health chunk query description.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionHealthStateChunk.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaHealthStateChunkList)">
            <summary>
            Initializes a new instance of the PartitionHealthStateChunk class.
            </summary>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="partitionId">The Id of the partition.</param>
            <param name="replicaHealthStateChunks">The list of replica health state chunks belonging to the partition that
            respect the filters in the cluster health chunk query description.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealthStateChunk.PartitionId">
            <summary>
            Gets the Id of the partition.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealthStateChunk.ReplicaHealthStateChunks">
            <summary>
            Gets the list of replica health state chunks belonging to the partition that respect the filters in the cluster
            health chunk query description.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionHealthStateChunkList">
            <summary>
            The list of partition health state chunks that respect the input filters in the chunk query description.
            Returned by get cluster health state chunks query as part of the parent application hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionHealthStateChunkList.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.PartitionHealthStateChunk})">
            <summary>
            Initializes a new instance of the PartitionHealthStateChunkList class.
            </summary>
            <param name="items">The list of partition health state chunks that respect the input filters in the chunk query.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealthStateChunkList.Items">
            <summary>
            Gets the list of partition health state chunks that respect the input filters in the chunk query.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionHealthStateFilter">
            <summary>
            Defines matching criteria to determine whether a partition should be included as a child of a service in the
            cluster health chunk.
            The partitions are only returned if the parent entities match a filter specified in the cluster health chunk query
            description. The parent service and application must be included in the cluster health chunk.
            One filter can match zero, one or multiple partitions, depending on its properties.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionHealthStateFilter.#ctor(System.Nullable{System.Guid},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ReplicaHealthStateFilter})">
            <summary>
            Initializes a new instance of the PartitionHealthStateFilter class.
            </summary>
            <param name="partitionIdFilter">ID of the partition that matches the filter. The filter is applied only to the
            specified partition, if it exists.
            If the partition doesn't exist, no partition is returned in the cluster health chunk based on this filter.
            If the partition exists, it is included in the cluster health chunk if it respects the other filter properties.
            If not specified, all partitions that match the parent filters (if any) are taken into consideration and matched
            against the other filter members, like health state filter.
            </param>
            <param name="healthStateFilter">The filter for the health state of the partitions. It allows selecting partitions
            if they match the desired health states.
            The possible values are integer value of one of the following health states. Only partitions that match the filter
            are returned. All partitions are used to evaluate the cluster aggregated health state.
            If not specified, default value is None, unless the partition ID is specified. If the filter has default value and
            partition ID is specified, the matching partition is returned.
            The state values are flag-based enumeration, so the value could be a combination of these values obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6, it matches partitions with HealthState value of OK (2) and Warning (4).
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name="replicaFilters">Defines a list of filters that specify which replicas to be included in the returned
            cluster health chunk as children of the parent partition. The replicas are returned only if the parent partition
            matches a filter.
            If the list is empty, no replicas are returned. All the replicas are used to evaluate the parent partition
            aggregated health state, regardless of the input filters.
            The partition filter may specify multiple replica filters.
            For example, it can specify a filter to return all replicas with health state Error and another filter to always
            include a replica identified by its replica id.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealthStateFilter.PartitionIdFilter">
            <summary>
            Gets ID of the partition that matches the filter. The filter is applied only to the specified partition, if it
            exists.
            If the partition doesn't exist, no partition is returned in the cluster health chunk based on this filter.
            If the partition exists, it is included in the cluster health chunk if it respects the other filter properties.
            If not specified, all partitions that match the parent filters (if any) are taken into consideration and matched
            against the other filter members, like health state filter.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealthStateFilter.HealthStateFilter">
            <summary>
            Gets the filter for the health state of the partitions. It allows selecting partitions if they match the desired
            health states.
            The possible values are integer value of one of the following health states. Only partitions that match the filter
            are returned. All partitions are used to evaluate the cluster aggregated health state.
            If not specified, default value is None, unless the partition ID is specified. If the filter has default value and
            partition ID is specified, the matching partition is returned.
            The state values are flag-based enumeration, so the value could be a combination of these values obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6, it matches partitions with HealthState value of OK (2) and Warning (4).
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionHealthStateFilter.ReplicaFilters">
            <summary>
            Gets defines a list of filters that specify which replicas to be included in the returned cluster health chunk as
            children of the parent partition. The replicas are returned only if the parent partition matches a filter.
            If the list is empty, no replicas are returned. All the replicas are used to evaluate the parent partition
            aggregated health state, regardless of the input filters.
            The partition filter may specify multiple replica filters.
            For example, it can specify a filter to return all replicas with health state Error and another filter to always
            include a replica identified by its replica id.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionInformation">
            <summary>
            Information about the partition identity, partitioning scheme and keys supported by it.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionInformation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ServicePartitionKind},Microsoft.ServiceFabric.Common.PartitionId)">
            <summary>
            Initializes a new instance of the PartitionInformation class.
            </summary>
            <param name="servicePartitionKind">The kind of partitioning scheme used to partition the service.</param>
            <param name="id">An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly
            generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the
            service. If the same service was deleted and recreated the IDs of its partitions would be different.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionInformation.Id">
            <summary>
            Gets an internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when
            the service was created. The partition ID is unique and does not change for the lifetime of the service. If the
            same service was deleted and recreated the IDs of its partitions would be different.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionInformation.ServicePartitionKind">
            <summary>
            Gets the kind of partitioning scheme used to partition the service.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionInstanceCountScaleMechanism">
            <summary>
            Represents a scaling mechanism for adding or removing instances of stateless service partition.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionInstanceCountScaleMechanism.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the PartitionInstanceCountScaleMechanism class.
            </summary>
            <param name="minInstanceCount">Minimum number of instances of the partition.</param>
            <param name="maxInstanceCount">Maximum number of instances of the partition.</param>
            <param name="scaleIncrement">The number of instances to add or remove during a scaling operation.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionInstanceCountScaleMechanism.MinInstanceCount">
            <summary>
            Gets minimum number of instances of the partition.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionInstanceCountScaleMechanism.MaxInstanceCount">
            <summary>
            Gets maximum number of instances of the partition.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionInstanceCountScaleMechanism.ScaleIncrement">
            <summary>
            Gets the number of instances to add or remove during a scaling operation.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionLoadInformation">
            <summary>
            Represents load information for a partition, which contains the primary and secondary reported load metrics.
            In case there is no load reported, PartitionLoadInformation will contain the default load for the service of the
            partition.
            For default loads, LoadMetricReport's LastReportedUtc is set to 0.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionLoadInformation.#ctor(Microsoft.ServiceFabric.Common.PartitionId,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.LoadMetricReport},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.LoadMetricReport})">
            <summary>
            Initializes a new instance of the PartitionLoadInformation class.
            </summary>
            <param name="partitionId">Id of the partition.</param>
            <param name="primaryLoadMetricReports">Array of load reports from the primary replica for this partition.</param>
            <param name="secondaryLoadMetricReports">Array of aggregated load reports from all secondary replicas for this
            partition.
            Array only contains the latest reported load for each metric.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionLoadInformation.PartitionId">
            <summary>
            Gets id of the partition.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionLoadInformation.PrimaryLoadMetricReports">
            <summary>
            Gets array of load reports from the primary replica for this partition.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionLoadInformation.SecondaryLoadMetricReports">
            <summary>
            Gets array of aggregated load reports from all secondary replicas for this partition.
            Array only contains the latest reported load for each metric.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionMetricLoadDescription">
            <summary>
            Represents load information for a partition, which contains the metrics load information about primary, all
            secondary replicas/instances or a specific secondary replica/instance located on a specific node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionMetricLoadDescription.#ctor(Microsoft.ServiceFabric.Common.PartitionId,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.MetricLoadDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.MetricLoadDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ReplicaMetricLoadDescription})">
            <summary>
            Initializes a new instance of the PartitionMetricLoadDescription class.
            </summary>
            <param name="partitionId">Id of the partition.</param>
            <param name="primaryReplicaLoadEntries">Partition's load information for primary replica, in case partition is from
            a stateful service.
            </param>
            <param name="secondaryReplicasOrInstancesLoadEntries">Partition's load information for all secondary replicas or
            instances.
            </param>
            <param name="secondaryReplicaOrInstanceLoadEntriesPerNode">Partition's load information for a specific secondary
            replica or instance located on a specific node.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionMetricLoadDescription.PartitionId">
            <summary>
            Gets id of the partition.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionMetricLoadDescription.PrimaryReplicaLoadEntries">
            <summary>
            Gets partition's load information for primary replica, in case partition is from a stateful service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionMetricLoadDescription.SecondaryReplicasOrInstancesLoadEntries">
            <summary>
            Gets partition's load information for all secondary replicas or instances.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionMetricLoadDescription.SecondaryReplicaOrInstanceLoadEntriesPerNode">
            <summary>
            Gets partition's load information for a specific secondary replica or instance located on a specific node.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionNewHealthReportEvent">
            <summary>
            Partition Health Report Created event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionNewHealthReportEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.PartitionId,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the PartitionNewHealthReportEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="sourceId">Id of report source.</param>
            <param name="property">Describes the property.</param>
            <param name="healthState">Describes the property health state.</param>
            <param name="timeToLiveMs">Time to live in milli-seconds.</param>
            <param name="sequenceNumber">Sequence number of report.</param>
            <param name="description">Description of report.</param>
            <param name="removeWhenExpired">Indicates the removal when it expires.</param>
            <param name="sourceUtcTimestamp">Source time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionNewHealthReportEvent.SourceId">
            <summary>
            Gets id of report source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionNewHealthReportEvent.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionNewHealthReportEvent.HealthState">
            <summary>
            Gets the property health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionNewHealthReportEvent.TimeToLiveMs">
            <summary>
            Gets time to live in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionNewHealthReportEvent.SequenceNumber">
            <summary>
            Gets sequence number of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionNewHealthReportEvent.Description">
            <summary>
            Gets description of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionNewHealthReportEvent.RemoveWhenExpired">
            <summary>
            Gets indicates the removal when it expires.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionNewHealthReportEvent.SourceUtcTimestamp">
            <summary>
            Gets source time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionPrimaryMoveAnalysisEvent">
            <summary>
            Partition Primary Move Analysis event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionPrimaryMoveAnalysisEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.AnalysisEventMetadata,System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the PartitionPrimaryMoveAnalysisEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="metadata">Metadata about an Analysis Event.</param>
            <param name="whenMoveCompleted">Time when the move was completed.</param>
            <param name="previousNode">The name of a Service Fabric node.</param>
            <param name="currentNode">The name of a Service Fabric node.</param>
            <param name="moveReason">Move reason.</param>
            <param name="relevantTraces">Relevant traces.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionPrimaryMoveAnalysisEvent.WhenMoveCompleted">
            <summary>
            Gets time when the move was completed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionPrimaryMoveAnalysisEvent.PreviousNode">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionPrimaryMoveAnalysisEvent.CurrentNode">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionPrimaryMoveAnalysisEvent.MoveReason">
            <summary>
            Gets move reason.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionPrimaryMoveAnalysisEvent.RelevantTraces">
            <summary>
            Gets relevant traces.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionQuorumLossProgress">
            <summary>
            Information about a partition quorum loss user-induced operation.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionQuorumLossProgress.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.OperationState},Microsoft.ServiceFabric.Common.InvokeQuorumLossResult)">
            <summary>
            Initializes a new instance of the PartitionQuorumLossProgress class.
            </summary>
            <param name="state">The state of the operation. Possible values include: 'Invalid', 'Running', 'RollingBack',
            'Completed', 'Faulted', 'Cancelled', 'ForceCancelled'</param>
            <param name="invokeQuorumLossResult">Represents information about an operation in a terminal state (Completed or
            Faulted).</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionQuorumLossProgress.State">
            <summary>
            Gets the state of the operation. Possible values include: 'Invalid', 'Running', 'RollingBack', 'Completed',
            'Faulted', 'Cancelled', 'ForceCancelled'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionQuorumLossProgress.InvokeQuorumLossResult">
            <summary>
            Gets represents information about an operation in a terminal state (Completed or Faulted).
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionReconfiguredEvent">
            <summary>
            Partition Reconfiguration event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionReconfiguredEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the PartitionReconfiguredEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="nodeInstanceId">Id of Node instance.</param>
            <param name="serviceType">Type of Service.</param>
            <param name="ccEpochDataLossVersion">CcEpochDataLoss version.</param>
            <param name="ccEpochConfigVersion">CcEpochConfig version.</param>
            <param name="reconfigType">Type of reconfiguration.</param>
            <param name="result">Describes reconfiguration result.</param>
            <param name="phase0DurationMs">Duration of Phase0 in milli-seconds.</param>
            <param name="phase1DurationMs">Duration of Phase1 in milli-seconds.</param>
            <param name="phase2DurationMs">Duration of Phase2 in milli-seconds.</param>
            <param name="phase3DurationMs">Duration of Phase3 in milli-seconds.</param>
            <param name="phase4DurationMs">Duration of Phase4 in milli-seconds.</param>
            <param name="totalDurationMs">Total duration in milli-seconds.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionReconfiguredEvent.NodeName">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionReconfiguredEvent.NodeInstanceId">
            <summary>
            Gets id of Node instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionReconfiguredEvent.ServiceType">
            <summary>
            Gets type of Service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionReconfiguredEvent.CcEpochDataLossVersion">
            <summary>
            Gets ccEpochDataLoss version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionReconfiguredEvent.CcEpochConfigVersion">
            <summary>
            Gets ccEpochConfig version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionReconfiguredEvent.ReconfigType">
            <summary>
            Gets type of reconfiguration.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionReconfiguredEvent.Result">
            <summary>
            Gets reconfiguration result.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionReconfiguredEvent.Phase0DurationMs">
            <summary>
            Gets duration of Phase0 in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionReconfiguredEvent.Phase1DurationMs">
            <summary>
            Gets duration of Phase1 in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionReconfiguredEvent.Phase2DurationMs">
            <summary>
            Gets duration of Phase2 in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionReconfiguredEvent.Phase3DurationMs">
            <summary>
            Gets duration of Phase3 in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionReconfiguredEvent.Phase4DurationMs">
            <summary>
            Gets duration of Phase4 in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionReconfiguredEvent.TotalDurationMs">
            <summary>
            Gets total duration in milli-seconds.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionRestartProgress">
            <summary>
            Information about a partition restart user-induced operation.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionRestartProgress.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.OperationState},Microsoft.ServiceFabric.Common.RestartPartitionResult)">
            <summary>
            Initializes a new instance of the PartitionRestartProgress class.
            </summary>
            <param name="state">The state of the operation. Possible values include: 'Invalid', 'Running', 'RollingBack',
            'Completed', 'Faulted', 'Cancelled', 'ForceCancelled'</param>
            <param name="restartPartitionResult">Represents information about an operation in a terminal state (Completed or
            Faulted).</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionRestartProgress.State">
            <summary>
            Gets the state of the operation. Possible values include: 'Invalid', 'Running', 'RollingBack', 'Completed',
            'Faulted', 'Cancelled', 'ForceCancelled'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionRestartProgress.RestartPartitionResult">
            <summary>
            Gets represents information about an operation in a terminal state (Completed or Faulted).
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionSafetyCheck">
            <summary>
            Represents a safety check for the service partition being performed by service fabric before continuing with
            operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionSafetyCheck.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.SafetyCheckKind},Microsoft.ServiceFabric.Common.PartitionId)">
            <summary>
            Initializes a new instance of the PartitionSafetyCheck class.
            </summary>
            <param name="kind">The kind of safety check performed by service fabric before continuing with the operations.
            These checks ensure the availability of the service and the reliability of the state. Following are the kinds of
            safety checks.</param>
            <param name="partitionId">Id of the partition which is undergoing the safety check.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionSafetyCheck.PartitionId">
            <summary>
            Gets id of the partition which is undergoing the safety check.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionScheme">
            <summary>
            Defines values for PartitionScheme.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PartitionScheme.Invalid">
            <summary>
            Indicates the partition kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PartitionScheme.Singleton">
            <summary>
            Indicates that the partition is based on string names, and is a SingletonPartitionSchemeDescription object, The
            value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PartitionScheme.UniformInt64Range">
            <summary>
            Indicates that the partition is based on Int64 key ranges, and is a UniformInt64RangePartitionSchemeDescription
            object. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PartitionScheme.Named">
            <summary>
            Indicates that the partition is based on string names, and is a NamedPartitionSchemeDescription object. The value
            is 3.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionSchemeDescription">
            <summary>
            Describes how the service is partitioned.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionSchemeDescription.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.PartitionScheme})">
            <summary>
            Initializes a new instance of the PartitionSchemeDescription class.
            </summary>
            <param name="partitionScheme">Enumerates the ways that a service can be partitioned.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionSchemeDescription.PartitionScheme">
            <summary>
            Gets enumerates the ways that a service can be partitioned.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionsHealthEvaluation">
            <summary>
            Represents health evaluation for the partitions of a service, containing health evaluations for each unhealthy
            partition that impacts current aggregated health state. Can be returned when evaluating service health and the
            aggregated health state is either Error or Warning.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionsHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the PartitionsHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="maxPercentUnhealthyPartitionsPerService">Maximum allowed percentage of unhealthy partitions per
            service from the ServiceTypeHealthPolicy.</param>
            <param name="totalCount">Total number of partitions of the service from the health store.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the aggregated health state. Includes
            all the unhealthy PartitionHealthEvaluation that impacted the aggregated health.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionsHealthEvaluation.MaxPercentUnhealthyPartitionsPerService">
            <summary>
            Gets maximum allowed percentage of unhealthy partitions per service from the ServiceTypeHealthPolicy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionsHealthEvaluation.TotalCount">
            <summary>
            Gets total number of partitions of the service from the health store.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PartitionsHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy
            PartitionHealthEvaluation that impacted the aggregated health.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PrimaryReplicatorStatus">
            <summary>
            Provides statistics about the Service Fabric Replicator, when it is functioning in a Primary role.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PrimaryReplicatorStatus.#ctor(Microsoft.ServiceFabric.Common.ReplicatorQueueStatus,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.RemoteReplicatorStatus})">
            <summary>
            Initializes a new instance of the PrimaryReplicatorStatus class.
            </summary>
            <param name="replicationQueueStatus">Details about the replication queue on the primary replicator.</param>
            <param name="remoteReplicators">The status of all the active and idle secondary replicators that the primary is
            aware of.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PrimaryReplicatorStatus.ReplicationQueueStatus">
            <summary>
            Gets details about the replication queue on the primary replicator.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PrimaryReplicatorStatus.RemoteReplicators">
            <summary>
            Gets the status of all the active and idle secondary replicators that the primary is aware of.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Probe">
            <summary>
            Probes have a number of fields that you can use to control their behavior.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Probe.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.ProbeExec,Microsoft.ServiceFabric.Common.ProbeHttpGet,Microsoft.ServiceFabric.Common.ProbeTcpSocket)">
            <summary>
            Initializes a new instance of the Probe class.
            </summary>
            <param name="initialDelaySeconds">The initial delay in seconds to start executing probe once codepackage has
            started.</param>
            <param name="periodSeconds">Periodic seconds to execute probe.</param>
            <param name="timeoutSeconds">Period after which probe is considered as failed if it hasn't completed
            successfully.</param>
            <param name="successThreshold">The count of successful probe executions after which probe is considered
            success.</param>
            <param name="failureThreshold">The count of failures after which probe is considered failed.</param>
            <param name="exec">Exec command to run inside the container.</param>
            <param name="httpGet">Http probe for the container.</param>
            <param name="tcpSocket">Tcp port to probe inside the container.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Probe.InitialDelaySeconds">
            <summary>
            Gets the initial delay in seconds to start executing probe once codepackage has started.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Probe.PeriodSeconds">
            <summary>
            Gets periodic seconds to execute probe.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Probe.TimeoutSeconds">
            <summary>
            Gets period after which probe is considered as failed if it hasn't completed successfully.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Probe.SuccessThreshold">
            <summary>
            Gets the count of successful probe executions after which probe is considered success.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Probe.FailureThreshold">
            <summary>
            Gets the count of failures after which probe is considered failed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Probe.Exec">
            <summary>
            Gets exec command to run inside the container.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Probe.HttpGet">
            <summary>
            Gets http probe for the container.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Probe.TcpSocket">
            <summary>
            Gets tcp port to probe inside the container.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ProbeExec">
            <summary>
            Exec command to run inside the container.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ProbeExec.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ProbeExec class.
            </summary>
            <param name="command">Comma separated command to run inside the container for example "sh, -c, echo hello
            world".</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ProbeExec.Command">
            <summary>
            Gets comma separated command to run inside the container for example "sh, -c, echo hello world".
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ProbeHttpGet">
            <summary>
            Http probe for the container.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ProbeHttpGet.#ctor(System.Nullable{System.Int32},System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ProbeHttpGetHeaders},System.Nullable{Microsoft.ServiceFabric.Common.Scheme})">
            <summary>
            Initializes a new instance of the ProbeHttpGet class.
            </summary>
            <param name="port">Port to access for probe.</param>
            <param name="path">Path to access on the HTTP request.</param>
            <param name="host">Host IP to connect to.</param>
            <param name="httpHeaders">Headers to set in the request.</param>
            <param name="scheme">Scheme for the http probe. Can be Http or Https. Possible values include: 'http',
            'https'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ProbeHttpGet.Port">
            <summary>
            Gets port to access for probe.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ProbeHttpGet.Path">
            <summary>
            Gets path to access on the HTTP request.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ProbeHttpGet.Host">
            <summary>
            Gets host IP to connect to.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ProbeHttpGet.HttpHeaders">
            <summary>
            Gets headers to set in the request.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ProbeHttpGet.Scheme">
            <summary>
            Gets scheme for the http probe. Can be Http or Https. Possible values include: 'http', 'https'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ProbeHttpGetHeaders">
            <summary>
            Http headers.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ProbeHttpGetHeaders.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ProbeHttpGetHeaders class.
            </summary>
            <param name="name">The name of the header.</param>
            <param name="value">The value of the header.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ProbeHttpGetHeaders.Name">
            <summary>
            Gets the name of the header.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ProbeHttpGetHeaders.Value">
            <summary>
            Gets the value of the header.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ProbeTcpSocket">
            <summary>
            Tcp port to probe inside the container.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ProbeTcpSocket.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the ProbeTcpSocket class.
            </summary>
            <param name="port">Port to access for probe.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ProbeTcpSocket.Port">
            <summary>
            Gets port to access for probe.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PropertyBatchDescriptionList">
            <summary>
            Describes a list of property batch operations to be executed. Either all or none of the operations will be
            committed.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PropertyBatchDescriptionList.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.PropertyBatchOperation})">
            <summary>
            Initializes a new instance of the PropertyBatchDescriptionList class.
            </summary>
            <param name="operations">A list of the property batch operations to be executed.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PropertyBatchDescriptionList.Operations">
            <summary>
            Gets a list of the property batch operations to be executed.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PropertyBatchInfo">
            <summary>
            Information about the results of a property batch.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PropertyBatchInfo.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.PropertyBatchInfoKind})">
            <summary>
            Initializes a new instance of the PropertyBatchInfo class.
            </summary>
            <param name="kind">The kind of property batch info, determined by the results of a property batch. The following
            are the possible values.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PropertyBatchInfo.Kind">
            <summary>
            Gets the kind of property batch info, determined by the results of a property batch. The following are the possible
            values.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PropertyBatchInfoKind">
            <summary>
            Defines values for PropertyBatchInfoKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PropertyBatchInfoKind.Invalid">
            <summary>
            Indicates the property batch info is invalid. All Service Fabric enumerations have the invalid type.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PropertyBatchInfoKind.Successful">
            <summary>
            The property batch succeeded.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PropertyBatchInfoKind.Failed">
            <summary>
            The property batch failed.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PropertyBatchOperation">
            <summary>
            Represents the base type for property operations that can be put into a batch and submitted.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PropertyBatchOperation.#ctor(System.String,System.Nullable{Microsoft.ServiceFabric.Common.PropertyBatchOperationKind})">
            <summary>
            Initializes a new instance of the PropertyBatchOperation class.
            </summary>
            <param name="propertyName">The name of the Service Fabric property.</param>
            <param name="kind">The kind of property batch operation, determined by the operation to be performed. The following
            are the possible values.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PropertyBatchOperation.PropertyName">
            <summary>
            Gets the name of the Service Fabric property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PropertyBatchOperation.Kind">
            <summary>
            Gets the kind of property batch operation, determined by the operation to be performed. The following are the
            possible values.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PropertyBatchOperationKind">
            <summary>
            Defines values for PropertyBatchOperationKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PropertyBatchOperationKind.Invalid">
            <summary>
            Indicates the property operation is invalid. All Service Fabric enumerations have the invalid type. The value is
            zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PropertyBatchOperationKind.Put">
            <summary>
            The operation will create or edit a property. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PropertyBatchOperationKind.Get">
            <summary>
            The operation will get a property. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PropertyBatchOperationKind.CheckExists">
            <summary>
            The operation will check that a property exists or doesn't exists, depending on the provided value. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PropertyBatchOperationKind.CheckSequence">
            <summary>
            The operation will ensure that the sequence number is equal to the provided value. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PropertyBatchOperationKind.Delete">
            <summary>
            The operation will delete a property. The value is 5.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PropertyBatchOperationKind.CheckValue">
            <summary>
            The operation will ensure that the value of a property is equal to the provided value. The value is 7.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PropertyDescription">
            <summary>
            Description of a Service Fabric property.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PropertyDescription.#ctor(System.String,Microsoft.ServiceFabric.Common.PropertyValue,System.String)">
            <summary>
            Initializes a new instance of the PropertyDescription class.
            </summary>
            <param name="propertyName">The name of the Service Fabric property.</param>
            <param name="value">Describes a Service Fabric property value.</param>
            <param name="customTypeId">The property's custom type ID. Using this property, the user is able to tag the type of
            the value of the property.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PropertyDescription.PropertyName">
            <summary>
            Gets the name of the Service Fabric property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PropertyDescription.CustomTypeId">
            <summary>
            Gets the property's custom type ID. Using this property, the user is able to tag the type of the value of the
            property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PropertyDescription.Value">
            <summary>
            Gets a Service Fabric property value.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PropertyInfo">
            <summary>
            Information about a Service Fabric property.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PropertyInfo.#ctor(System.String,Microsoft.ServiceFabric.Common.PropertyMetadata,Microsoft.ServiceFabric.Common.PropertyValue)">
            <summary>
            Initializes a new instance of the PropertyInfo class.
            </summary>
            <param name="name">The name of the Service Fabric property.</param>
            <param name="metadata">The metadata associated with a property, including the property's name.</param>
            <param name="value">Describes a Service Fabric property value.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PropertyInfo.Name">
            <summary>
            Gets the name of the Service Fabric property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PropertyInfo.Value">
            <summary>
            Gets a Service Fabric property value.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PropertyInfo.Metadata">
            <summary>
            Gets the metadata associated with a property, including the property's name.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PropertyMetadata">
            <summary>
            The metadata associated with a property, including the property's name.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PropertyMetadata.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.PropertyValueKind},System.String,Microsoft.ServiceFabric.Common.FabricName,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.String)">
            <summary>
            Initializes a new instance of the PropertyMetadata class.
            </summary>
            <param name="typeId">The kind of property, determined by the type of data. Following are the possible values.
            Possible values include: 'Invalid', 'Binary', 'Int64', 'Double', 'String', 'Guid'</param>
            <param name="customTypeId">The property's custom type ID.</param>
            <param name="parent">The name of the parent Service Fabric Name for the property. It could be thought of as the
            name-space/table under which the property exists.</param>
            <param name="sizeInBytes">The length of the serialized property value.</param>
            <param name="lastModifiedUtcTimestamp">Represents when the Property was last modified. Only write operations will
            cause this field to be updated.</param>
            <param name="sequenceNumber">The version of the property. Every time a property is modified, its sequence number is
            increased.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PropertyMetadata.TypeId">
            <summary>
            Gets the kind of property, determined by the type of data. Following are the possible values. Possible values
            include: 'Invalid', 'Binary', 'Int64', 'Double', 'String', 'Guid'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PropertyMetadata.CustomTypeId">
            <summary>
            Gets the property's custom type ID.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PropertyMetadata.Parent">
            <summary>
            Gets the name of the parent Service Fabric Name for the property. It could be thought of as the name-space/table
            under which the property exists.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PropertyMetadata.SizeInBytes">
            <summary>
            Gets the length of the serialized property value.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PropertyMetadata.LastModifiedUtcTimestamp">
            <summary>
            Gets represents when the Property was last modified. Only write operations will cause this field to be updated.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PropertyMetadata.SequenceNumber">
            <summary>
            Gets the version of the property. Every time a property is modified, its sequence number is increased.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PropertyValue">
            <summary>
            Describes a Service Fabric property value.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PropertyValue.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.PropertyValueKind})">
            <summary>
            Initializes a new instance of the PropertyValue class.
            </summary>
            <param name="kind">The kind of property, determined by the type of data. Following are the possible values.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PropertyValue.Kind">
            <summary>
            Gets the kind of property, determined by the type of data. Following are the possible values.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PropertyValueKind">
            <summary>
            Defines values for PropertyValueKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PropertyValueKind.Invalid">
            <summary>
            Indicates the property is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PropertyValueKind.Binary">
            <summary>
            The data inside the property is a binary blob. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PropertyValueKind.Int64">
            <summary>
            The data inside the property is an int64. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PropertyValueKind.Double">
            <summary>
            The data inside the property is a double. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PropertyValueKind.String">
            <summary>
            The data inside the property is a string. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PropertyValueKind.Guid">
            <summary>
            The data inside the property is a guid. The value is 5.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ProvisionApplicationTypeDescription">
            <summary>
            Describes the operation to register or provision an application type using an application package uploaded to the
            Service Fabric image store.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ProvisionApplicationTypeDescription.#ctor(System.String,System.Nullable{System.Boolean},System.Nullable{Microsoft.ServiceFabric.Common.ApplicationPackageCleanupPolicy})">
            <summary>
            Initializes a new instance of the ProvisionApplicationTypeDescription class.
            </summary>
            <param name="applicationTypeBuildPath">The relative path for the application package in the image store specified
            during the prior upload operation.</param>
            <param name="async">Indicates whether or not provisioning should occur asynchronously. When set to true, the
            provision operation returns when the request is accepted by the system, and the provision operation continues
            without any timeout limit. The default value is false. For large application packages, we recommend setting the
            value to true.</param>
            <param name="applicationPackageCleanupPolicy">The kind of action that needs to be taken for cleaning up the
            application package after successful provision. Possible values include: 'Invalid', 'Default', 'Automatic',
            'Manual'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ProvisionApplicationTypeDescription.ApplicationTypeBuildPath">
            <summary>
            Gets the relative path for the application package in the image store specified during the prior upload operation.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ProvisionApplicationTypeDescription.ApplicationPackageCleanupPolicy">
            <summary>
            Gets the kind of action that needs to be taken for cleaning up the application package after successful provision.
            Possible values include: 'Invalid', 'Default', 'Automatic', 'Manual'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ProvisionApplicationTypeDescriptionBase">
            <summary>
            Represents the type of registration or provision requested, and if the operation needs to be asynchronous or not.
            Supported types of provision operations are from either image store or external store.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ProvisionApplicationTypeDescriptionBase.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ProvisionApplicationTypeKind},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ProvisionApplicationTypeDescriptionBase class.
            </summary>
            <param name="kind">The kind of application type registration or provision requested. The application package can be
            registered or provisioned either from the image store or from an external store. Following are the kinds of the
            application type provision.</param>
            <param name="async">Indicates whether or not provisioning should occur asynchronously. When set to true, the
            provision operation returns when the request is accepted by the system, and the provision operation continues
            without any timeout limit. The default value is false. For large application packages, we recommend setting the
            value to true.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ProvisionApplicationTypeDescriptionBase.Async">
            <summary>
            Gets indicates whether or not provisioning should occur asynchronously. When set to true, the provision operation
            returns when the request is accepted by the system, and the provision operation continues without any timeout
            limit. The default value is false. For large application packages, we recommend setting the value to true.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ProvisionApplicationTypeDescriptionBase.Kind">
            <summary>
            Gets the kind of application type registration or provision requested. The application package can be registered or
            provisioned either from the image store or from an external store. Following are the kinds of the application type
            provision.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ProvisionApplicationTypeKind">
            <summary>
            Defines values for ProvisionApplicationTypeKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ProvisionApplicationTypeKind.Invalid">
            <summary>
            Indicates that the provision kind is invalid. This value is default and should not be used. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ProvisionApplicationTypeKind.ImageStorePath">
            <summary>
            Indicates that the provision is for a package that was previously uploaded to the image store. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ProvisionApplicationTypeKind.ExternalStore">
            <summary>
            Indicates that the provision is for an application package that was previously uploaded to an external store. The
            application package ends with the extension *.sfpkg. The value is 2.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ProvisionFabricDescription">
            <summary>
            Describes the parameters for provisioning a cluster.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ProvisionFabricDescription.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ProvisionFabricDescription class.
            </summary>
            <param name="codeFilePath">The cluster code package file path.</param>
            <param name="clusterManifestFilePath">The cluster manifest file path.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ProvisionFabricDescription.CodeFilePath">
            <summary>
            Gets the cluster code package file path.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ProvisionFabricDescription.ClusterManifestFilePath">
            <summary>
            Gets the cluster manifest file path.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PutPropertyBatchOperation">
            <summary>
            Puts the specified property under the specified name.
            Note that if one PropertyBatchOperation in a PropertyBatch fails,
            the entire batch fails and cannot be committed in a transactional manner.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PutPropertyBatchOperation.#ctor(System.String,Microsoft.ServiceFabric.Common.PropertyValue,System.String)">
            <summary>
            Initializes a new instance of the PutPropertyBatchOperation class.
            </summary>
            <param name="propertyName">The name of the Service Fabric property.</param>
            <param name="value">Describes a Service Fabric property value.</param>
            <param name="customTypeId">The property's custom type ID. Using this property, the user is able to tag the type of
            the value of the property.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PutPropertyBatchOperation.Value">
            <summary>
            Gets a Service Fabric property value.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PutPropertyBatchOperation.CustomTypeId">
            <summary>
            Gets the property's custom type ID. Using this property, the user is able to tag the type of the value of the
            property.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.QuorumLossMode">
            <summary>
            Defines values for QuorumLossMode.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.QuorumLossMode.Invalid">
            <summary>
            Reserved.  Do not pass into API.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.QuorumLossMode.QuorumReplicas">
            <summary>
            Partial Quorum loss mode : Minimum number of replicas for a partition will be down that will cause a quorum loss.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.QuorumLossMode.AllReplicas">
            <summary>
            AllReplicas.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReconfigurationInformation">
            <summary>
            Information about current reconfiguration like phase, type, previous configuration role of replica and
            reconfiguration start date time.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReconfigurationInformation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ReplicaRole},System.Nullable{Microsoft.ServiceFabric.Common.ReconfigurationPhase},System.Nullable{Microsoft.ServiceFabric.Common.ReconfigurationType},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the ReconfigurationInformation class.
            </summary>
            <param name="previousConfigurationRole">Replica role before reconfiguration started. Possible values include:
            'Unknown', 'None', 'Primary', 'IdleSecondary', 'ActiveSecondary'
            
            The role of a replica of a stateful service.
            </param>
            <param name="reconfigurationPhase">Current phase of ongoing reconfiguration. If no reconfiguration is taking place
            then this value will be "None". Possible values include: 'Unknown', 'None', 'Phase0', 'Phase1', 'Phase2', 'Phase3',
            'Phase4', 'AbortPhaseZero'
            
            The reconfiguration phase of a replica of a stateful service.
            </param>
            <param name="reconfigurationType">Type of current ongoing reconfiguration. If no reconfiguration is taking place
            then this value will be "None". Possible values include: 'Unknown', 'SwapPrimary', 'Failover', 'Other'
            
            The type of reconfiguration for replica of a stateful service.
            </param>
            <param name="reconfigurationStartTimeUtc">Start time (in UTC) of the ongoing reconfiguration. If no reconfiguration
            is taking place then this value will be zero date-time.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReconfigurationInformation.PreviousConfigurationRole">
            <summary>
            Gets replica role before reconfiguration started. Possible values include: 'Unknown', 'None', 'Primary',
            'IdleSecondary', 'ActiveSecondary'
            
            The role of a replica of a stateful service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReconfigurationInformation.ReconfigurationPhase">
            <summary>
            Gets current phase of ongoing reconfiguration. If no reconfiguration is taking place then this value will be
            "None". Possible values include: 'Unknown', 'None', 'Phase0', 'Phase1', 'Phase2', 'Phase3', 'Phase4',
            'AbortPhaseZero'
            
            The reconfiguration phase of a replica of a stateful service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReconfigurationInformation.ReconfigurationType">
            <summary>
            Gets type of current ongoing reconfiguration. If no reconfiguration is taking place then this value will be "None".
            Possible values include: 'Unknown', 'SwapPrimary', 'Failover', 'Other'
            
            The type of reconfiguration for replica of a stateful service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReconfigurationInformation.ReconfigurationStartTimeUtc">
            <summary>
            Gets start time (in UTC) of the ongoing reconfiguration. If no reconfiguration is taking place then this value will
            be zero date-time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReconfigurationPhase">
            <summary>
            Defines values for ReconfigurationPhase.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReconfigurationPhase.Unknown">
            <summary>
            Indicates the invalid reconfiguration phase.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReconfigurationPhase.None">
            <summary>
            Specifies that there is no reconfiguration in progress.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReconfigurationPhase.Phase0">
            <summary>
            Refers to the phase where the reconfiguration is transferring data from the previous primary to the new primary.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReconfigurationPhase.Phase1">
            <summary>
            Refers to the phase where the reconfiguration is querying the replica set for the progress.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReconfigurationPhase.Phase2">
            <summary>
            Refers to the phase where the reconfiguration is ensuring that data from the current primary is present in a
            majority of the replica set.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReconfigurationPhase.Phase3">
            <summary>
            This phase is for internal use only.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReconfigurationPhase.Phase4">
            <summary>
            This phase is for internal use only.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReconfigurationPhase.AbortPhaseZero">
            <summary>
            This phase is for internal use only.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReconfigurationType">
            <summary>
            Defines values for ReconfigurationType.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReconfigurationType.Unknown">
            <summary>
            Indicates the invalid reconfiguration type.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReconfigurationType.SwapPrimary">
            <summary>
            Specifies that the primary replica is being swapped with a different replica.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReconfigurationType.Failover">
            <summary>
            Reconfiguration triggered in response to a primary going down. This could be due to many reasons such as primary
            replica crashing etc.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReconfigurationType.Other">
            <summary>
            Reconfigurations where the primary replica is not changing.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RegistryCredential">
            <summary>
            Credential information to connect to container registry.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RegistryCredential.#ctor(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the RegistryCredential class.
            </summary>
            <param name="registryUserName">The user name to connect to container registry.</param>
            <param name="registryPassword">The password for supplied username to connect to container registry.</param>
            <param name="passwordEncrypted">Indicates that supplied container registry password is encrypted.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RegistryCredential.RegistryUserName">
            <summary>
            Gets the user name to connect to container registry.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RegistryCredential.RegistryPassword">
            <summary>
            Gets the password for supplied username to connect to container registry.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RegistryCredential.PasswordEncrypted">
            <summary>
            Gets indicates that supplied container registry password is encrypted.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReliableCollectionsRef">
            <summary>
            Specifying this parameter adds support for reliable collections
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReliableCollectionsRef.#ctor(System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ReliableCollectionsRef class.
            </summary>
            <param name="name">Name of ReliableCollection resource. Right now it's not used and you can use any string.</param>
            <param name="doNotPersistState">False (the default) if ReliableCollections state is persisted to disk as usual.
            True if you do not want to persist state, in which case replication is still enabled and you can use
            ReliableCollections as distributed cache.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReliableCollectionsRef.Name">
            <summary>
            Gets name of ReliableCollection resource. Right now it's not used and you can use any string.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReliableCollectionsRef.DoNotPersistState">
            <summary>
            Gets false (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to
            persist state, in which case replication is still enabled and you can use ReliableCollections as distributed cache.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RemoteReplicatorAcknowledgementDetail">
            <summary>
            Provides various statistics of the acknowledgements that are being received from the remote replicator.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RemoteReplicatorAcknowledgementDetail.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the RemoteReplicatorAcknowledgementDetail class.
            </summary>
            <param name="averageReceiveDuration">Represents the average duration it takes for the remote replicator to receive
            an operation.</param>
            <param name="averageApplyDuration">Represents the average duration it takes for the remote replicator to apply an
            operation. This usually entails writing the operation to disk.</param>
            <param name="notReceivedCount">Represents the number of operations not yet received by a remote replicator.</param>
            <param name="receivedAndNotAppliedCount">Represents the number of operations received and not yet applied by a
            remote replicator.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RemoteReplicatorAcknowledgementDetail.AverageReceiveDuration">
            <summary>
            Gets represents the average duration it takes for the remote replicator to receive an operation.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RemoteReplicatorAcknowledgementDetail.AverageApplyDuration">
            <summary>
            Gets represents the average duration it takes for the remote replicator to apply an operation. This usually entails
            writing the operation to disk.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RemoteReplicatorAcknowledgementDetail.NotReceivedCount">
            <summary>
            Gets represents the number of operations not yet received by a remote replicator.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RemoteReplicatorAcknowledgementDetail.ReceivedAndNotAppliedCount">
            <summary>
            Gets represents the number of operations received and not yet applied by a remote replicator.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RemoteReplicatorAcknowledgementStatus">
            <summary>
            Provides details about the remote replicators from the primary replicator's point of view.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RemoteReplicatorAcknowledgementStatus.#ctor(Microsoft.ServiceFabric.Common.RemoteReplicatorAcknowledgementDetail,Microsoft.ServiceFabric.Common.RemoteReplicatorAcknowledgementDetail)">
            <summary>
            Initializes a new instance of the RemoteReplicatorAcknowledgementStatus class.
            </summary>
            <param name="replicationStreamAcknowledgementDetail">Details about the acknowledgements for operations that are
            part of the replication stream data.</param>
            <param name="copyStreamAcknowledgementDetail">Details about the acknowledgements for operations that are part of
            the copy stream data.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RemoteReplicatorAcknowledgementStatus.ReplicationStreamAcknowledgementDetail">
            <summary>
            Gets details about the acknowledgements for operations that are part of the replication stream data.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RemoteReplicatorAcknowledgementStatus.CopyStreamAcknowledgementDetail">
            <summary>
            Gets details about the acknowledgements for operations that are part of the copy stream data.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RemoteReplicatorStatus">
            <summary>
            Represents the state of the secondary replicator from the primary replicator’s point of view.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RemoteReplicatorStatus.#ctor(Microsoft.ServiceFabric.Common.ReplicaId,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,Microsoft.ServiceFabric.Common.RemoteReplicatorAcknowledgementStatus)">
            <summary>
            Initializes a new instance of the RemoteReplicatorStatus class.
            </summary>
            <param name="replicaId">Represents the replica ID of the remote secondary replicator.</param>
            <param name="lastAcknowledgementProcessedTimeUtc">The last timestamp (in UTC) when an acknowledgement from the
            secondary replicator was processed on the primary.
            UTC 0 represents an invalid value, indicating that no acknowledgement messages were ever processed.
            </param>
            <param name="lastReceivedReplicationSequenceNumber">The highest replication operation sequence number that the
            secondary has received from the primary.</param>
            <param name="lastAppliedReplicationSequenceNumber">The highest replication operation sequence number that the
            secondary has applied to its state.</param>
            <param name="isInBuild">A value that indicates whether the secondary replica is in the process of being
            built.</param>
            <param name="lastReceivedCopySequenceNumber">The highest copy operation sequence number that the secondary has
            received from the primary.
            A value of -1 implies that the secondary has received all copy operations.
            </param>
            <param name="lastAppliedCopySequenceNumber">The highest copy operation sequence number that the secondary has
            applied to its state.
            A value of -1 implies that the secondary has applied all copy operations and the copy process is complete.
            </param>
            <param name="remoteReplicatorAcknowledgementStatus">Represents the acknowledgment status for the remote secondary
            replicator.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RemoteReplicatorStatus.ReplicaId">
            <summary>
            Gets represents the replica ID of the remote secondary replicator.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RemoteReplicatorStatus.LastAcknowledgementProcessedTimeUtc">
            <summary>
            Gets the last timestamp (in UTC) when an acknowledgement from the secondary replicator was processed on the
            primary.
            UTC 0 represents an invalid value, indicating that no acknowledgement messages were ever processed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RemoteReplicatorStatus.LastReceivedReplicationSequenceNumber">
            <summary>
            Gets the highest replication operation sequence number that the secondary has received from the primary.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RemoteReplicatorStatus.LastAppliedReplicationSequenceNumber">
            <summary>
            Gets the highest replication operation sequence number that the secondary has applied to its state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RemoteReplicatorStatus.IsInBuild">
            <summary>
            Gets a value that indicates whether the secondary replica is in the process of being built.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RemoteReplicatorStatus.LastReceivedCopySequenceNumber">
            <summary>
            Gets the highest copy operation sequence number that the secondary has received from the primary.
            A value of -1 implies that the secondary has received all copy operations.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RemoteReplicatorStatus.LastAppliedCopySequenceNumber">
            <summary>
            Gets the highest copy operation sequence number that the secondary has applied to its state.
            A value of -1 implies that the secondary has applied all copy operations and the copy process is complete.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RemoteReplicatorStatus.RemoteReplicatorAcknowledgementStatus">
            <summary>
            Gets represents the acknowledgment status for the remote secondary replicator.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RepairImpactDescriptionBase">
            <summary>
            Describes the expected impact of executing a repair task.
            
            This type supports the Service Fabric platform; it is not meant to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RepairImpactDescriptionBase.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.RepairImpactKind})">
            <summary>
            Initializes a new instance of the RepairImpactDescriptionBase class.
            </summary>
            <param name="kind">Specifies the kind of the impact. This type supports the Service Fabric platform; it is not
            meant to be used directly from your code.'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairImpactDescriptionBase.Kind">
            <summary>
            Gets specifies the kind of the impact. This type supports the Service Fabric platform; it is not meant to be used
            directly from your code.'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RepairImpactKind">
            <summary>
            Defines values for RepairImpactKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RepairImpactKind.Invalid">
            <summary>
            The repair impact is not valid or is of an unknown type.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RepairImpactKind.Node">
            <summary>
            The repair impact affects a set of Service Fabric nodes.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RepairTargetDescriptionBase">
            <summary>
            Describes the entities targeted by a repair action.
            
            This type supports the Service Fabric platform; it is not meant to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RepairTargetDescriptionBase.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.RepairTargetKind})">
            <summary>
            Initializes a new instance of the RepairTargetDescriptionBase class.
            </summary>
            <param name="kind">Specifies the kind of the repair target. This type supports the Service Fabric platform; it is
            not meant to be used directly from your code.'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTargetDescriptionBase.Kind">
            <summary>
            Gets specifies the kind of the repair target. This type supports the Service Fabric platform; it is not meant to be
            used directly from your code.'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RepairTargetKind">
            <summary>
            Defines values for RepairTargetKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RepairTargetKind.Invalid">
            <summary>
            The repair target is not valid or is of an unknown type.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RepairTargetKind.Node">
            <summary>
            The repair target is a set of Service Fabric nodes.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RepairTask">
            <summary>
            Represents a repair task, which includes information about what kind of repair was requested, what its progress is,
            and what its final result was.
            
            This type supports the Service Fabric platform; it is not meant to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RepairTask.#ctor(System.String,System.Nullable{Microsoft.ServiceFabric.Common.State},System.String,System.String,System.String,System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.RepairTargetDescriptionBase,System.String,System.String,Microsoft.ServiceFabric.Common.RepairImpactDescriptionBase,System.Nullable{Microsoft.ServiceFabric.Common.ResultStatus},System.Nullable{System.Int32},System.String,Microsoft.ServiceFabric.Common.RepairTaskHistory,System.Nullable{Microsoft.ServiceFabric.Common.RepairTaskHealthCheckState},System.Nullable{Microsoft.ServiceFabric.Common.RepairTaskHealthCheckState},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the RepairTask class.
            </summary>
            <param name="taskId">The ID of the repair task.</param>
            <param name="state">The workflow state of the repair task. Valid initial states are Created, Claimed, and
            Preparing. Possible values include: 'Invalid', 'Created', 'Claimed', 'Preparing', 'Approved', 'Executing',
            'Restoring', 'Completed'</param>
            <param name="action">The requested repair action. Must be specified when the repair task is created, and is
            immutable once set.
            </param>
            <param name="version">The version of the repair task.
            When creating a new repair task, the version must be set to zero.  When updating a repair task,
            the version is used for optimistic concurrency checks.  If the version is
            set to zero, the update will not check for write conflicts.  If the version is set to a non-zero value, then the
            update will only succeed if the actual current version of the repair task matches this value.
            </param>
            <param name="description">A description of the purpose of the repair task, or other informational details.
            May be set when the repair task is created, and is immutable once set.
            </param>
            <param name="flags">A bitwise-OR of the following values, which gives additional details about the status of the
            repair task.
            - 1 - Cancellation of the repair has been requested
            - 2 - Abort of the repair has been requested
            - 4 - Approval of the repair was forced via client request
            </param>
            <param name="target">The target object determines what actions the system will take to prepare for the impact of
            the repair, prior to approving execution of the repair.
            May be set when the repair task is created, and is immutable once set.
            </param>
            <param name="executor">The name of the repair executor. Must be specified in Claimed and later states, and is
            immutable once set.</param>
            <param name="executorData">A data string that the repair executor can use to store its internal state.</param>
            <param name="impact">The impact object determines what actions the system will take to prepare for the impact of
            the repair, prior to approving execution of the repair.
            Impact must be specified by the repair executor when transitioning to the Preparing state, and is immutable once
            set.
            </param>
            <param name="resultStatus">A value describing the overall result of the repair task execution. Must be specified in
            the Restoring and later states, and is immutable once set. Possible values include: 'Invalid', 'Succeeded',
            'Cancelled', 'Interrupted', 'Failed', 'Pending'</param>
            <param name="resultCode">A numeric value providing additional details about the result of the repair task
            execution.
            May be specified in the Restoring and later states, and is immutable once set.
            </param>
            <param name="resultDetails">A string providing additional details about the result of the repair task execution.
            May be specified in the Restoring and later states, and is immutable once set.
            </param>
            <param name="history">An object that contains timestamps of the repair task's state transitions.
            These timestamps are updated by the system, and cannot be directly modified.
            </param>
            <param name="preparingHealthCheckState">The workflow state of the health check when the repair task is in the
            Preparing state. Possible values include: 'NotStarted', 'InProgress', 'Succeeded', 'Skipped', 'TimedOut'
            
            Specifies the workflow state of a repair task's health check. This type supports the Service Fabric platform; it is
            not meant to be used directly from your code.
            </param>
            <param name="restoringHealthCheckState">The workflow state of the health check when the repair task is in the
            Restoring state. Possible values include: 'NotStarted', 'InProgress', 'Succeeded', 'Skipped', 'TimedOut'
            
            Specifies the workflow state of a repair task's health check. This type supports the Service Fabric platform; it is
            not meant to be used directly from your code.
            </param>
            <param name="performPreparingHealthCheck">A value to determine if health checks will be performed when the repair
            task enters the Preparing state.</param>
            <param name="performRestoringHealthCheck">A value to determine if health checks will be performed when the repair
            task enters the Restoring state.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTask.TaskId">
            <summary>
            Gets the ID of the repair task.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTask.Version">
            <summary>
            Gets the version of the repair task.
            When creating a new repair task, the version must be set to zero.  When updating a repair task,
            the version is used for optimistic concurrency checks.  If the version is
            set to zero, the update will not check for write conflicts.  If the version is set to a non-zero value, then the
            update will only succeed if the actual current version of the repair task matches this value.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTask.Description">
            <summary>
            Gets a description of the purpose of the repair task, or other informational details.
            May be set when the repair task is created, and is immutable once set.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTask.State">
            <summary>
            Gets the workflow state of the repair task. Valid initial states are Created, Claimed, and Preparing. Possible
            values include: 'Invalid', 'Created', 'Claimed', 'Preparing', 'Approved', 'Executing', 'Restoring', 'Completed'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTask.Flags">
            <summary>
            Gets a bitwise-OR of the following values, which gives additional details about the status of the repair task.
            - 1 - Cancellation of the repair has been requested
            - 2 - Abort of the repair has been requested
            - 4 - Approval of the repair was forced via client request
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTask.Action">
            <summary>
            Gets the requested repair action. Must be specified when the repair task is created, and is immutable once set.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTask.Target">
            <summary>
            Gets the target object determines what actions the system will take to prepare for the impact of the repair, prior
            to approving execution of the repair.
            May be set when the repair task is created, and is immutable once set.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTask.Executor">
            <summary>
            Gets the name of the repair executor. Must be specified in Claimed and later states, and is immutable once set.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTask.ExecutorData">
            <summary>
            Gets a data string that the repair executor can use to store its internal state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTask.Impact">
            <summary>
            Gets the impact object determines what actions the system will take to prepare for the impact of the repair, prior
            to approving execution of the repair.
            Impact must be specified by the repair executor when transitioning to the Preparing state, and is immutable once
            set.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTask.ResultStatus">
            <summary>
            Gets a value describing the overall result of the repair task execution. Must be specified in the Restoring and
            later states, and is immutable once set. Possible values include: 'Invalid', 'Succeeded', 'Cancelled',
            'Interrupted', 'Failed', 'Pending'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTask.ResultCode">
            <summary>
            Gets a numeric value providing additional details about the result of the repair task execution.
            May be specified in the Restoring and later states, and is immutable once set.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTask.ResultDetails">
            <summary>
            Gets a string providing additional details about the result of the repair task execution.
            May be specified in the Restoring and later states, and is immutable once set.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTask.History">
            <summary>
            Gets an object that contains timestamps of the repair task's state transitions.
            These timestamps are updated by the system, and cannot be directly modified.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTask.PreparingHealthCheckState">
            <summary>
            Gets the workflow state of the health check when the repair task is in the Preparing state. Possible values
            include: 'NotStarted', 'InProgress', 'Succeeded', 'Skipped', 'TimedOut'
            
            Specifies the workflow state of a repair task's health check. This type supports the Service Fabric platform; it is
            not meant to be used directly from your code.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTask.RestoringHealthCheckState">
            <summary>
            Gets the workflow state of the health check when the repair task is in the Restoring state. Possible values
            include: 'NotStarted', 'InProgress', 'Succeeded', 'Skipped', 'TimedOut'
            
            Specifies the workflow state of a repair task's health check. This type supports the Service Fabric platform; it is
            not meant to be used directly from your code.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTask.PerformPreparingHealthCheck">
            <summary>
            Gets a value to determine if health checks will be performed when the repair task enters the Preparing state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTask.PerformRestoringHealthCheck">
            <summary>
            Gets a value to determine if health checks will be performed when the repair task enters the Restoring state.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RepairTaskApproveDescription">
            <summary>
            Describes a request for forced approval of a repair task.
            
            This type supports the Service Fabric platform; it is not meant to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RepairTaskApproveDescription.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the RepairTaskApproveDescription class.
            </summary>
            <param name="taskId">The ID of the repair task.</param>
            <param name="version">The current version number of the repair task. If non-zero, then the request will only
            succeed if this value matches the actual current version of the repair task. If zero, then no version check is
            performed.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskApproveDescription.TaskId">
            <summary>
            Gets the ID of the repair task.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskApproveDescription.Version">
            <summary>
            Gets the current version number of the repair task. If non-zero, then the request will only succeed if this value
            matches the actual current version of the repair task. If zero, then no version check is performed.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RepairTaskCancelDescription">
            <summary>
            Describes a request to cancel a repair task.
            
            This type supports the Service Fabric platform; it is not meant to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RepairTaskCancelDescription.#ctor(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the RepairTaskCancelDescription class.
            </summary>
            <param name="taskId">The ID of the repair task.</param>
            <param name="version">The current version number of the repair task. If non-zero, then the request will only
            succeed if this value matches the actual current version of the repair task. If zero, then no version check is
            performed.</param>
            <param name="requestAbort">_True_ if the repair should be stopped as soon as possible even if it has already
            started executing. _False_ if the repair should be cancelled only if execution has not yet started.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskCancelDescription.TaskId">
            <summary>
            Gets the ID of the repair task.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskCancelDescription.Version">
            <summary>
            Gets the current version number of the repair task. If non-zero, then the request will only succeed if this value
            matches the actual current version of the repair task. If zero, then no version check is performed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskCancelDescription.RequestAbort">
            <summary>
            Gets _True_ if the repair should be stopped as soon as possible even if it has already started executing. _False_
            if the repair should be cancelled only if execution has not yet started.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RepairTaskDeleteDescription">
            <summary>
            Describes a request to delete a completed repair task.
            
            This type supports the Service Fabric platform; it is not meant to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RepairTaskDeleteDescription.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the RepairTaskDeleteDescription class.
            </summary>
            <param name="taskId">The ID of the completed repair task to be deleted.</param>
            <param name="version">The current version number of the repair task. If non-zero, then the request will only
            succeed if this value matches the actual current version of the repair task. If zero, then no version check is
            performed.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskDeleteDescription.TaskId">
            <summary>
            Gets the ID of the completed repair task to be deleted.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskDeleteDescription.Version">
            <summary>
            Gets the current version number of the repair task. If non-zero, then the request will only succeed if this value
            matches the actual current version of the repair task. If zero, then no version check is performed.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RepairTaskHealthCheckState">
            <summary>
            Defines values for RepairTaskHealthCheckState.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RepairTaskHealthCheckState.NotStarted">
            <summary>
            Indicates that the health check has not started.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RepairTaskHealthCheckState.InProgress">
            <summary>
            Indicates that the health check is in progress.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RepairTaskHealthCheckState.Succeeded">
            <summary>
            Indicates that the health check succeeded.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RepairTaskHealthCheckState.Skipped">
            <summary>
            Indicates that the health check was skipped.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RepairTaskHealthCheckState.TimedOut">
            <summary>
            Indicates that the health check timed out.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RepairTaskHistory">
            <summary>
            A record of the times when the repair task entered each state.
            
            This type supports the Service Fabric platform; it is not meant to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RepairTaskHistory.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the RepairTaskHistory class.
            </summary>
            <param name="createdUtcTimestamp">The time when the repair task entered the Created state.</param>
            <param name="claimedUtcTimestamp">The time when the repair task entered the Claimed state.</param>
            <param name="preparingUtcTimestamp">The time when the repair task entered the Preparing state.</param>
            <param name="approvedUtcTimestamp">The time when the repair task entered the Approved state</param>
            <param name="executingUtcTimestamp">The time when the repair task entered the Executing state</param>
            <param name="restoringUtcTimestamp">The time when the repair task entered the Restoring state</param>
            <param name="completedUtcTimestamp">The time when the repair task entered the Completed state</param>
            <param name="preparingHealthCheckStartUtcTimestamp">The time when the repair task started the health check in the
            Preparing state.</param>
            <param name="preparingHealthCheckEndUtcTimestamp">The time when the repair task completed the health check in the
            Preparing state.</param>
            <param name="restoringHealthCheckStartUtcTimestamp">The time when the repair task started the health check in the
            Restoring state.</param>
            <param name="restoringHealthCheckEndUtcTimestamp">The time when the repair task completed the health check in the
            Restoring state.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskHistory.CreatedUtcTimestamp">
            <summary>
            Gets the time when the repair task entered the Created state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskHistory.ClaimedUtcTimestamp">
            <summary>
            Gets the time when the repair task entered the Claimed state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskHistory.PreparingUtcTimestamp">
            <summary>
            Gets the time when the repair task entered the Preparing state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskHistory.ApprovedUtcTimestamp">
            <summary>
            Gets the time when the repair task entered the Approved state
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskHistory.ExecutingUtcTimestamp">
            <summary>
            Gets the time when the repair task entered the Executing state
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskHistory.RestoringUtcTimestamp">
            <summary>
            Gets the time when the repair task entered the Restoring state
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskHistory.CompletedUtcTimestamp">
            <summary>
            Gets the time when the repair task entered the Completed state
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskHistory.PreparingHealthCheckStartUtcTimestamp">
            <summary>
            Gets the time when the repair task started the health check in the Preparing state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskHistory.PreparingHealthCheckEndUtcTimestamp">
            <summary>
            Gets the time when the repair task completed the health check in the Preparing state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskHistory.RestoringHealthCheckStartUtcTimestamp">
            <summary>
            Gets the time when the repair task started the health check in the Restoring state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskHistory.RestoringHealthCheckEndUtcTimestamp">
            <summary>
            Gets the time when the repair task completed the health check in the Restoring state.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RepairTaskUpdateHealthPolicyDescription">
            <summary>
            Describes a request to update the health policy of a repair task.
            
            This type supports the Service Fabric platform; it is not meant to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RepairTaskUpdateHealthPolicyDescription.#ctor(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the RepairTaskUpdateHealthPolicyDescription class.
            </summary>
            <param name="taskId">The ID of the repair task to be updated.</param>
            <param name="version">The current version number of the repair task. If non-zero, then the request will only
            succeed if this value matches the actual current value of the repair task. If zero, then no version check is
            performed.</param>
            <param name="performPreparingHealthCheck">A boolean indicating if health check is to be performed in the Preparing
            stage of the repair task. If not specified the existing value should not be altered. Otherwise, specify the desired
            new value.</param>
            <param name="performRestoringHealthCheck">A boolean indicating if health check is to be performed in the Restoring
            stage of the repair task. If not specified the existing value should not be altered. Otherwise, specify the desired
            new value.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskUpdateHealthPolicyDescription.TaskId">
            <summary>
            Gets the ID of the repair task to be updated.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskUpdateHealthPolicyDescription.Version">
            <summary>
            Gets the current version number of the repair task. If non-zero, then the request will only succeed if this value
            matches the actual current value of the repair task. If zero, then no version check is performed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskUpdateHealthPolicyDescription.PerformPreparingHealthCheck">
            <summary>
            Gets a boolean indicating if health check is to be performed in the Preparing stage of the repair task. If not
            specified the existing value should not be altered. Otherwise, specify the desired new value.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskUpdateHealthPolicyDescription.PerformRestoringHealthCheck">
            <summary>
            Gets a boolean indicating if health check is to be performed in the Restoring stage of the repair task. If not
            specified the existing value should not be altered. Otherwise, specify the desired new value.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RepairTaskUpdateInfo">
            <summary>
            Describes the result of an operation that created or updated a repair task.
            
            This type supports the Service Fabric platform; it is not meant to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RepairTaskUpdateInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RepairTaskUpdateInfo class.
            </summary>
            <param name="version">The new version of the repair task.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RepairTaskUpdateInfo.Version">
            <summary>
            Gets the new version of the repair task.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicaEvent">
            <summary>
            Represents the base for all Replica Events.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.Nullable{Microsoft.ServiceFabric.Common.FabricEventKind},Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ReplicaEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="kind">The kind of FabricEvent.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="replicaId">Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify
            a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a
            replica gets dropped and another replica gets created on the same node for the same partition, it will get a
            different value for the id. Sometimes the id of a stateless service instance is also referred as a replica
            id.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaEvent.PartitionId">
            <summary>
            Gets an internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when
            the service was created. The partition ID is unique and does not change for the lifetime of the service. If the
            same service was deleted and recreated the IDs of its partitions would be different.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaEvent.ReplicaId">
            <summary>
            Gets id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a
            partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets
            dropped and another replica gets created on the same node for the same partition, it will get a different value for
            the id. Sometimes the id of a stateless service instance is also referred as a replica id.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicaHealth">
            <summary>
            Represents a base class for stateful service replica or stateless service instance health.
            Contains the replica aggregated health state, the health events and the unhealthy evaluations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaHealth.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ServiceKind},System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvent},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper},Microsoft.ServiceFabric.Common.HealthStatistics,Microsoft.ServiceFabric.Common.PartitionId)">
            <summary>
            Initializes a new instance of the ReplicaHealth class.
            </summary>
            <param name="serviceKind">The kind of service (Stateless or Stateful).</param>
            <param name="aggregatedHealthState">The HealthState representing the aggregated health state of the entity computed
            by Health Manager.
            The health evaluation of the entity reflects all events reported on the entity and its children (if any).
            The aggregation is done by applying the desired health policy.
            . Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            
            The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
            </param>
            <param name="healthEvents">The list of health events reported on the entity.</param>
            <param name="unhealthyEvaluations">The unhealthy evaluations that show why the current aggregated health state was
            returned by Health Manager.</param>
            <param name="healthStatistics">Shows the health statistics for all children types of the queried entity.</param>
            <param name="partitionId">Id of the partition to which this replica belongs.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaHealth.PartitionId">
            <summary>
            Gets id of the partition to which this replica belongs.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaHealth.ServiceKind">
            <summary>
            Gets the kind of service (Stateless or Stateful).
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicaHealthEvaluation">
            <summary>
            Represents health evaluation for a replica, containing information about the data and the algorithm used by health
            store to evaluate health. The evaluation is returned only when the aggregated health state is either Error or
            Warning.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,Microsoft.ServiceFabric.Common.PartitionId,System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the ReplicaHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="partitionId">Id of the partition to which the replica belongs.</param>
            <param name="replicaOrInstanceId">Id of a stateful service replica or a stateless service instance. This ID is used
            in the queries that apply to both stateful and stateless services. It is used by Service Fabric to uniquely
            identify a replica of a partition of a stateful service or an instance of a stateless service partition. It is
            unique within a partition and does not change for the lifetime of the replica or the instance. If a stateful
            replica gets dropped and another replica gets created on the same node for the same partition, it will get a
            different value for the ID. If a stateless instance is failed over on the same or different node it will get a
            different value for the ID.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the current aggregated health state of
            the replica. The types of the unhealthy evaluations can be EventHealthEvaluation.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaHealthEvaluation.PartitionId">
            <summary>
            Gets id of the partition to which the replica belongs.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaHealthEvaluation.ReplicaOrInstanceId">
            <summary>
            Gets id of a stateful service replica or a stateless service instance. This ID is used in the queries that apply to
            both stateful and stateless services. It is used by Service Fabric to uniquely identify a replica of a partition of
            a stateful service or an instance of a stateless service partition. It is unique within a partition and does not
            change for the lifetime of the replica or the instance. If a stateful replica gets dropped and another replica gets
            created on the same node for the same partition, it will get a different value for the ID. If a stateless instance
            is failed over on the same or different node it will get a different value for the ID.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the current aggregated health state of the replica. The types of the
            unhealthy evaluations can be EventHealthEvaluation.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicaHealthReportServiceKind">
            <summary>
            Defines values for ReplicaHealthReportServiceKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicaHealthReportServiceKind.Stateless">
            <summary>
            Does not use Service Fabric to make its state highly available or reliable. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicaHealthReportServiceKind.Stateful">
            <summary>
            Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 2.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicaHealthState">
            <summary>
            Represents a base class for stateful service replica or stateless service instance health state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaHealthState.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ServiceKind},System.Nullable{Microsoft.ServiceFabric.Common.HealthState},Microsoft.ServiceFabric.Common.PartitionId)">
            <summary>
            Initializes a new instance of the ReplicaHealthState class.
            </summary>
            <param name="serviceKind">The kind of service (Stateless or Stateful).</param>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="partitionId">The ID of the partition to which this replica belongs.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaHealthState.PartitionId">
            <summary>
            Gets the ID of the partition to which this replica belongs.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaHealthState.ServiceKind">
            <summary>
            Gets the kind of service (Stateless or Stateful).
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicaHealthStateChunk">
            <summary>
            Represents the health state chunk of a stateful service replica or a stateless service instance.
            The replica health state contains the replica ID and its aggregated health state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaHealthStateChunk.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String)">
            <summary>
            Initializes a new instance of the ReplicaHealthStateChunk class.
            </summary>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="replicaOrInstanceId">Id of a stateful service replica or a stateless service instance. This ID is used
            in the queries that apply to both stateful and stateless services. It is used by Service Fabric to uniquely
            identify a replica of a partition of a stateful service or an instance of a stateless service partition. It is
            unique within a partition and does not change for the lifetime of the replica or the instance. If a stateful
            replica gets dropped and another replica gets created on the same node for the same partition, it will get a
            different value for the ID. If a stateless instance is failed over on the same or different node it will get a
            different value for the ID.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaHealthStateChunk.ReplicaOrInstanceId">
            <summary>
            Gets id of a stateful service replica or a stateless service instance. This ID is used in the queries that apply to
            both stateful and stateless services. It is used by Service Fabric to uniquely identify a replica of a partition of
            a stateful service or an instance of a stateless service partition. It is unique within a partition and does not
            change for the lifetime of the replica or the instance. If a stateful replica gets dropped and another replica gets
            created on the same node for the same partition, it will get a different value for the ID. If a stateless instance
            is failed over on the same or different node it will get a different value for the ID.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicaHealthStateChunkList">
            <summary>
            The list of replica health state chunks that respect the input filters in the chunk query. Returned by get cluster
            health state chunks query.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaHealthStateChunkList.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ReplicaHealthStateChunk})">
            <summary>
            Initializes a new instance of the ReplicaHealthStateChunkList class.
            </summary>
            <param name="items">The list of replica health state chunks that respect the input filters in the chunk query.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaHealthStateChunkList.Items">
            <summary>
            Gets the list of replica health state chunks that respect the input filters in the chunk query.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicaHealthStateFilter">
            <summary>
            Defines matching criteria to determine whether a replica should be included as a child of a partition in the
            cluster health chunk.
            The replicas are only returned if the parent entities match a filter specified in the cluster health chunk query
            description. The parent partition, service and application must be included in the cluster health chunk.
            One filter can match zero, one or multiple replicas, depending on its properties.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaHealthStateFilter.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the ReplicaHealthStateFilter class.
            </summary>
            <param name="replicaOrInstanceIdFilter">Id of the stateful service replica or stateless service instance that
            matches the filter. The filter is applied only to the specified replica, if it exists.
            If the replica doesn't exist, no replica is returned in the cluster health chunk based on this filter.
            If the replica exists, it is included in the cluster health chunk if it respects the other filter properties.
            If not specified, all replicas that match the parent filters (if any) are taken into consideration and matched
            against the other filter members, like health state filter.
            </param>
            <param name="healthStateFilter">The filter for the health state of the replicas. It allows selecting replicas if
            they match the desired health states.
            The possible values are integer value of one of the following health states. Only replicas that match the filter
            are returned. All replicas are used to evaluate the parent partition aggregated health state.
            If not specified, default value is None, unless the replica ID is specified. If the filter has default value and
            replica ID is specified, the matching replica is returned.
            The state values are flag-based enumeration, so the value could be a combination of these values obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6, it matches replicas with HealthState value of OK (2) and Warning (4).
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaHealthStateFilter.ReplicaOrInstanceIdFilter">
            <summary>
            Gets id of the stateful service replica or stateless service instance that matches the filter. The filter is
            applied only to the specified replica, if it exists.
            If the replica doesn't exist, no replica is returned in the cluster health chunk based on this filter.
            If the replica exists, it is included in the cluster health chunk if it respects the other filter properties.
            If not specified, all replicas that match the parent filters (if any) are taken into consideration and matched
            against the other filter members, like health state filter.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaHealthStateFilter.HealthStateFilter">
            <summary>
            Gets the filter for the health state of the replicas. It allows selecting replicas if they match the desired health
            states.
            The possible values are integer value of one of the following health states. Only replicas that match the filter
            are returned. All replicas are used to evaluate the parent partition aggregated health state.
            If not specified, default value is None, unless the replica ID is specified. If the filter has default value and
            replica ID is specified, the matching replica is returned.
            The state values are flag-based enumeration, so the value could be a combination of these values obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6, it matches replicas with HealthState value of OK (2) and Warning (4).
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicaInfo">
            <summary>
            Information about the identity, status, health, node name, uptime, and other details about the replica.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaInfo.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ServiceKind},System.Nullable{Microsoft.ServiceFabric.Common.ReplicaStatus},System.Nullable{Microsoft.ServiceFabric.Common.HealthState},Microsoft.ServiceFabric.Common.NodeName,System.String,System.String)">
            <summary>
            Initializes a new instance of the ReplicaInfo class.
            </summary>
            <param name="serviceKind">The kind of service (Stateless or Stateful).</param>
            <param name="replicaStatus">The status of a replica of a service. Possible values include: 'Invalid', 'InBuild',
            'Standby', 'Ready', 'Down', 'Dropped'</param>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="address">The address the replica is listening on.</param>
            <param name="lastInBuildDurationInSeconds">The last in build duration of the replica in seconds.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaInfo.ReplicaStatus">
            <summary>
            Gets the status of a replica of a service. Possible values include: 'Invalid', 'InBuild', 'Standby', 'Ready',
            'Down', 'Dropped'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaInfo.HealthState">
            <summary>
            Gets the health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica
            etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaInfo.NodeName">
            <summary>
            Gets the name of a Service Fabric node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaInfo.Address">
            <summary>
            Gets the address the replica is listening on.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaInfo.LastInBuildDurationInSeconds">
            <summary>
            Gets the last in build duration of the replica in seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaInfo.ServiceKind">
            <summary>
            Gets the kind of service (Stateless or Stateful).
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicaKind">
            <summary>
            Defines values for ReplicaKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicaKind.Invalid">
            <summary>
            Represents an invalid replica kind. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicaKind.KeyValueStore">
            <summary>
            Represents a key value store replica. The value is 1.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicaLifecycleDescription">
            <summary>
            Describes how the replica will behave
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaLifecycleDescription.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ReplicaLifecycleDescription class.
            </summary>
            <param name="isSingletonReplicaMoveAllowedDuringUpgrade">If set to true, replicas with a target replica set size of
            1 will be permitted to move during upgrade.</param>
            <param name="restoreReplicaLocationAfterUpgrade">If set to true, move/swap replica to original location after
            upgrade.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaLifecycleDescription.IsSingletonReplicaMoveAllowedDuringUpgrade">
            <summary>
            Gets if set to true, replicas with a target replica set size of 1 will be permitted to move during upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaLifecycleDescription.RestoreReplicaLocationAfterUpgrade">
            <summary>
            Gets if set to true, move/swap replica to original location after upgrade.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicaMetricLoadDescription">
            <summary>
            Specifies metric loads of a partition's specific secondary replica or instance.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaMetricLoadDescription.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.MetricLoadDescription})">
            <summary>
            Initializes a new instance of the ReplicaMetricLoadDescription class.
            </summary>
            <param name="nodeName">Node name of a specific secondary replica or instance.</param>
            <param name="replicaOrInstanceLoadEntries">Loads of a different metrics for a partition's secondary replica or
            instance.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaMetricLoadDescription.NodeName">
            <summary>
            Gets node name of a specific secondary replica or instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaMetricLoadDescription.ReplicaOrInstanceLoadEntries">
            <summary>
            Gets loads of a different metrics for a partition's secondary replica or instance.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicaRole">
            <summary>
            Defines values for ReplicaRole.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicaRole.Unknown">
            <summary>
            Indicates the initial role that a replica is created in. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicaRole.None">
            <summary>
            Specifies that the replica has no responsibility in regard to the replica set. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicaRole.Primary">
            <summary>
            Refers to the replica in the set on which all read and write operations are complete in order to enforce strong
            consistency semantics. Read operations are handled directly by the Primary replica, while write operations must be
            acknowledged by a quorum of the replicas in the replica set. There can only be one Primary replica in a replica set
            at a time. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicaRole.IdleSecondary">
            <summary>
            Refers to a replica in the set that receives a state transfer from the Primary replica to prepare for becoming an
            active Secondary replica. There can be multiple Idle Secondary replicas in a replica set at a time. Idle Secondary
            replicas do not count as a part of a write quorum. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicaRole.ActiveSecondary">
            <summary>
            Refers to a replica in the set that receives state updates from the Primary replica, applies them, and sends
            acknowledgements back. Secondary replicas must participate in the write quorum for a replica set. There can be
            multiple active Secondary replicas in a replica set at a time. The number of active Secondary replicas is
            configurable that the reliability subsystem should maintain. The value is 4.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicasHealthEvaluation">
            <summary>
            Represents health evaluation for replicas, containing health evaluations for each unhealthy replica that impacted
            current aggregated health state. Can be returned when evaluating partition health and the aggregated health state
            is either Error or Warning.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicasHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the ReplicasHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="maxPercentUnhealthyReplicasPerPartition">Maximum allowed percentage of unhealthy replicas per
            partition from the ApplicationHealthPolicy.</param>
            <param name="totalCount">Total number of replicas in the partition from the health store.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the aggregated health state. Includes
            all the unhealthy ReplicaHealthEvaluation that impacted the aggregated health.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicasHealthEvaluation.MaxPercentUnhealthyReplicasPerPartition">
            <summary>
            Gets maximum allowed percentage of unhealthy replicas per partition from the ApplicationHealthPolicy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicasHealthEvaluation.TotalCount">
            <summary>
            Gets total number of replicas in the partition from the health store.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicasHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy
            ReplicaHealthEvaluation that impacted the aggregated health.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicaStatus">
            <summary>
            Defines values for ReplicaStatus.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicaStatus.Invalid">
            <summary>
            Indicates the replica status is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicaStatus.InBuild">
            <summary>
            The replica is being built. This means that a primary replica is seeding this replica. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicaStatus.Standby">
            <summary>
            The replica is in standby. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicaStatus.Ready">
            <summary>
            The replica is ready. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicaStatus.Down">
            <summary>
            The replica is down. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicaStatus.Dropped">
            <summary>
            Replica is dropped. This means that the replica has been removed from the replica set. If it is persisted, its
            state has been deleted. The value is 5.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicaStatusBase">
            <summary>
            Information about the replica.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaStatusBase.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ReplicaKind})">
            <summary>
            Initializes a new instance of the ReplicaStatusBase class.
            </summary>
            <param name="kind">The role of a replica of a stateful service.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicaStatusBase.Kind">
            <summary>
            Gets the role of a replica of a stateful service.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicatorOperationName">
            <summary>
            Defines values for ReplicatorOperationName.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicatorOperationName.Invalid">
            <summary>
            Default value if the replicator is not yet ready.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicatorOperationName.None">
            <summary>
            Replicator is not running any operation from Service Fabric perspective.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicatorOperationName.Open">
            <summary>
            Replicator is opening.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicatorOperationName.ChangeRole">
            <summary>
            Replicator is in the process of changing its role.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicatorOperationName.UpdateEpoch">
            <summary>
            Due to a change in the replica set, replicator is being updated with its Epoch.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicatorOperationName.Close">
            <summary>
            Replicator is closing.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicatorOperationName.Abort">
            <summary>
            Replicator is being aborted.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicatorOperationName.OnDataLoss">
            <summary>
            Replicator is handling the data loss condition, where the user service may potentially be recovering state from an
            external source.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicatorOperationName.WaitForCatchup">
            <summary>
            Replicator is waiting for a quorum of replicas to be caught up to the latest state.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicatorOperationName.Build">
            <summary>
            Replicator is in the process of building one or more replicas.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicatorQueueStatus">
            <summary>
            Provides various statistics of the queue used in the service fabric replicator.
            Contains information about the service fabric replicator like the replication/copy queue utilization, last
            acknowledgement received timestamp, etc.
            Depending on the role of the replicator, the properties in this type imply different meanings.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicatorQueueStatus.#ctor(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ReplicatorQueueStatus class.
            </summary>
            <param name="queueUtilizationPercentage">Represents the utilization of the queue. A value of 0 indicates that the
            queue is empty and a value of 100 indicates the queue is full.</param>
            <param name="queueMemorySize">Represents the virtual memory consumed by the queue in bytes.</param>
            <param name="firstSequenceNumber">On a primary replicator, this is semantically the sequence number of the
            operation for which all the secondary replicas have sent an acknowledgement.
            On a secondary replicator, this is the smallest sequence number of the operation that is present in the queue.
            </param>
            <param name="completedSequenceNumber">On a primary replicator, this is semantically the highest sequence number of
            the operation for which all the secondary replicas have sent an acknowledgement.
            On a secondary replicator, this is semantically the highest sequence number that has been applied to the persistent
            state.
            </param>
            <param name="committedSequenceNumber">On a primary replicator, this is semantically the highest sequence number of
            the operation for which a write quorum of the secondary replicas have sent an acknowledgement.
            On a secondary replicator, this is semantically the highest sequence number of the in-order operation received from
            the primary.
            </param>
            <param name="lastSequenceNumber">Represents the latest sequence number of the operation that is available in the
            queue.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicatorQueueStatus.QueueUtilizationPercentage">
            <summary>
            Gets represents the utilization of the queue. A value of 0 indicates that the queue is empty and a value of 100
            indicates the queue is full.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicatorQueueStatus.QueueMemorySize">
            <summary>
            Gets represents the virtual memory consumed by the queue in bytes.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicatorQueueStatus.FirstSequenceNumber">
            <summary>
            Gets on a primary replicator, this is semantically the sequence number of the operation for which all the secondary
            replicas have sent an acknowledgement.
            On a secondary replicator, this is the smallest sequence number of the operation that is present in the queue.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicatorQueueStatus.CompletedSequenceNumber">
            <summary>
            Gets on a primary replicator, this is semantically the highest sequence number of the operation for which all the
            secondary replicas have sent an acknowledgement.
            On a secondary replicator, this is semantically the highest sequence number that has been applied to the persistent
            state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicatorQueueStatus.CommittedSequenceNumber">
            <summary>
            Gets on a primary replicator, this is semantically the highest sequence number of the operation for which a write
            quorum of the secondary replicas have sent an acknowledgement.
            On a secondary replicator, this is semantically the highest sequence number of the in-order operation received from
            the primary.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicatorQueueStatus.LastSequenceNumber">
            <summary>
            Gets represents the latest sequence number of the operation that is available in the queue.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicatorStatus">
            <summary>
            Represents a base class for primary or secondary replicator status.
            Contains information about the service fabric replicator like the replication/copy queue utilization, last
            acknowledgement received timestamp, etc.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicatorStatus.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ReplicaRole})">
            <summary>
            Initializes a new instance of the ReplicatorStatus class.
            </summary>
            <param name="kind">The role of a replica of a stateful service.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ReplicatorStatus.Kind">
            <summary>
            Gets the role of a replica of a stateful service.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ResolvedServiceEndpoint">
            <summary>
            Endpoint of a resolved service partition.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ResolvedServiceEndpoint.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ServiceEndpointRole},System.String)">
            <summary>
            Initializes a new instance of the ResolvedServiceEndpoint class.
            </summary>
            <param name="kind">The role of the replica where the endpoint is reported. Possible values include: 'Invalid',
            'Stateless', 'StatefulPrimary', 'StatefulSecondary'</param>
            <param name="address">The address of the endpoint. If the endpoint has multiple listeners the address is a JSON
            object with one property per listener with the value as the address of that listener.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ResolvedServiceEndpoint.Kind">
            <summary>
            Gets the role of the replica where the endpoint is reported. Possible values include: 'Invalid', 'Stateless',
            'StatefulPrimary', 'StatefulSecondary'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ResolvedServiceEndpoint.Address">
            <summary>
            Gets the address of the endpoint. If the endpoint has multiple listeners the address is a JSON object with one
            property per listener with the value as the address of that listener.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ResolvedServicePartition">
            <summary>
            Information about a service partition and its associated endpoints.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ResolvedServicePartition.#ctor(Microsoft.ServiceFabric.Common.ServiceName,Microsoft.ServiceFabric.Common.PartitionInformation,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ResolvedServiceEndpoint},System.String)">
            <summary>
            Initializes a new instance of the ResolvedServicePartition class.
            </summary>
            <param name="name">The full name of the service with 'fabric:' URI scheme.</param>
            <param name="partitionInformation">A representation of the resolved partition.</param>
            <param name="endpoints">List of resolved service endpoints of a service partition.</param>
            <param name="version">The version of this resolved service partition result. This version should be passed in the
            next time the ResolveService call is made via the PreviousRspVersion query parameter.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ResolvedServicePartition.Name">
            <summary>
            Gets the full name of the service with 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ResolvedServicePartition.PartitionInformation">
            <summary>
            Gets a representation of the resolved partition.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ResolvedServicePartition.Endpoints">
            <summary>
            Gets list of resolved service endpoints of a service partition.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ResolvedServicePartition.Version">
            <summary>
            Gets the version of this resolved service partition result. This version should be passed in the next time the
            ResolveService call is made via the PreviousRspVersion query parameter.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ResourceLimits">
            <summary>
            This type describes the resource limits for a given container. It describes the most amount of resources a
            container is allowed to use before being restarted.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ResourceLimits.#ctor(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the ResourceLimits class.
            </summary>
            <param name="memoryInGB">The memory limit in GB.</param>
            <param name="cpu">CPU limits in cores. At present, only full cores are supported.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ResourceLimits.MemoryInGB">
            <summary>
            Gets the memory limit in GB.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ResourceLimits.Cpu">
            <summary>
            Gets CPU limits in cores. At present, only full cores are supported.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ResourceRequests">
            <summary>
            This type describes the requested resources for a given container. It describes the least amount of resources
            required for the container. A container can consume more than requested resources up to the specified limits before
            being restarted. Currently, the requested resources are treated as limits.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ResourceRequests.#ctor(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the ResourceRequests class.
            </summary>
            <param name="memoryInGB">The memory request in GB for this container.</param>
            <param name="cpu">Requested number of CPU cores. At present, only full cores are supported.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ResourceRequests.MemoryInGB">
            <summary>
            Gets the memory request in GB for this container.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ResourceRequests.Cpu">
            <summary>
            Gets requested number of CPU cores. At present, only full cores are supported.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ResourceRequirements">
            <summary>
            This type describes the resource requirements for a container or a service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ResourceRequirements.#ctor(Microsoft.ServiceFabric.Common.ResourceRequests,Microsoft.ServiceFabric.Common.ResourceLimits)">
            <summary>
            Initializes a new instance of the ResourceRequirements class.
            </summary>
            <param name="requests">Describes the requested resources for a given container.</param>
            <param name="limits">Describes the maximum limits on the resources for a given container.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ResourceRequirements.Requests">
            <summary>
            Gets the requested resources for a given container.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ResourceRequirements.Limits">
            <summary>
            Gets the maximum limits on the resources for a given container.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ResourceStatus">
            <summary>
            Defines values for ResourceStatus.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ResourceStatus.Unknown">
            <summary>
            Indicates the resource status is unknown. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ResourceStatus.Ready">
            <summary>
            Indicates the resource is ready. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ResourceStatus.Upgrading">
            <summary>
            Indicates the resource is upgrading. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ResourceStatus.Creating">
            <summary>
            Indicates the resource is being created. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ResourceStatus.Deleting">
            <summary>
            Indicates the resource is being deleted. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ResourceStatus.Failed">
            <summary>
            Indicates the resource is not functional due to persistent failures. See statusDetails property for more details.
            The value is 5.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RestartDeployedCodePackageDescription">
            <summary>
            Defines description for restarting a deployed code package on Service Fabric node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RestartDeployedCodePackageDescription.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the RestartDeployedCodePackageDescription class.
            </summary>
            <param name="serviceManifestName">The name of service manifest that specified this code package.</param>
            <param name="codePackageName">The name of the code package defined in the service manifest.</param>
            <param name="codePackageInstanceId">The instance ID for currently running entry point. For a code package setup
            entry point (if specified) runs first and after it finishes main entry point is started.
            Each time entry point executable is run, its instance ID will change. If 0 is passed in as the code package
            instance ID, the API will restart the code package with whatever instance ID it is currently running.
            If an instance ID other than 0 is passed in, the API will restart the code package only if the current Instance ID
            matches the passed in instance ID.
            Note, passing in the exact instance ID (not 0) in the API is safer, because if ensures at most one restart of the
            code package.
            </param>
            <param name="servicePackageActivationId">The ActivationId of a deployed service package. If
            ServicePackageActivationMode specified at the time of creating the service
            is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of
            ServicePackageActivationId
            is always an empty string.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RestartDeployedCodePackageDescription.ServiceManifestName">
            <summary>
            Gets the name of service manifest that specified this code package.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RestartDeployedCodePackageDescription.ServicePackageActivationId">
            <summary>
            Gets the ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of
            creating the service
            is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of
            ServicePackageActivationId
            is always an empty string.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RestartDeployedCodePackageDescription.CodePackageName">
            <summary>
            Gets the name of the code package defined in the service manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RestartDeployedCodePackageDescription.CodePackageInstanceId">
            <summary>
            Gets the instance ID for currently running entry point. For a code package setup entry point (if specified) runs
            first and after it finishes main entry point is started.
            Each time entry point executable is run, its instance ID will change. If 0 is passed in as the code package
            instance ID, the API will restart the code package with whatever instance ID it is currently running.
            If an instance ID other than 0 is passed in, the API will restart the code package only if the current Instance ID
            matches the passed in instance ID.
            Note, passing in the exact instance ID (not 0) in the API is safer, because if ensures at most one restart of the
            code package.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RestartNodeDescription">
            <summary>
            Describes the parameters to restart a Service Fabric node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RestartNodeDescription.#ctor(System.String,System.Nullable{Microsoft.ServiceFabric.Common.CreateFabricDump})">
            <summary>
            Initializes a new instance of the RestartNodeDescription class.
            </summary>
            <param name="nodeInstanceId">The instance ID of the target node. If instance ID is specified the node is restarted
            only if it matches with the current instance of the node. A default value of "0" would match any instance ID. The
            instance ID can be obtained using get node query.</param>
            <param name="createFabricDump">Specify True to create a dump of the fabric node process. This is case-sensitive.
            Possible values include: 'False', 'True'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RestartNodeDescription.NodeInstanceId">
            <summary>
            Gets the instance ID of the target node. If instance ID is specified the node is restarted only if it matches with
            the current instance of the node. A default value of "0" would match any instance ID. The instance ID can be
            obtained using get node query.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RestartNodeDescription.CreateFabricDump">
            <summary>
            Gets specify True to create a dump of the fabric node process. This is case-sensitive. Possible values include:
            'False', 'True'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RestartPartitionMode">
            <summary>
            Defines values for RestartPartitionMode.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RestartPartitionMode.Invalid">
            <summary>
            Reserved.  Do not pass into API.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RestartPartitionMode.AllReplicasOrInstances">
            <summary>
            All replicas or instances in the partition are restarted at once.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RestartPartitionMode.OnlyActiveSecondaries">
            <summary>
            Only the secondary replicas are restarted.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RestartPartitionResult">
            <summary>
            Represents information about an operation in a terminal state (Completed or Faulted).
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RestartPartitionResult.#ctor(System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.SelectedPartition)">
            <summary>
            Initializes a new instance of the RestartPartitionResult class.
            </summary>
            <param name="errorCode">If OperationState is Completed, this is 0.  If OperationState is Faulted, this is an error
            code indicating the reason.</param>
            <param name="selectedPartition">This class returns information about the partition that the user-induced operation
            acted upon.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RestartPartitionResult.ErrorCode">
            <summary>
            Gets if OperationState is Completed, this is 0.  If OperationState is Faulted, this is an error code indicating the
            reason.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RestartPartitionResult.SelectedPartition">
            <summary>
            Gets this class returns information about the partition that the user-induced operation acted upon.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RestartPolicy">
            <summary>
            Defines values for RestartPolicy.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RestartPolicy.OnFailure">
            <summary>
            Service will be restarted when it encounters a failure.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RestartPolicy.Never">
            <summary>
            Service will never be restarted. If the service encounters a failure, it will move to Failed state.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RestorePartitionDescription">
            <summary>
            Specifies the parameters needed to trigger a restore of a specific partition.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RestorePartitionDescription.#ctor(System.Nullable{System.Guid},System.String,Microsoft.ServiceFabric.Common.BackupStorageDescription)">
            <summary>
            Initializes a new instance of the RestorePartitionDescription class.
            </summary>
            <param name="backupId">Unique backup ID.</param>
            <param name="backupLocation">Location of the backup relative to the backup storage specified/ configured.</param>
            <param name="backupStorage">Location of the backup from where the partition will be restored.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RestorePartitionDescription.BackupId">
            <summary>
            Gets unique backup ID.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RestorePartitionDescription.BackupLocation">
            <summary>
            Gets location of the backup relative to the backup storage specified/ configured.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RestorePartitionDescription.BackupStorage">
            <summary>
            Gets location of the backup from where the partition will be restored.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RestoreProgressInfo">
            <summary>
            Describes the progress of a restore operation on a partition.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RestoreProgressInfo.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.RestoreState},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.Epoch,System.String,Microsoft.ServiceFabric.Common.FabricErrorError)">
            <summary>
            Initializes a new instance of the RestoreProgressInfo class.
            </summary>
            <param name="restoreState">Represents the current state of the partition restore operation.
            . Possible values include: 'Invalid', 'Accepted', 'RestoreInProgress', 'Success', 'Failure', 'Timeout'</param>
            <param name="timeStampUtc">Timestamp when operation succeeded or failed.</param>
            <param name="restoredEpoch">Describes the epoch at which the partition is restored.</param>
            <param name="restoredLsn">Restored LSN.</param>
            <param name="failureError">Denotes the failure encountered in performing restore operation.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RestoreProgressInfo.RestoreState">
            <summary>
            Gets represents the current state of the partition restore operation.
            . Possible values include: 'Invalid', 'Accepted', 'RestoreInProgress', 'Success', 'Failure', 'Timeout'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RestoreProgressInfo.TimeStampUtc">
            <summary>
            Gets timestamp when operation succeeded or failed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RestoreProgressInfo.RestoredEpoch">
            <summary>
            Gets the epoch at which the partition is restored.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RestoreProgressInfo.RestoredLsn">
            <summary>
            Gets restored LSN.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RestoreProgressInfo.FailureError">
            <summary>
            Gets denotes the failure encountered in performing restore operation.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RestoreState">
            <summary>
            Defines values for RestoreState.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RestoreState.Invalid">
            <summary>
            Indicates an invalid restore state. All Service Fabric enumerations have the invalid type.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RestoreState.Accepted">
            <summary>
            Operation has been validated and accepted. Restore is yet to be triggered.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RestoreState.RestoreInProgress">
            <summary>
            Restore operation has been triggered and is under process.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RestoreState.Success">
            <summary>
            Operation completed with success.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RestoreState.Failure">
            <summary>
            Operation completed with failure.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RestoreState.Timeout">
            <summary>
            Operation timed out.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ResultStatus">
            <summary>
            Defines values for ResultStatus.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ResultStatus.Invalid">
            <summary>
            Indicates that the repair task result is invalid. All Service Fabric enumerations have the invalid value.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ResultStatus.Succeeded">
            <summary>
            Indicates that the repair task completed execution successfully.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ResultStatus.Cancelled">
            <summary>
            Indicates that the repair task was cancelled prior to execution.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ResultStatus.Interrupted">
            <summary>
            Indicates that execution of the repair task was interrupted by a cancellation request after some work had already
            been performed.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ResultStatus.Failed">
            <summary>
            Indicates that there was a failure during execution of the repair task. Some work may have been performed.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ResultStatus.Pending">
            <summary>
            Indicates that the repair task result is not yet available, because the repair task has not finished executing.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ResumeApplicationUpgradeDescription">
            <summary>
            Describes the parameters for resuming an unmonitored manual Service Fabric application upgrade
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ResumeApplicationUpgradeDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ResumeApplicationUpgradeDescription class.
            </summary>
            <param name="upgradeDomainName">The name of the upgrade domain in which to resume the upgrade.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ResumeApplicationUpgradeDescription.UpgradeDomainName">
            <summary>
            Gets the name of the upgrade domain in which to resume the upgrade.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ResumeClusterUpgradeDescription">
            <summary>
            Describes the parameters for resuming a cluster upgrade.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ResumeClusterUpgradeDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ResumeClusterUpgradeDescription class.
            </summary>
            <param name="upgradeDomain">The next upgrade domain for this cluster upgrade.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ResumeClusterUpgradeDescription.UpgradeDomain">
            <summary>
            Gets the next upgrade domain for this cluster upgrade.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RetentionPolicyDescription">
            <summary>
            Describes the retention policy configured.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RetentionPolicyDescription.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.RetentionPolicyType})">
            <summary>
            Initializes a new instance of the RetentionPolicyDescription class.
            </summary>
            <param name="retentionPolicyType">The type of retention policy. Currently only "Basic" retention policy is
            supported.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RetentionPolicyDescription.RetentionPolicyType">
            <summary>
            Gets the type of retention policy. Currently only "Basic" retention policy is supported.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RetentionPolicyType">
            <summary>
            Defines values for RetentionPolicyType.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RetentionPolicyType.Basic">
            <summary>
            Indicates a basic retention policy type.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RetentionPolicyType.Invalid">
            <summary>
            Indicates an invalid retention policy type.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RollingUpgradeMode">
            <summary>
            Defines values for RollingUpgradeMode.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RollingUpgradeMode.Invalid">
            <summary>
            Indicates the upgrade mode is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RollingUpgradeMode.UnmonitoredAuto">
            <summary>
            The upgrade will proceed automatically without performing any health monitoring. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RollingUpgradeMode.UnmonitoredManual">
            <summary>
            The upgrade will stop after completing each upgrade domain, giving the opportunity to manually monitor health
            before proceeding. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.RollingUpgradeMode.Monitored">
            <summary>
            The upgrade will stop after completing each upgrade domain and automatically monitor health before proceeding. The
            value is 3.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RollingUpgradeUpdateDescription">
            <summary>
            Describes the parameters for updating a rolling upgrade of application or cluster.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RollingUpgradeUpdateDescription.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.UpgradeMode},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{Microsoft.ServiceFabric.Common.FailureAction},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the RollingUpgradeUpdateDescription class.
            </summary>
            <param name="rollingUpgradeMode">The mode used to monitor health during a rolling upgrade. The values are
            UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto',
            'UnmonitoredManual', 'Monitored'</param>
            <param name="forceRestart">If true, then processes are forcefully restarted during upgrade even when the code
            version has not changed (the upgrade only changes configuration or data).</param>
            <param name="replicaSetCheckTimeoutInMilliseconds">The maximum amount of time to block processing of an upgrade
            domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of
            the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each
            upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).</param>
            <param name="failureAction">The compensating action to perform when a Monitored upgrade encounters monitoring
            policy or health policy violations.
            Invalid indicates the failure action is invalid. Rollback specifies that the upgrade will start rolling back
            automatically.
            Manual indicates that the upgrade will switch to UnmonitoredManual upgrade mode.
            . Possible values include: 'Invalid', 'Rollback', 'Manual'</param>
            <param name="healthCheckWaitDurationInMilliseconds">The amount of time to wait after completing an upgrade domain
            before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that
            fails, then it is interpreted as a number representing the total number of milliseconds.</param>
            <param name="healthCheckStableDurationInMilliseconds">The amount of time that the application or cluster must
            remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string
            representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number
            of milliseconds.</param>
            <param name="healthCheckRetryTimeoutInMilliseconds">The amount of time to retry health evaluation when the
            application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string
            representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number
            of milliseconds.</param>
            <param name="upgradeTimeoutInMilliseconds">The amount of time the overall upgrade has to complete before
            FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails,
            then it is interpreted as a number representing the total number of milliseconds.</param>
            <param name="upgradeDomainTimeoutInMilliseconds">The amount of time each upgrade domain has to complete before
            FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails,
            then it is interpreted as a number representing the total number of milliseconds.</param>
            <param name="instanceCloseDelayDurationInSeconds">Duration in seconds, to wait before a stateless instance is
            closed, to allow the active requests to drain gracefully. This would be effective when the instance is closing
            during the application/cluster
            upgrade, only for those instances which have a non-zero delay duration configured in the service description. See
            InstanceCloseDelayDurationSeconds property in $ref: "#/definitions/StatelessServiceDescription.yaml" for details.
            Note, the default value of InstanceCloseDelayDurationInSeconds is 4294967295, which indicates that the behavior
            will entirely depend on the delay configured in the stateless service description.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RollingUpgradeUpdateDescription.RollingUpgradeMode">
            <summary>
            Gets the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual,
            and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RollingUpgradeUpdateDescription.ForceRestart">
            <summary>
            Gets if true, then processes are forcefully restarted during upgrade even when the code version has not changed
            (the upgrade only changes configuration or data).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RollingUpgradeUpdateDescription.ReplicaSetCheckTimeoutInMilliseconds">
            <summary>
            Gets the maximum amount of time to block processing of an upgrade domain and prevent loss of availability when
            there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of
            availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and
            42949672925 inclusive. (unsigned 32-bit integer).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RollingUpgradeUpdateDescription.FailureAction">
            <summary>
            Gets the compensating action to perform when a Monitored upgrade encounters monitoring policy or health policy
            violations.
            Invalid indicates the failure action is invalid. Rollback specifies that the upgrade will start rolling back
            automatically.
            Manual indicates that the upgrade will switch to UnmonitoredManual upgrade mode.
            . Possible values include: 'Invalid', 'Rollback', 'Manual'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RollingUpgradeUpdateDescription.HealthCheckWaitDurationInMilliseconds">
            <summary>
            Gets the amount of time to wait after completing an upgrade domain before applying health policies. It is first
            interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number
            representing the total number of milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RollingUpgradeUpdateDescription.HealthCheckStableDurationInMilliseconds">
            <summary>
            Gets the amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next
            upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is
            interpreted as a number representing the total number of milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RollingUpgradeUpdateDescription.HealthCheckRetryTimeoutInMilliseconds">
            <summary>
            Gets the amount of time to retry health evaluation when the application or cluster is unhealthy before
            FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails,
            then it is interpreted as a number representing the total number of milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RollingUpgradeUpdateDescription.UpgradeTimeoutInMilliseconds">
            <summary>
            Gets the amount of time the overall upgrade has to complete before FailureAction is executed. It is first
            interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number
            representing the total number of milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RollingUpgradeUpdateDescription.UpgradeDomainTimeoutInMilliseconds">
            <summary>
            Gets the amount of time each upgrade domain has to complete before FailureAction is executed. It is first
            interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number
            representing the total number of milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RollingUpgradeUpdateDescription.InstanceCloseDelayDurationInSeconds">
            <summary>
            Gets duration in seconds, to wait before a stateless instance is closed, to allow the active requests to drain
            gracefully. This would be effective when the instance is closing during the application/cluster
            upgrade, only for those instances which have a non-zero delay duration configured in the service description. See
            InstanceCloseDelayDurationSeconds property in $ref: "#/definitions/StatelessServiceDescription.yaml" for details.
            Note, the default value of InstanceCloseDelayDurationInSeconds is 4294967295, which indicates that the behavior
            will entirely depend on the delay configured in the stateless service description.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.RunToCompletionExecutionPolicy">
            <summary>
            The run to completion execution policy, the service will perform its desired operation and complete successfully.
            If the service encounters failure, it will restarted based on restart policy specified. If the service completes
            its operation successfully, it will not be restarted again.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.RunToCompletionExecutionPolicy.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.RestartPolicy})">
            <summary>
            Initializes a new instance of the RunToCompletionExecutionPolicy class.
            </summary>
            <param name="restart">Enumerates the restart policy for RunToCompletionExecutionPolicy. Possible values include:
            'OnFailure', 'Never'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.RunToCompletionExecutionPolicy.Restart">
            <summary>
            Gets enumerates the restart policy for RunToCompletionExecutionPolicy. Possible values include: 'OnFailure',
            'Never'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SafetyCheck">
            <summary>
            Represents a safety check performed by service fabric before continuing with the operations. These checks ensure
            the availability of the service and the reliability of the state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.SafetyCheck.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.SafetyCheckKind})">
            <summary>
            Initializes a new instance of the SafetyCheck class.
            </summary>
            <param name="kind">The kind of safety check performed by service fabric before continuing with the operations.
            These checks ensure the availability of the service and the reliability of the state. Following are the kinds of
            safety checks.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SafetyCheck.Kind">
            <summary>
            Gets the kind of safety check performed by service fabric before continuing with the operations. These checks
            ensure the availability of the service and the reliability of the state. Following are the kinds of safety checks.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SafetyCheckKind">
            <summary>
            Defines values for SafetyCheckKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.SafetyCheckKind.Invalid">
            <summary>
            Indicates that the upgrade safety check kind is invalid. All Service Fabric enumerations have the invalid type. The
            value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.SafetyCheckKind.EnsureSeedNodeQuorum">
            <summary>
            Indicates that if we bring down the node then this will result in global seed node quorum loss. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.SafetyCheckKind.EnsurePartitionQuorum">
            <summary>
            Indicates that there is some partition for which if we bring down the replica on the node, it will result in quorum
            loss for that partition. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.SafetyCheckKind.WaitForPrimaryPlacement">
            <summary>
            Indicates that there is some replica on the node that was moved out of this node due to upgrade. Service Fabric is
            now waiting for the primary to be moved back to this node. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.SafetyCheckKind.WaitForPrimarySwap">
            <summary>
            Indicates that Service Fabric is waiting for a primary replica to be moved out of the node before starting upgrade
            on that node. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.SafetyCheckKind.WaitForReconfiguration">
            <summary>
            Indicates that there is some replica on the node that is involved in a reconfiguration. Service Fabric is waiting
            for the reconfiguration to be complete before staring upgrade on that node. The value is 5.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.SafetyCheckKind.WaitForInbuildReplica">
            <summary>
            Indicates that there is either a replica on the node that is going through copy, or there is a primary replica on
            the node that is copying data to some other replica. In both cases, bringing down the replica on the node due to
            upgrade will abort the copy. The value is 6.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.SafetyCheckKind.EnsureAvailability">
            <summary>
            Indicates that there is either a stateless service partition on the node having exactly one instance, or there is a
            primary replica on the node for which the partition is quorum loss. In both cases, bringing down the replicas due
            to upgrade will result in loss of availability. The value is 7.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SafetyCheckWrapper">
            <summary>
            A wrapper for the safety check object. Safety checks are performed by service fabric before continuing with the
            operations. These checks ensure the availability of the service and the reliability of the state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.SafetyCheckWrapper.#ctor(Microsoft.ServiceFabric.Common.SafetyCheck)">
            <summary>
            Initializes a new instance of the SafetyCheckWrapper class.
            </summary>
            <param name="safetyCheck">Represents a safety check performed by service fabric before continuing with the
            operations. These checks ensure the availability of the service and the reliability of the state.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SafetyCheckWrapper.SafetyCheck">
            <summary>
            Gets represents a safety check performed by service fabric before continuing with the operations. These checks
            ensure the availability of the service and the reliability of the state.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ScalingMechanismDescription">
            <summary>
            Describes the mechanism for performing a scaling operation.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ScalingMechanismDescription.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ScalingMechanismKind})">
            <summary>
            Initializes a new instance of the ScalingMechanismDescription class.
            </summary>
            <param name="kind">Enumerates the ways that a service can be scaled.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ScalingMechanismDescription.Kind">
            <summary>
            Gets enumerates the ways that a service can be scaled.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ScalingMechanismKind">
            <summary>
            Defines values for ScalingMechanismKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ScalingMechanismKind.Invalid">
            <summary>
            Indicates the scaling mechanism is invalid. All Service Fabric enumerations have the invalid type. The value is
            zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ScalingMechanismKind.PartitionInstanceCount">
            <summary>
            Indicates a mechanism for scaling where new instances are added or removed from a partition. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ScalingMechanismKind.AddRemoveIncrementalNamedPartition">
            <summary>
            Indicates a mechanism for scaling where new named partitions are added or removed from a service. The value is 2.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ScalingPolicyDescription">
            <summary>
            Describes how the scaling should be performed
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ScalingPolicyDescription.#ctor(Microsoft.ServiceFabric.Common.ScalingTriggerDescription,Microsoft.ServiceFabric.Common.ScalingMechanismDescription)">
            <summary>
            Initializes a new instance of the ScalingPolicyDescription class.
            </summary>
            <param name="scalingTrigger">Specifies the trigger associated with this scaling policy</param>
            <param name="scalingMechanism">Specifies the mechanism associated with this scaling policy</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ScalingPolicyDescription.ScalingTrigger">
            <summary>
            Gets specifies the trigger associated with this scaling policy
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ScalingPolicyDescription.ScalingMechanism">
            <summary>
            Gets specifies the mechanism associated with this scaling policy
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ScalingTriggerDescription">
            <summary>
            Describes the trigger for performing a scaling operation.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ScalingTriggerDescription.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ScalingTriggerKind})">
            <summary>
            Initializes a new instance of the ScalingTriggerDescription class.
            </summary>
            <param name="kind">Enumerates the ways that a service can be scaled.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ScalingTriggerDescription.Kind">
            <summary>
            Gets enumerates the ways that a service can be scaled.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ScalingTriggerKind">
            <summary>
            Defines values for ScalingTriggerKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ScalingTriggerKind.Invalid">
            <summary>
            Indicates the scaling trigger is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ScalingTriggerKind.AveragePartitionLoad">
            <summary>
            Indicates a trigger where scaling decisions are made based on average load of a partition. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ScalingTriggerKind.AverageServiceLoad">
            <summary>
            Indicates a trigger where scaling decisions are made based on average load of a service. The value is 2.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Scheme">
            <summary>
            Defines values for Scheme.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.Scheme.Http">
            <summary>
            Indicates that the probe is http.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.Scheme.Https">
            <summary>
            Indicates that the probe is https. No cert validation.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SecondaryActiveReplicatorStatus">
            <summary>
            Status of the secondary replicator when it is in active mode and is part of the replica set.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.SecondaryActiveReplicatorStatus.#ctor(Microsoft.ServiceFabric.Common.ReplicatorQueueStatus,System.Nullable{System.DateTime},System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.ReplicatorQueueStatus,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the SecondaryActiveReplicatorStatus class.
            </summary>
            <param name="replicationQueueStatus">Details about the replication queue on the secondary replicator.</param>
            <param name="lastReplicationOperationReceivedTimeUtc">The last time-stamp (UTC) at which a replication operation
            was received from the primary.
            UTC 0 represents an invalid value, indicating that a replication operation message was never received.
            </param>
            <param name="isInBuild">Value that indicates whether the replica is currently being built.</param>
            <param name="copyQueueStatus">Details about the copy queue on the secondary replicator.</param>
            <param name="lastCopyOperationReceivedTimeUtc">The last time-stamp (UTC) at which a copy operation was received
            from the primary.
            UTC 0 represents an invalid value, indicating that a copy operation message was never received.
            </param>
            <param name="lastAcknowledgementSentTimeUtc">The last time-stamp (UTC) at which an acknowledgment was sent to the
            primary replicator.
            UTC 0 represents an invalid value, indicating that an acknowledgment message was never sent.
            </param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SecondaryIdleReplicatorStatus">
            <summary>
            Status of the secondary replicator when it is in idle mode and is being built by the primary.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.SecondaryIdleReplicatorStatus.#ctor(Microsoft.ServiceFabric.Common.ReplicatorQueueStatus,System.Nullable{System.DateTime},System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.ReplicatorQueueStatus,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the SecondaryIdleReplicatorStatus class.
            </summary>
            <param name="replicationQueueStatus">Details about the replication queue on the secondary replicator.</param>
            <param name="lastReplicationOperationReceivedTimeUtc">The last time-stamp (UTC) at which a replication operation
            was received from the primary.
            UTC 0 represents an invalid value, indicating that a replication operation message was never received.
            </param>
            <param name="isInBuild">Value that indicates whether the replica is currently being built.</param>
            <param name="copyQueueStatus">Details about the copy queue on the secondary replicator.</param>
            <param name="lastCopyOperationReceivedTimeUtc">The last time-stamp (UTC) at which a copy operation was received
            from the primary.
            UTC 0 represents an invalid value, indicating that a copy operation message was never received.
            </param>
            <param name="lastAcknowledgementSentTimeUtc">The last time-stamp (UTC) at which an acknowledgment was sent to the
            primary replicator.
            UTC 0 represents an invalid value, indicating that an acknowledgment message was never sent.
            </param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SecondaryReplicatorStatus">
            <summary>
            Provides statistics about the Service Fabric Replicator, when it is functioning in a ActiveSecondary role.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.SecondaryReplicatorStatus.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ReplicaRole},Microsoft.ServiceFabric.Common.ReplicatorQueueStatus,System.Nullable{System.DateTime},System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.ReplicatorQueueStatus,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the SecondaryReplicatorStatus class.
            </summary>
            <param name="kind">The role of a replica of a stateful service.</param>
            <param name="replicationQueueStatus">Details about the replication queue on the secondary replicator.</param>
            <param name="lastReplicationOperationReceivedTimeUtc">The last time-stamp (UTC) at which a replication operation
            was received from the primary.
            UTC 0 represents an invalid value, indicating that a replication operation message was never received.
            </param>
            <param name="isInBuild">Value that indicates whether the replica is currently being built.</param>
            <param name="copyQueueStatus">Details about the copy queue on the secondary replicator.</param>
            <param name="lastCopyOperationReceivedTimeUtc">The last time-stamp (UTC) at which a copy operation was received
            from the primary.
            UTC 0 represents an invalid value, indicating that a copy operation message was never received.
            </param>
            <param name="lastAcknowledgementSentTimeUtc">The last time-stamp (UTC) at which an acknowledgment was sent to the
            primary replicator.
            UTC 0 represents an invalid value, indicating that an acknowledgment message was never sent.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SecondaryReplicatorStatus.ReplicationQueueStatus">
            <summary>
            Gets details about the replication queue on the secondary replicator.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SecondaryReplicatorStatus.LastReplicationOperationReceivedTimeUtc">
            <summary>
            Gets the last time-stamp (UTC) at which a replication operation was received from the primary.
            UTC 0 represents an invalid value, indicating that a replication operation message was never received.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SecondaryReplicatorStatus.IsInBuild">
            <summary>
            Gets value that indicates whether the replica is currently being built.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SecondaryReplicatorStatus.CopyQueueStatus">
            <summary>
            Gets details about the copy queue on the secondary replicator.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SecondaryReplicatorStatus.LastCopyOperationReceivedTimeUtc">
            <summary>
            Gets the last time-stamp (UTC) at which a copy operation was received from the primary.
            UTC 0 represents an invalid value, indicating that a copy operation message was never received.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SecondaryReplicatorStatus.LastAcknowledgementSentTimeUtc">
            <summary>
            Gets the last time-stamp (UTC) at which an acknowledgment was sent to the primary replicator.
            UTC 0 represents an invalid value, indicating that an acknowledgment message was never sent.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SecretKind">
            <summary>
            Defines values for SecretKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.SecretKind.InlinedValue">
            <summary>
            A simple secret resource whose plaintext value is provided by the user.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.SecretKind.KeyVaultVersionedReference">
            <summary>
            A secret resource that references a specific version of a secret stored in Azure Key Vault; the expected value is a
            versioned KeyVault URI corresponding to the version of the secret being referenced.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SecretResourceDescription">
            <summary>
            This type describes a secret resource.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.SecretResourceDescription.#ctor(Microsoft.ServiceFabric.Common.SecretResourceProperties,System.String)">
            <summary>
            Initializes a new instance of the SecretResourceDescription class.
            </summary>
            <param name="properties">Describes the properties of a secret resource.</param>
            <param name="name">Name of the Secret resource.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SecretResourceDescription.Properties">
            <summary>
            Gets the properties of a secret resource.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SecretResourceDescription.Name">
            <summary>
            Gets name of the Secret resource.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SecretResourceProperties">
            <summary>
            Describes the properties of a secret resource.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.SecretResourceProperties.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.SecretKind},System.String,System.String)">
            <summary>
            Initializes a new instance of the SecretResourceProperties class.
            </summary>
            <param name="kind">Describes the kind of secret.</param>
            <param name="description">User readable description of the secret.</param>
            <param name="contentType">The type of the content stored in the secret value. The value of this property is opaque
            to Service Fabric. Once set, the value of this property cannot be changed.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SecretResourceProperties.Description">
            <summary>
            Gets user readable description of the secret.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SecretResourceProperties.Status">
            <summary>
            Gets status of the resource. Possible values include: 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting',
            'Failed'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SecretResourceProperties.StatusDetails">
            <summary>
            Gets additional information about the current status of the secret.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SecretResourceProperties.ContentType">
            <summary>
            Gets the type of the content stored in the secret value. The value of this property is opaque to Service Fabric.
            Once set, the value of this property cannot be changed.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SecretResourcePropertiesBase">
            <summary>
            This type describes the properties of a secret resource, including its kind.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.SecretResourcePropertiesBase.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.SecretKind})">
            <summary>
            Initializes a new instance of the SecretResourcePropertiesBase class.
            </summary>
            <param name="kind">Describes the kind of secret.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SecretResourcePropertiesBase.Kind">
            <summary>
            Gets the kind of secret.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SecretValue">
            <summary>
            This type represents the unencrypted value of the secret.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.SecretValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SecretValue class.
            </summary>
            <param name="value">The actual value of the secret.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SecretValue.Value">
            <summary>
            Gets the actual value of the secret.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SecretValueProperties">
            <summary>
            This type describes properties of secret value resource.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.SecretValueProperties.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SecretValueProperties class.
            </summary>
            <param name="value">The actual value of the secret.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SecretValueProperties.Value">
            <summary>
            Gets the actual value of the secret.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SecretValueResourceDescription">
            <summary>
            This type describes a value of a secret resource. The name of this resource is the version identifier corresponding
            to this secret value.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.SecretValueResourceDescription.#ctor(System.String,Microsoft.ServiceFabric.Common.SecretValueResourceProperties)">
            <summary>
            Initializes a new instance of the SecretValueResourceDescription class.
            </summary>
            <param name="name">Version identifier of the secret value.</param>
            <param name="properties">This type describes properties of a secret value resource.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SecretValueResourceDescription.Name">
            <summary>
            Gets version identifier of the secret value.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SecretValueResourceDescription.Properties">
            <summary>
            Gets this type describes properties of a secret value resource.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SecretValueResourceProperties">
            <summary>
            This type describes properties of a secret value resource.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.SecretValueResourceProperties.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SecretValueResourceProperties class.
            </summary>
            <param name="value">The actual value of the secret.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SeedNodeSafetyCheck">
            <summary>
            Represents a safety check for the seed nodes being performed by service fabric before continuing with node level
            operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.SeedNodeSafetyCheck.#ctor">
            <summary>
            Initializes a new instance of the SeedNodeSafetyCheck class.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SelectedPartition">
            <summary>
            This class returns information about the partition that the user-induced operation acted upon.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.SelectedPartition.#ctor(Microsoft.ServiceFabric.Common.ServiceName,Microsoft.ServiceFabric.Common.PartitionId)">
            <summary>
            Initializes a new instance of the SelectedPartition class.
            </summary>
            <param name="serviceName">The name of the service the partition belongs to.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SelectedPartition.ServiceName">
            <summary>
            Gets the name of the service the partition belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SelectedPartition.PartitionId">
            <summary>
            Gets an internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when
            the service was created. The partition ID is unique and does not change for the lifetime of the service. If the
            same service was deleted and recreated the IDs of its partitions would be different.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceBackupConfigurationInfo">
            <summary>
            Backup configuration information for a specific Service Fabric service specifying what backup policy is being
            applied and suspend description, if any.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceBackupConfigurationInfo.#ctor(System.String,System.Nullable{Microsoft.ServiceFabric.Common.BackupPolicyScope},Microsoft.ServiceFabric.Common.BackupSuspensionInfo,Microsoft.ServiceFabric.Common.ServiceName)">
            <summary>
            Initializes a new instance of the ServiceBackupConfigurationInfo class.
            </summary>
            <param name="policyName">The name of the backup policy which is applicable to this Service Fabric application or
            service or partition.</param>
            <param name="policyInheritedFrom">Specifies the scope at which the backup policy is applied.
            . Possible values include: 'Invalid', 'Partition', 'Service', 'Application'</param>
            <param name="suspensionInfo">Describes the backup suspension details.
            </param>
            <param name="serviceName">The full name of the service with 'fabric:' URI scheme.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceBackupConfigurationInfo.ServiceName">
            <summary>
            Gets the full name of the service with 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceBackupEntity">
            <summary>
            Identifies the Service Fabric stateful service which is being backed up.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceBackupEntity.#ctor(Microsoft.ServiceFabric.Common.ServiceName)">
            <summary>
            Initializes a new instance of the ServiceBackupEntity class.
            </summary>
            <param name="serviceName">The full name of the service with 'fabric:' URI scheme.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceBackupEntity.ServiceName">
            <summary>
            Gets the full name of the service with 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceCorrelationDescription">
            <summary>
            Creates a particular correlation between services.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceCorrelationDescription.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ServiceCorrelationScheme},Microsoft.ServiceFabric.Common.ServiceName)">
            <summary>
            Initializes a new instance of the ServiceCorrelationDescription class.
            </summary>
            <param name="scheme">The ServiceCorrelationScheme which describes the relationship between this service and the
            service specified via ServiceName. Possible values include: 'Invalid', 'Affinity', 'AlignedAffinity',
            'NonAlignedAffinity'
            
            The service correlation scheme.
            </param>
            <param name="serviceName">The name of the service that the correlation relationship is established with.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceCorrelationDescription.Scheme">
            <summary>
            Gets the ServiceCorrelationScheme which describes the relationship between this service and the service specified
            via ServiceName. Possible values include: 'Invalid', 'Affinity', 'AlignedAffinity', 'NonAlignedAffinity'
            
            The service correlation scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceCorrelationDescription.ServiceName">
            <summary>
            Gets the name of the service that the correlation relationship is established with.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceCorrelationScheme">
            <summary>
            Defines values for ServiceCorrelationScheme.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceCorrelationScheme.Invalid">
            <summary>
            An invalid correlation scheme. Cannot be used. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceCorrelationScheme.Affinity">
            <summary>
            Indicates that this service has an affinity relationship with another service. Provided for backwards
            compatibility, consider preferring the Aligned or NonAlignedAffinity options. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceCorrelationScheme.AlignedAffinity">
            <summary>
            Aligned affinity ensures that the primaries of the partitions of the affinitized services are collocated on the
            same nodes. This is the default and is the same as selecting the Affinity scheme. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceCorrelationScheme.NonAlignedAffinity">
            <summary>
            Non-Aligned affinity guarantees that all replicas of each service will be placed on the same nodes. Unlike Aligned
            Affinity, this does not guarantee that replicas of particular role will be collocated. The value is 3.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceCreatedEvent">
            <summary>
            Service Created event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceCreatedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Microsoft.ServiceFabric.Common.PartitionId,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ServiceCreatedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="serviceId">The identity of the service. This ID is an encoded representation of the service name. This
            is used in the REST APIs to identify the service resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the service name
            is "fabric:/myapp/app1/svc1",
            the service identity would be "myapp~app1\~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name="serviceTypeName">Service type name.</param>
            <param name="applicationName">Application name.</param>
            <param name="applicationTypeName">Application type name.</param>
            <param name="serviceInstance">Id of Service instance.</param>
            <param name="isStateful">Indicates if Service is stateful.</param>
            <param name="partitionCount">Number of partitions.</param>
            <param name="targetReplicaSetSize">Size of target replicas set.</param>
            <param name="minReplicaSetSize">Minimum size of replicas set.</param>
            <param name="servicePackageVersion">Version of Service package.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceCreatedEvent.ServiceTypeName">
            <summary>
            Gets service type name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceCreatedEvent.ApplicationName">
            <summary>
            Gets application name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceCreatedEvent.ApplicationTypeName">
            <summary>
            Gets application type name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceCreatedEvent.ServiceInstance">
            <summary>
            Gets id of Service instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceCreatedEvent.IsStateful">
            <summary>
            Gets indicates if Service is stateful.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceCreatedEvent.PartitionCount">
            <summary>
            Gets number of partitions.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceCreatedEvent.TargetReplicaSetSize">
            <summary>
            Gets size of target replicas set.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceCreatedEvent.MinReplicaSetSize">
            <summary>
            Gets minimum size of replicas set.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceCreatedEvent.ServicePackageVersion">
            <summary>
            Gets version of Service package.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceCreatedEvent.PartitionId">
            <summary>
            Gets an internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when
            the service was created. The partition ID is unique and does not change for the lifetime of the service. If the
            same service was deleted and recreated the IDs of its partitions would be different.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceDeletedEvent">
            <summary>
            Service Deleted event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceDeletedEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ServiceDeletedEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="serviceId">The identity of the service. This ID is an encoded representation of the service name. This
            is used in the REST APIs to identify the service resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the service name
            is "fabric:/myapp/app1/svc1",
            the service identity would be "myapp~app1\~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name="serviceTypeName">Service type name.</param>
            <param name="applicationName">Application name.</param>
            <param name="applicationTypeName">Application type name.</param>
            <param name="serviceInstance">Id of Service instance.</param>
            <param name="isStateful">Indicates if Service is stateful.</param>
            <param name="partitionCount">Number of partitions.</param>
            <param name="targetReplicaSetSize">Size of target replicas set.</param>
            <param name="minReplicaSetSize">Minimum size of replicas set.</param>
            <param name="servicePackageVersion">Version of Service package.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDeletedEvent.ServiceTypeName">
            <summary>
            Gets service type name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDeletedEvent.ApplicationName">
            <summary>
            Gets application name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDeletedEvent.ApplicationTypeName">
            <summary>
            Gets application type name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDeletedEvent.ServiceInstance">
            <summary>
            Gets id of Service instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDeletedEvent.IsStateful">
            <summary>
            Gets indicates if Service is stateful.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDeletedEvent.PartitionCount">
            <summary>
            Gets number of partitions.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDeletedEvent.TargetReplicaSetSize">
            <summary>
            Gets size of target replicas set.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDeletedEvent.MinReplicaSetSize">
            <summary>
            Gets minimum size of replicas set.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDeletedEvent.ServicePackageVersion">
            <summary>
            Gets version of Service package.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceDescription">
            <summary>
            A ServiceDescription contains all of the information necessary to create a service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceDescription.#ctor(Microsoft.ServiceFabric.Common.ServiceName,System.String,Microsoft.ServiceFabric.Common.PartitionSchemeDescription,System.Nullable{Microsoft.ServiceFabric.Common.ServiceKind},Microsoft.ServiceFabric.Common.ApplicationName,System.Byte[],System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceCorrelationDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceLoadMetricDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServicePlacementPolicyDescription},System.Nullable{Microsoft.ServiceFabric.Common.MoveCost},System.Nullable{System.Boolean},System.Nullable{Microsoft.ServiceFabric.Common.ServicePackageActivationMode},System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ScalingPolicyDescription},Microsoft.ServiceFabric.Common.NodeTagsDescription,Microsoft.ServiceFabric.Common.NodeTagsDescription)">
            <summary>
            Initializes a new instance of the ServiceDescription class.
            </summary>
            <param name="serviceName">The full name of the service with 'fabric:' URI scheme.</param>
            <param name="serviceTypeName">Name of the service type as specified in the service manifest.</param>
            <param name="partitionDescription">The partition description as an object.</param>
            <param name="serviceKind">The kind of service (Stateless or Stateful).</param>
            <param name="applicationName">The name of the application, including the 'fabric:' URI scheme.</param>
            <param name="initializationData">The initialization data as an array of bytes. Initialization data is passed to
            service instances or replicas when they are created.</param>
            <param name="placementConstraints">The placement constraints as a string. Placement constraints are boolean
            expressions on node properties and allow for restricting a service to particular nodes based on the service
            requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor ==
            blue)".</param>
            <param name="correlationScheme">The correlation scheme.</param>
            <param name="serviceLoadMetrics">The service load metrics.</param>
            <param name="servicePlacementPolicies">The service placement policies.</param>
            <param name="defaultMoveCost">The move cost for the service. Possible values include: 'Zero', 'Low', 'Medium',
            'High', 'VeryHigh'
            
            Specifies the move cost for the service.
            </param>
            <param name="isDefaultMoveCostSpecified">Indicates if the DefaultMoveCost property is specified.</param>
            <param name="servicePackageActivationMode">The activation mode of service package to be used for a service.
            Possible values include: 'SharedProcess', 'ExclusiveProcess'
            
            The activation mode of service package to be used for a Service Fabric service. This is specified at the time of
            creating the Service.
            </param>
            <param name="serviceDnsName">The DNS name of the service. It requires the DNS system service to be enabled in
            Service Fabric cluster.</param>
            <param name="scalingPolicies">Scaling policies for this service.</param>
            <param name="tagsRequiredToPlace">Tags for placement of this service.</param>
            <param name="tagsRequiredToRun">Tags for running of this service.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDescription.ApplicationName">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDescription.ServiceName">
            <summary>
            Gets the full name of the service with 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDescription.ServiceTypeName">
            <summary>
            Gets name of the service type as specified in the service manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDescription.InitializationData">
            <summary>
            Gets the initialization data as an array of bytes. Initialization data is passed to service instances or replicas
            when they are created.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDescription.PartitionDescription">
            <summary>
            Gets the partition description as an object.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDescription.PlacementConstraints">
            <summary>
            Gets the placement constraints as a string. Placement constraints are boolean expressions on node properties and
            allow for restricting a service to particular nodes based on the service requirements. For example, to place a
            service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDescription.CorrelationScheme">
            <summary>
            Gets the correlation scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDescription.ServiceLoadMetrics">
            <summary>
            Gets the service load metrics.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDescription.ServicePlacementPolicies">
            <summary>
            Gets the service placement policies.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDescription.DefaultMoveCost">
            <summary>
            Gets the move cost for the service. Possible values include: 'Zero', 'Low', 'Medium', 'High', 'VeryHigh'
            
            Specifies the move cost for the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDescription.IsDefaultMoveCostSpecified">
            <summary>
            Gets indicates if the DefaultMoveCost property is specified.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDescription.ServicePackageActivationMode">
            <summary>
            Gets the activation mode of service package to be used for a service. Possible values include: 'SharedProcess',
            'ExclusiveProcess'
            
            The activation mode of service package to be used for a Service Fabric service. This is specified at the time of
            creating the Service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDescription.ServiceDnsName">
            <summary>
            Gets the DNS name of the service. It requires the DNS system service to be enabled in Service Fabric cluster.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDescription.ScalingPolicies">
            <summary>
            Gets scaling policies for this service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDescription.TagsRequiredToPlace">
            <summary>
            Gets tags for placement of this service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDescription.TagsRequiredToRun">
            <summary>
            Gets tags for running of this service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceDescription.ServiceKind">
            <summary>
            Gets the kind of service (Stateless or Stateful).
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceEndpointRole">
            <summary>
            Defines values for ServiceEndpointRole.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceEndpointRole.Invalid">
            <summary>
            Indicates the service endpoint role is invalid. All Service Fabric enumerations have the invalid type. The value is
            zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceEndpointRole.Stateless">
            <summary>
            Indicates that the service endpoint is of a stateless service. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceEndpointRole.StatefulPrimary">
            <summary>
            Indicates that the service endpoint is of a primary replica of a stateful service. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceEndpointRole.StatefulSecondary">
            <summary>
            Indicates that the service endpoint is of a secondary replica of a stateful service. The value is 3.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceEvent">
            <summary>
            Represents the base for all Service Events.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.Nullable{Microsoft.ServiceFabric.Common.FabricEventKind},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ServiceEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="kind">The kind of FabricEvent.</param>
            <param name="serviceId">The identity of the service. This ID is an encoded representation of the service name. This
            is used in the REST APIs to identify the service resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the service name
            is "fabric:/myapp/app1/svc1",
            the service identity would be "myapp~app1\~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceEvent.ServiceId">
            <summary>
            Gets the identity of the service. This ID is an encoded representation of the service name. This is used in the
            REST APIs to identify the service resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the service name
            is "fabric:/myapp/app1/svc1",
            the service identity would be "myapp~app1\~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceFromTemplateDescription">
            <summary>
            Defines description for creating a Service Fabric service from a template defined in the application manifest.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceFromTemplateDescription.#ctor(Microsoft.ServiceFabric.Common.ApplicationName,Microsoft.ServiceFabric.Common.ServiceName,System.String,System.Byte[],System.Nullable{Microsoft.ServiceFabric.Common.ServicePackageActivationMode},System.String)">
            <summary>
            Initializes a new instance of the ServiceFromTemplateDescription class.
            </summary>
            <param name="applicationName">The name of the application, including the 'fabric:' URI scheme.</param>
            <param name="serviceName">The full name of the service with 'fabric:' URI scheme.</param>
            <param name="serviceTypeName">Name of the service type as specified in the service manifest.</param>
            <param name="initializationData">The initialization data for the newly created service instance.</param>
            <param name="servicePackageActivationMode">The activation mode of service package to be used for a service.
            Possible values include: 'SharedProcess', 'ExclusiveProcess'
            
            The activation mode of service package to be used for a Service Fabric service. This is specified at the time of
            creating the Service.
            </param>
            <param name="serviceDnsName">The DNS name of the service. It requires the DNS system service to be enabled in
            Service Fabric cluster.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceFromTemplateDescription.ApplicationName">
            <summary>
            Gets the name of the application, including the 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceFromTemplateDescription.ServiceName">
            <summary>
            Gets the full name of the service with 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceFromTemplateDescription.ServiceTypeName">
            <summary>
            Gets name of the service type as specified in the service manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceFromTemplateDescription.InitializationData">
            <summary>
            Gets the initialization data for the newly created service instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceFromTemplateDescription.ServicePackageActivationMode">
            <summary>
            Gets the activation mode of service package to be used for a service. Possible values include: 'SharedProcess',
            'ExclusiveProcess'
            
            The activation mode of service package to be used for a Service Fabric service. This is specified at the time of
            creating the Service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceFromTemplateDescription.ServiceDnsName">
            <summary>
            Gets the DNS name of the service. It requires the DNS system service to be enabled in Service Fabric cluster.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceHealth">
            <summary>
            Information about the health of a Service Fabric service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceHealth.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvent},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper},Microsoft.ServiceFabric.Common.HealthStatistics,Microsoft.ServiceFabric.Common.ServiceName,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.PartitionHealthState})">
            <summary>
            Initializes a new instance of the ServiceHealth class.
            </summary>
            <param name="aggregatedHealthState">The HealthState representing the aggregated health state of the entity computed
            by Health Manager.
            The health evaluation of the entity reflects all events reported on the entity and its children (if any).
            The aggregation is done by applying the desired health policy.
            . Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            
            The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
            </param>
            <param name="healthEvents">The list of health events reported on the entity.</param>
            <param name="unhealthyEvaluations">The unhealthy evaluations that show why the current aggregated health state was
            returned by Health Manager.</param>
            <param name="healthStatistics">Shows the health statistics for all children types of the queried entity.</param>
            <param name="name">The name of the service whose health information is described by this object.</param>
            <param name="partitionHealthStates">The list of partition health states associated with the service.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealth.Name">
            <summary>
            Gets the name of the service whose health information is described by this object.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealth.PartitionHealthStates">
            <summary>
            Gets the list of partition health states associated with the service.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceHealthEvaluation">
            <summary>
            Represents health evaluation for a service, containing information about the data and the algorithm used by health
            store to evaluate health. The evaluation is returned only when the aggregated health state is either Error or
            Warning.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,Microsoft.ServiceFabric.Common.ServiceName,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the ServiceHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="serviceName">Name of the service whose health evaluation is described by this object.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the current aggregated health state of
            the service. The types of the unhealthy evaluations can be PartitionsHealthEvaluation or
            EventHealthEvaluation.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealthEvaluation.ServiceName">
            <summary>
            Gets name of the service whose health evaluation is described by this object.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the current aggregated health state of the service. The types of the
            unhealthy evaluations can be PartitionsHealthEvaluation or EventHealthEvaluation.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceHealthReportExpiredEvent">
            <summary>
            Service Health Report Expired event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceHealthReportExpiredEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ServiceHealthReportExpiredEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="serviceId">The identity of the service. This ID is an encoded representation of the service name. This
            is used in the REST APIs to identify the service resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the service name
            is "fabric:/myapp/app1/svc1",
            the service identity would be "myapp~app1\~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name="instanceId">Id of Service instance.</param>
            <param name="sourceId">Id of report source.</param>
            <param name="property">Describes the property.</param>
            <param name="healthState">Describes the property health state.</param>
            <param name="timeToLiveMs">Time to live in milli-seconds.</param>
            <param name="sequenceNumber">Sequence number of report.</param>
            <param name="description">Description of report.</param>
            <param name="removeWhenExpired">Indicates the removal when it expires.</param>
            <param name="sourceUtcTimestamp">Source time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealthReportExpiredEvent.InstanceId">
            <summary>
            Gets id of Service instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealthReportExpiredEvent.SourceId">
            <summary>
            Gets id of report source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealthReportExpiredEvent.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealthReportExpiredEvent.HealthState">
            <summary>
            Gets the property health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealthReportExpiredEvent.TimeToLiveMs">
            <summary>
            Gets time to live in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealthReportExpiredEvent.SequenceNumber">
            <summary>
            Gets sequence number of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealthReportExpiredEvent.Description">
            <summary>
            Gets description of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealthReportExpiredEvent.RemoveWhenExpired">
            <summary>
            Gets indicates the removal when it expires.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealthReportExpiredEvent.SourceUtcTimestamp">
            <summary>
            Gets source time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceHealthState">
            <summary>
            Represents the health state of a service, which contains the service identifier and its aggregated health state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceHealthState.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},Microsoft.ServiceFabric.Common.ServiceName)">
            <summary>
            Initializes a new instance of the ServiceHealthState class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="serviceName">Name of the service whose health state is represented by this object.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealthState.ServiceName">
            <summary>
            Gets name of the service whose health state is represented by this object.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceHealthStateChunk">
            <summary>
            Represents the health state chunk of a service, which contains the service name, its aggregated health state and
            any partitions that respect the filters in the cluster health chunk query description.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceHealthStateChunk.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},Microsoft.ServiceFabric.Common.ServiceName,Microsoft.ServiceFabric.Common.PartitionHealthStateChunkList)">
            <summary>
            Initializes a new instance of the ServiceHealthStateChunk class.
            </summary>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="serviceName">The name of the service whose health state chunk is provided in this object.</param>
            <param name="partitionHealthStateChunks">The list of partition health state chunks belonging to the service that
            respect the filters in the cluster health chunk query description.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealthStateChunk.ServiceName">
            <summary>
            Gets the name of the service whose health state chunk is provided in this object.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealthStateChunk.PartitionHealthStateChunks">
            <summary>
            Gets the list of partition health state chunks belonging to the service that respect the filters in the cluster
            health chunk query description.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceHealthStateChunkList">
            <summary>
            The list of service health state chunks that respect the input filters in the chunk query. Returned by get cluster
            health state chunks query.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceHealthStateChunkList.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceHealthStateChunk})">
            <summary>
            Initializes a new instance of the ServiceHealthStateChunkList class.
            </summary>
            <param name="items">The list of service health state chunks that respect the input filters in the chunk query.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealthStateChunkList.Items">
            <summary>
            Gets the list of service health state chunks that respect the input filters in the chunk query.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceHealthStateFilter">
            <summary>
            Defines matching criteria to determine whether a service should be included as a child of an application in the
            cluster health chunk.
            The services are only returned if the parent application matches a filter specified in the cluster health chunk
            query description.
            One filter can match zero, one or multiple services, depending on its properties.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceHealthStateFilter.#ctor(System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.PartitionHealthStateFilter})">
            <summary>
            Initializes a new instance of the ServiceHealthStateFilter class.
            </summary>
            <param name="serviceNameFilter">The name of the service that matches the filter. The filter is applied only to the
            specified service, if it exists.
            If the service doesn't exist, no service is returned in the cluster health chunk based on this filter.
            If the service exists, it is included as the application's child if the health state matches the other filter
            properties.
            If not specified, all services that match the parent filters (if any) are taken into consideration and matched
            against the other filter members, like health state filter.
            </param>
            <param name="healthStateFilter">The filter for the health state of the services. It allows selecting services if
            they match the desired health states.
            The possible values are integer value of one of the following health states. Only services that match the filter
            are returned. All services are used to evaluate the cluster aggregated health state.
            If not specified, default value is None, unless the service name is specified. If the filter has default value and
            service name is specified, the matching service is returned.
            The state values are flag-based enumeration, so the value could be a combination of these values obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6, it matches services with HealthState value of OK (2) and Warning (4).
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </param>
            <param name="partitionFilters">Defines a list of filters that specify which partitions to be included in the
            returned cluster health chunk as children of the service. The partitions are returned only if the parent service
            matches a filter.
            If the list is empty, no partitions are returned. All the partitions are used to evaluate the parent service
            aggregated health state, regardless of the input filters.
            The service filter may specify multiple partition filters.
            For example, it can specify a filter to return all partitions with health state Error and another filter to always
            include a partition identified by its partition ID.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealthStateFilter.ServiceNameFilter">
            <summary>
            Gets the name of the service that matches the filter. The filter is applied only to the specified service, if it
            exists.
            If the service doesn't exist, no service is returned in the cluster health chunk based on this filter.
            If the service exists, it is included as the application's child if the health state matches the other filter
            properties.
            If not specified, all services that match the parent filters (if any) are taken into consideration and matched
            against the other filter members, like health state filter.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealthStateFilter.HealthStateFilter">
            <summary>
            Gets the filter for the health state of the services. It allows selecting services if they match the desired health
            states.
            The possible values are integer value of one of the following health states. Only services that match the filter
            are returned. All services are used to evaluate the cluster aggregated health state.
            If not specified, default value is None, unless the service name is specified. If the filter has default value and
            service name is specified, the matching service is returned.
            The state values are flag-based enumeration, so the value could be a combination of these values obtained using
            bitwise 'OR' operator.
            For example, if the provided value is 6, it matches services with HealthState value of OK (2) and Warning (4).
            
            - Default - Default value. Matches any HealthState. The value is zero.
            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection
            of states. The value is 1.
            - Ok - Filter that matches input with HealthState value Ok. The value is 2.
            - Warning - Filter that matches input with HealthState value Warning. The value is 4.
            - Error - Filter that matches input with HealthState value Error. The value is 8.
            - All - Filter that matches input with any HealthState value. The value is 65535.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceHealthStateFilter.PartitionFilters">
            <summary>
            Gets defines a list of filters that specify which partitions to be included in the returned cluster health chunk as
            children of the service. The partitions are returned only if the parent service matches a filter.
            If the list is empty, no partitions are returned. All the partitions are used to evaluate the parent service
            aggregated health state, regardless of the input filters.
            The service filter may specify multiple partition filters.
            For example, it can specify a filter to return all partitions with health state Error and another filter to always
            include a partition identified by its partition ID.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceIdentity">
            <summary>
            Map service identity friendly name to an application identity.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceIdentity.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ServiceIdentity class.
            </summary>
            <param name="name">The identity friendly name.</param>
            <param name="identityRef">The application identity name.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceIdentity.Name">
            <summary>
            Gets the identity friendly name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceIdentity.IdentityRef">
            <summary>
            Gets the application identity name.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceInfo">
            <summary>
            Information about a Service Fabric service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceInfo.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ServiceKind},System.String,Microsoft.ServiceFabric.Common.ServiceName,System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Nullable{Microsoft.ServiceFabric.Common.ServiceStatus},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ServiceInfo class.
            </summary>
            <param name="serviceKind">The kind of service (Stateless or Stateful).</param>
            <param name="id">The identity of the service. This ID is an encoded representation of the service name. This is
            used in the REST APIs to identify the service resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the service name
            is "fabric:/myapp/app1/svc1",
            the service identity would be "myapp~app1\~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name="name">The full name of the service with 'fabric:' URI scheme.</param>
            <param name="typeName">Name of the service type as specified in the service manifest.</param>
            <param name="manifestVersion">The version of the service manifest.</param>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="serviceStatus">The status of the application. Possible values include: 'Unknown', 'Active',
            'Upgrading', 'Deleting', 'Creating', 'Failed'</param>
            <param name="isServiceGroup">Whether the service is in a service group.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceInfo.Id">
            <summary>
            Gets the identity of the service. This ID is an encoded representation of the service name. This is used in the
            REST APIs to identify the service resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the service name
            is "fabric:/myapp/app1/svc1",
            the service identity would be "myapp~app1\~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceInfo.Name">
            <summary>
            Gets the full name of the service with 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceInfo.TypeName">
            <summary>
            Gets name of the service type as specified in the service manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceInfo.ManifestVersion">
            <summary>
            Gets the version of the service manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceInfo.HealthState">
            <summary>
            Gets the health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica
            etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceInfo.ServiceStatus">
            <summary>
            Gets the status of the application. Possible values include: 'Unknown', 'Active', 'Upgrading', 'Deleting',
            'Creating', 'Failed'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceInfo.IsServiceGroup">
            <summary>
            Gets whether the service is in a service group.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceInfo.ServiceKind">
            <summary>
            Gets the kind of service (Stateless or Stateful).
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceKind">
            <summary>
            Defines values for ServiceKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceKind.Invalid">
            <summary>
            Indicates the service kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceKind.Stateless">
            <summary>
            Does not use Service Fabric to make its state highly available or reliable. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceKind.Stateful">
            <summary>
            Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 2.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceLoadMetricDescription">
            <summary>
            Specifies a metric to load balance a service during runtime.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceLoadMetricDescription.#ctor(System.String,System.Nullable{Microsoft.ServiceFabric.Common.ServiceLoadMetricWeight},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the ServiceLoadMetricDescription class.
            </summary>
            <param name="name">The name of the metric. If the service chooses to report load during runtime, the load metric
            name should match the name that is specified in Name exactly. Note that metric names are case-sensitive.</param>
            <param name="weight">The service load metric relative weight, compared to other metrics configured for this
            service, as a number. Possible values include: 'Zero', 'Low', 'Medium', 'High'
            
            Determines the metric weight relative to the other metrics that are configured for this service. During runtime, if
            two metrics end up in conflict, the Cluster Resource Manager prefers the metric with the higher weight.
            </param>
            <param name="primaryDefaultLoad">Used only for Stateful services. The default amount of load, as a number, that
            this service creates for this metric when it is a Primary replica.</param>
            <param name="secondaryDefaultLoad">Used only for Stateful services. The default amount of load, as a number, that
            this service creates for this metric when it is a Secondary replica.</param>
            <param name="defaultLoad">Used only for Stateless services. The default amount of load, as a number, that this
            service creates for this metric.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceLoadMetricDescription.Name">
            <summary>
            Gets the name of the metric. If the service chooses to report load during runtime, the load metric name should
            match the name that is specified in Name exactly. Note that metric names are case-sensitive.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceLoadMetricDescription.Weight">
            <summary>
            Gets the service load metric relative weight, compared to other metrics configured for this service, as a number.
            Possible values include: 'Zero', 'Low', 'Medium', 'High'
            
            Determines the metric weight relative to the other metrics that are configured for this service. During runtime, if
            two metrics end up in conflict, the Cluster Resource Manager prefers the metric with the higher weight.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceLoadMetricDescription.PrimaryDefaultLoad">
            <summary>
            Gets used only for Stateful services. The default amount of load, as a number, that this service creates for this
            metric when it is a Primary replica.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceLoadMetricDescription.SecondaryDefaultLoad">
            <summary>
            Gets used only for Stateful services. The default amount of load, as a number, that this service creates for this
            metric when it is a Secondary replica.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceLoadMetricDescription.DefaultLoad">
            <summary>
            Gets used only for Stateless services. The default amount of load, as a number, that this service creates for this
            metric.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceLoadMetricWeight">
            <summary>
            Defines values for ServiceLoadMetricWeight.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceLoadMetricWeight.Zero">
            <summary>
            Disables resource balancing for this metric. This value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceLoadMetricWeight.Low">
            <summary>
            Specifies the metric weight of the service load as Low. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceLoadMetricWeight.Medium">
            <summary>
            Specifies the metric weight of the service load as Medium. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceLoadMetricWeight.High">
            <summary>
            Specifies the metric weight of the service load as High. The value is 3.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceNameInfo">
            <summary>
            Information about the service name.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceNameInfo.#ctor(System.String,Microsoft.ServiceFabric.Common.ServiceName)">
            <summary>
            Initializes a new instance of the ServiceNameInfo class.
            </summary>
            <param name="id">The identity of the service. This ID is an encoded representation of the service name. This is
            used in the REST APIs to identify the service resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the service name
            is "fabric:/myapp/app1/svc1",
            the service identity would be "myapp~app1\~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name="name">The full name of the service with 'fabric:' URI scheme.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceNameInfo.Id">
            <summary>
            Gets the identity of the service. This ID is an encoded representation of the service name. This is used in the
            REST APIs to identify the service resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the service name
            is "fabric:/myapp/app1/svc1",
            the service identity would be "myapp~app1\~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceNameInfo.Name">
            <summary>
            Gets the full name of the service with 'fabric:' URI scheme.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceNewHealthReportEvent">
            <summary>
            Service Health Report Created event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceNewHealthReportEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ServiceNewHealthReportEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="serviceId">The identity of the service. This ID is an encoded representation of the service name. This
            is used in the REST APIs to identify the service resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the service name
            is "fabric:/myapp/app1/svc1",
            the service identity would be "myapp~app1\~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name="instanceId">Id of Service instance.</param>
            <param name="sourceId">Id of report source.</param>
            <param name="property">Describes the property.</param>
            <param name="healthState">Describes the property health state.</param>
            <param name="timeToLiveMs">Time to live in milli-seconds.</param>
            <param name="sequenceNumber">Sequence number of report.</param>
            <param name="description">Description of report.</param>
            <param name="removeWhenExpired">Indicates the removal when it expires.</param>
            <param name="sourceUtcTimestamp">Source time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceNewHealthReportEvent.InstanceId">
            <summary>
            Gets id of Service instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceNewHealthReportEvent.SourceId">
            <summary>
            Gets id of report source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceNewHealthReportEvent.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceNewHealthReportEvent.HealthState">
            <summary>
            Gets the property health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceNewHealthReportEvent.TimeToLiveMs">
            <summary>
            Gets time to live in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceNewHealthReportEvent.SequenceNumber">
            <summary>
            Gets sequence number of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceNewHealthReportEvent.Description">
            <summary>
            Gets description of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceNewHealthReportEvent.RemoveWhenExpired">
            <summary>
            Gets indicates the removal when it expires.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceNewHealthReportEvent.SourceUtcTimestamp">
            <summary>
            Gets source time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceOperationName">
            <summary>
            Defines values for ServiceOperationName.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceOperationName.Unknown">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceOperationName.None">
            <summary>
            The service replica or instance is not going through any life-cycle changes.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceOperationName.Open">
            <summary>
            The service replica or instance is being opened.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceOperationName.ChangeRole">
            <summary>
            The service replica is changing roles.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceOperationName.Close">
            <summary>
            The service replica or instance is being closed.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceOperationName.Abort">
            <summary>
            The service replica or instance is being aborted.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServicePackageActivationMode">
            <summary>
            Defines values for ServicePackageActivationMode.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePackageActivationMode.SharedProcess">
            <summary>
            This is the default activation mode. With this activation mode, replicas or instances from different partition(s)
            of service, on a given node, will share same activation of service package on a node. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePackageActivationMode.ExclusiveProcess">
            <summary>
            With this activation mode, each replica or instance of service, on a given node, will have its own dedicated
            activation of service package on a node. The value is 1.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServicePartitionInfo">
            <summary>
            Information about a partition of a Service Fabric service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServicePartitionInfo.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ServiceKind},System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Nullable{Microsoft.ServiceFabric.Common.ServicePartitionStatus},Microsoft.ServiceFabric.Common.PartitionInformation)">
            <summary>
            Initializes a new instance of the ServicePartitionInfo class.
            </summary>
            <param name="serviceKind">The kind of service (Stateless or Stateful).</param>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="partitionStatus">The status of the service fabric service partition. Possible values include:
            'Invalid', 'Ready', 'NotReady', 'InQuorumLoss', 'Reconfiguring', 'Deleting'</param>
            <param name="partitionInformation">Information about the partition identity, partitioning scheme and keys supported
            by it.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServicePartitionInfo.HealthState">
            <summary>
            Gets the health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica
            etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServicePartitionInfo.PartitionStatus">
            <summary>
            Gets the status of the service fabric service partition. Possible values include: 'Invalid', 'Ready', 'NotReady',
            'InQuorumLoss', 'Reconfiguring', 'Deleting'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServicePartitionInfo.PartitionInformation">
            <summary>
            Gets information about the partition identity, partitioning scheme and keys supported by it.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServicePartitionInfo.ServiceKind">
            <summary>
            Gets the kind of service (Stateless or Stateful).
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServicePartitionKind">
            <summary>
            Defines values for ServicePartitionKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePartitionKind.Invalid">
            <summary>
            Indicates the partition kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePartitionKind.Singleton">
            <summary>
            Indicates that there is only one partition, and SingletonPartitionSchemeDescription was specified while creating
            the service. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePartitionKind.Int64Range">
            <summary>
            Indicates that the partition is based on Int64 key ranges, and UniformInt64RangePartitionSchemeDescription was
            specified while creating the service. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePartitionKind.Named">
            <summary>
            Indicates that the partition is based on string names, and NamedPartitionInformation  was specified while creating
            the service. The value is 3.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServicePartitionStatus">
            <summary>
            Defines values for ServicePartitionStatus.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePartitionStatus.Invalid">
            <summary>
            Indicates the partition status is invalid. All Service Fabric enumerations have the invalid type. The value is
            zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePartitionStatus.Ready">
            <summary>
            Indicates that the partition is ready. This means that for a stateless service partition there is at least one
            instance that is up and for a stateful service partition the number of ready replicas is greater than or equal to
            the MinReplicaSetSize. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePartitionStatus.NotReady">
            <summary>
            Indicates that the partition is not ready. This status is returned when none of the other states apply. The value
            is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePartitionStatus.InQuorumLoss">
            <summary>
            Indicates that the partition is in quorum loss. This means that number of replicas that are up and participating in
            a replica set is less than MinReplicaSetSize for this partition. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePartitionStatus.Reconfiguring">
            <summary>
            Indicates that the partition is undergoing reconfiguration of its replica sets. This can happen due to failover,
            upgrade, load balancing or addition or removal of replicas from the replica set. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePartitionStatus.Deleting">
            <summary>
            Indicates that the partition is being deleted. The value is 5.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServicePlacementAllowMultipleStatelessInstancesOnNodePolicyDescription">
            <summary>
            Describes the policy to be used for placement of a Service Fabric service allowing multiple stateless instances of
            a partition of the service to be placed on a node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServicePlacementAllowMultipleStatelessInstancesOnNodePolicyDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ServicePlacementAllowMultipleStatelessInstancesOnNodePolicyDescription class.
            </summary>
            <param name="domainName">Holdover from other policy descriptions, not used for this policy, values are ignored by
            runtime. Keeping it for any backwards-compatibility with clients.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServicePlacementAllowMultipleStatelessInstancesOnNodePolicyDescription.DomainName">
            <summary>
            Gets holdover from other policy descriptions, not used for this policy, values are ignored by runtime. Keeping it
            for any backwards-compatibility with clients.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServicePlacementInvalidDomainPolicyDescription">
            <summary>
            Describes the policy to be used for placement of a Service Fabric service where a particular fault or upgrade
            domain should not be used for placement of the instances or replicas of that service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServicePlacementInvalidDomainPolicyDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ServicePlacementInvalidDomainPolicyDescription class.
            </summary>
            <param name="domainName">The name of the domain that should not be used for placement.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServicePlacementInvalidDomainPolicyDescription.DomainName">
            <summary>
            Gets the name of the domain that should not be used for placement.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServicePlacementNonPartiallyPlaceServicePolicyDescription">
            <summary>
            Describes the policy to be used for placement of a Service Fabric service where all replicas must be able to be
            placed in order for any replicas to be created.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServicePlacementNonPartiallyPlaceServicePolicyDescription.#ctor">
            <summary>
            Initializes a new instance of the ServicePlacementNonPartiallyPlaceServicePolicyDescription class.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServicePlacementPolicyDescription">
            <summary>
            Describes the policy to be used for placement of a Service Fabric service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServicePlacementPolicyDescription.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ServicePlacementPolicyType})">
            <summary>
            Initializes a new instance of the ServicePlacementPolicyDescription class.
            </summary>
            <param name="type">The type of placement policy for a service fabric service. Following are the possible
            values.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServicePlacementPolicyDescription.Type">
            <summary>
            Gets the type of placement policy for a service fabric service. Following are the possible values.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServicePlacementPolicyType">
            <summary>
            Defines values for ServicePlacementPolicyType.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePlacementPolicyType.Invalid">
            <summary>
            Indicates the type of the placement policy is invalid. All Service Fabric enumerations have the invalid type. The
            value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePlacementPolicyType.InvalidDomain">
            <summary>
            Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementInvalidDomainPolicyDescription,
            which indicates that a particular fault or upgrade domain cannot be used for placement of this service. The value
            is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePlacementPolicyType.RequireDomain">
            <summary>
            Indicates that the ServicePlacementPolicyDescription is of type
            ServicePlacementRequireDomainDistributionPolicyDescription indicating that the replicas of the service must be
            placed in a specific domain. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePlacementPolicyType.PreferPrimaryDomain">
            <summary>
            Indicates that the ServicePlacementPolicyDescription is of type
            ServicePlacementPreferPrimaryDomainPolicyDescription, which indicates that if possible the Primary replica for the
            partitions of the service should be located in a particular domain as an optimization. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePlacementPolicyType.RequireDomainDistribution">
            <summary>
            Indicates that the ServicePlacementPolicyDescription is of type
            ServicePlacementRequireDomainDistributionPolicyDescription, indicating that the system will disallow placement of
            any two replicas from the same partition in the same domain at any time. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePlacementPolicyType.NonPartiallyPlaceService">
            <summary>
            Indicates that the ServicePlacementPolicyDescription is of type
            ServicePlacementNonPartiallyPlaceServicePolicyDescription, which indicates that if possible all replicas of a
            particular partition of the service should be placed atomically. The value is 5.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServicePlacementPolicyType.AllowMultipleStatelessInstancesOnNode">
            <summary>
            Indicates that the ServicePlacementPolicyDescription is of type
            ServicePlacementAllowMultipleStatelessInstancesOnNodePolicyDescription, which indicates that multiple stateless
            instances of a particular partition of the service can be placed on a node. The value is 6.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServicePlacementPreferPrimaryDomainPolicyDescription">
            <summary>
            Describes the policy to be used for placement of a Service Fabric service where the service's Primary replicas
            should optimally be placed in a particular domain.
            
            This placement policy is usually used with fault domains in scenarios where the Service Fabric cluster is
            geographically distributed in order to indicate that a service's primary replica should be located in a particular
            fault domain, which in geo-distributed scenarios usually aligns with regional or datacenter boundaries. Note that
            since this is an optimization it is possible that the Primary replica may not end up located in this domain due to
            failures, capacity limits, or other constraints.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServicePlacementPreferPrimaryDomainPolicyDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ServicePlacementPreferPrimaryDomainPolicyDescription class.
            </summary>
            <param name="domainName">The name of the domain that should used for placement as per this policy.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServicePlacementPreferPrimaryDomainPolicyDescription.DomainName">
            <summary>
            Gets the name of the domain that should used for placement as per this policy.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServicePlacementRequiredDomainPolicyDescription">
            <summary>
            Describes the policy to be used for placement of a Service Fabric service where the instances or replicas of that
            service must be placed in a particular domain
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServicePlacementRequiredDomainPolicyDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ServicePlacementRequiredDomainPolicyDescription class.
            </summary>
            <param name="domainName">The name of the domain that should used for placement as per this policy.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServicePlacementRequiredDomainPolicyDescription.DomainName">
            <summary>
            Gets the name of the domain that should used for placement as per this policy.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServicePlacementRequireDomainDistributionPolicyDescription">
            <summary>
            Describes the policy to be used for placement of a Service Fabric service where two replicas from the same
            partition should never be placed in the same fault or upgrade domain.
            
            While this is not common it can expose the service to an increased risk of concurrent failures due to unplanned
            outages or other cases of subsequent/concurrent failures. As an example, consider a case where replicas are
            deployed across different data center, with one replica per location. In the event that one of the datacenters goes
            offline, normally the replica that was placed in that datacenter will be packed into one of the remaining
            datacenters. If this is not desirable then this policy should be set.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServicePlacementRequireDomainDistributionPolicyDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ServicePlacementRequireDomainDistributionPolicyDescription class.
            </summary>
            <param name="domainName">The name of the domain that should used for placement as per this policy.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServicePlacementRequireDomainDistributionPolicyDescription.DomainName">
            <summary>
            Gets the name of the domain that should used for placement as per this policy.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceProperties">
            <summary>
            Describes properties of a service resource.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceProperties.#ctor(System.String,System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.ExecutionPolicy,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.AutoScalingPolicy},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceIdentity},System.String)">
            <summary>
            Initializes a new instance of the ServiceProperties class.
            </summary>
            <param name="description">User readable description of the service.</param>
            <param name="replicaCount">The number of replicas of the service to create. Defaults to 1 if not specified.</param>
            <param name="executionPolicy">The execution policy of the service</param>
            <param name="autoScalingPolicies">Auto scaling policies</param>
            <param name="identityRefs">The service identity list.</param>
            <param name="dnsName">Dns name of the service.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceProperties.Description">
            <summary>
            Gets user readable description of the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceProperties.ReplicaCount">
            <summary>
            Gets the number of replicas of the service to create. Defaults to 1 if not specified.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceProperties.ExecutionPolicy">
            <summary>
            Gets the execution policy of the service
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceProperties.AutoScalingPolicies">
            <summary>
            Gets auto scaling policies
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceProperties.Status">
            <summary>
            Gets status of the service. Possible values include: 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting',
            'Failed'
            
            Status of the resource.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceProperties.StatusDetails">
            <summary>
            Gets additional information about the current status of the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceProperties.HealthState">
            <summary>
            Gets the health state of an application resource. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error',
            'Unknown'
            
            The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceProperties.UnhealthyEvaluation">
            <summary>
            Gets when the service's health state is not 'Ok', this additional details from service fabric Health Manager for
            the user to know why the service is marked unhealthy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceProperties.IdentityRefs">
            <summary>
            Gets the service identity list.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceProperties.DnsName">
            <summary>
            Gets dns name of the service.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceReplicaDescription">
            <summary>
            Describes a replica of a service resource.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceReplicaDescription.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.OperatingSystemType},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ContainerCodePackageProperties},System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.NetworkRef},Microsoft.ServiceFabric.Common.DiagnosticsRef)">
            <summary>
            Initializes a new instance of the ServiceReplicaDescription class.
            </summary>
            <param name="osType">The operation system required by the code in service. Possible values include: 'Linux',
            'Windows'</param>
            <param name="codePackages">Describes the set of code packages that forms the service. A code package describes the
            container and the properties for running it. All the code packages are started together on the same host and share
            the same context (network, process etc.).
            </param>
            <param name="replicaName">Name of the replica.</param>
            <param name="networkRefs">The names of the private networks that this service needs to be part of.</param>
            <param name="diagnostics">Reference to sinks in DiagnosticsDescription.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceReplicaDescription.ReplicaName">
            <summary>
            Gets name of the replica.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceReplicaProperties">
            <summary>
            Describes the properties of a service replica.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceReplicaProperties.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.OperatingSystemType},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ContainerCodePackageProperties},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.NetworkRef},Microsoft.ServiceFabric.Common.DiagnosticsRef)">
            <summary>
            Initializes a new instance of the ServiceReplicaProperties class.
            </summary>
            <param name="osType">The operation system required by the code in service. Possible values include: 'Linux',
            'Windows'</param>
            <param name="codePackages">Describes the set of code packages that forms the service. A code package describes the
            container and the properties for running it. All the code packages are started together on the same host and share
            the same context (network, process etc.).
            </param>
            <param name="networkRefs">The names of the private networks that this service needs to be part of.</param>
            <param name="diagnostics">Reference to sinks in DiagnosticsDescription.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceReplicaProperties.OsType">
            <summary>
            Gets the operation system required by the code in service. Possible values include: 'Linux', 'Windows'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceReplicaProperties.CodePackages">
            <summary>
            Gets the set of code packages that forms the service. A code package the container and the properties for running
            it. All the code packages are started together on the same host and share the same context (network, process etc.).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceReplicaProperties.NetworkRefs">
            <summary>
            Gets the names of the private networks that this service needs to be part of.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceReplicaProperties.Diagnostics">
            <summary>
            Gets reference to sinks in DiagnosticsDescription.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceResourceDescription">
            <summary>
            This type describes a service resource.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceResourceDescription.#ctor(System.String,Microsoft.ServiceFabric.Common.ServiceResourceProperties)">
            <summary>
            Initializes a new instance of the ServiceResourceDescription class.
            </summary>
            <param name="name">Name of the Service resource.</param>
            <param name="properties">This type describes properties of a service resource.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceResourceDescription.Name">
            <summary>
            Gets name of the Service resource.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceResourceDescription.Properties">
            <summary>
            Gets this type describes properties of a service resource.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceResourceProperties">
            <summary>
            This type describes properties of a service resource.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceResourceProperties.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.OperatingSystemType},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ContainerCodePackageProperties},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.NetworkRef},Microsoft.ServiceFabric.Common.DiagnosticsRef,System.String,System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.ExecutionPolicy,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.AutoScalingPolicy},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceIdentity},System.String)">
            <summary>
            Initializes a new instance of the ServiceResourceProperties class.
            </summary>
            <param name="osType">The operation system required by the code in service. Possible values include: 'Linux',
            'Windows'</param>
            <param name="codePackages">Describes the set of code packages that forms the service. A code package describes the
            container and the properties for running it. All the code packages are started together on the same host and share
            the same context (network, process etc.).
            </param>
            <param name="networkRefs">The names of the private networks that this service needs to be part of.</param>
            <param name="diagnostics">Reference to sinks in DiagnosticsDescription.</param>
            <param name="description">User readable description of the service.</param>
            <param name="replicaCount">The number of replicas of the service to create. Defaults to 1 if not specified.</param>
            <param name="executionPolicy">The execution policy of the service</param>
            <param name="autoScalingPolicies">Auto scaling policies</param>
            <param name="identityRefs">The service identity list.</param>
            <param name="dnsName">Dns name of the service.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceResourceProperties.OsType">
            <summary>
            Gets the operation system required by the code in service. Possible values include: 'Linux', 'Windows'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceResourceProperties.CodePackages">
            <summary>
            Gets the set of code packages that forms the service. A code package the container and the properties for running
            it. All the code packages are started together on the same host and share the same context (network, process etc.).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceResourceProperties.NetworkRefs">
            <summary>
            Gets the names of the private networks that this service needs to be part of.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceResourceProperties.Diagnostics">
            <summary>
            Gets reference to sinks in DiagnosticsDescription.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceResourceProperties.Description">
            <summary>
            Gets user readable description of the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceResourceProperties.ReplicaCount">
            <summary>
            Gets the number of replicas of the service to create. Defaults to 1 if not specified.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceResourceProperties.ExecutionPolicy">
            <summary>
            Gets the execution policy of the service
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceResourceProperties.AutoScalingPolicies">
            <summary>
            Gets auto scaling policies
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceResourceProperties.Status">
            <summary>
            Gets status of the resource. Possible values include: 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting',
            'Failed'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceResourceProperties.StatusDetails">
            <summary>
            Gets additional information about the current status of the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceResourceProperties.HealthState">
            <summary>
            Gets the health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica
            etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceResourceProperties.UnhealthyEvaluation">
            <summary>
            Gets when the service's health state is not 'Ok', this additional details from service fabric Health Manager for
            the user to know why the service is marked unhealthy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceResourceProperties.IdentityRefs">
            <summary>
            Gets the service identity list.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceResourceProperties.DnsName">
            <summary>
            Gets dns name of the service.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServicesHealthEvaluation">
            <summary>
            Represents health evaluation for services of a certain service type belonging to an application, containing health
            evaluations for each unhealthy service that impacted current aggregated health state. Can be returned when
            evaluating application health and the aggregated health state is either Error or Warning.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServicesHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the ServicesHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="serviceTypeName">Name of the service type of the services.</param>
            <param name="maxPercentUnhealthyServices">Maximum allowed percentage of unhealthy services from the
            ServiceTypeHealthPolicy.</param>
            <param name="totalCount">Total number of services of the current service type in the application from the health
            store.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the aggregated health state. Includes
            all the unhealthy ServiceHealthEvaluation that impacted the aggregated health.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServicesHealthEvaluation.ServiceTypeName">
            <summary>
            Gets name of the service type of the services.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServicesHealthEvaluation.MaxPercentUnhealthyServices">
            <summary>
            Gets maximum allowed percentage of unhealthy services from the ServiceTypeHealthPolicy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServicesHealthEvaluation.TotalCount">
            <summary>
            Gets total number of services of the current service type in the application from the health store.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServicesHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy
            ServiceHealthEvaluation that impacted the aggregated health.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceStatus">
            <summary>
            Defines values for ServiceStatus.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceStatus.Unknown">
            <summary>
            Indicates the service status is unknown. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceStatus.Active">
            <summary>
            Indicates the service status is active. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceStatus.Upgrading">
            <summary>
            Indicates the service is upgrading. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceStatus.Deleting">
            <summary>
            Indicates the service is being deleted. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceStatus.Creating">
            <summary>
            Indicates the service is being created. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceStatus.Failed">
            <summary>
            Indicates creation or deletion was terminated due to persistent failures. Another create/delete request can be
            accepted. The value is 5.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceTypeDescription">
            <summary>
            Describes a service type defined in the service manifest of a provisioned application type. The properties the ones
            defined in the service manifest.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceTypeDescription.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ServiceKind},System.Nullable{System.Boolean},System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceLoadMetricDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServicePlacementPolicyDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceTypeExtensionDescription})">
            <summary>
            Initializes a new instance of the ServiceTypeDescription class.
            </summary>
            <param name="kind">The kind of service (Stateless or Stateful).</param>
            <param name="isStateful">Indicates whether the service type is a stateful service type or a stateless service type.
            This property is true if the service type is a stateful service type, false otherwise.</param>
            <param name="serviceTypeName">Name of the service type as specified in the service manifest.</param>
            <param name="placementConstraints">The placement constraint to be used when instantiating this service in a Service
            Fabric cluster.</param>
            <param name="loadMetrics">The service load metrics is given as an array of ServiceLoadMetricDescription
            objects.</param>
            <param name="servicePlacementPolicies">List of service placement policy descriptions.</param>
            <param name="extensions">List of service type extensions.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeDescription.IsStateful">
            <summary>
            Gets indicates whether the service type is a stateful service type or a stateless service type. This property is
            true if the service type is a stateful service type, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeDescription.ServiceTypeName">
            <summary>
            Gets name of the service type as specified in the service manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeDescription.PlacementConstraints">
            <summary>
            Gets the placement constraint to be used when instantiating this service in a Service Fabric cluster.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeDescription.LoadMetrics">
            <summary>
            Gets the service load metrics is given as an array of ServiceLoadMetricDescription objects.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeDescription.ServicePlacementPolicies">
            <summary>
            Gets list of service placement policy descriptions.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeDescription.Extensions">
            <summary>
            Gets list of service type extensions.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeDescription.Kind">
            <summary>
            Gets the kind of service (Stateless or Stateful).
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceTypeExtensionDescription">
            <summary>
            Describes extension of a service type defined in the service manifest.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceTypeExtensionDescription.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ServiceTypeExtensionDescription class.
            </summary>
            <param name="key">The name of the extension.</param>
            <param name="value">The extension value.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeExtensionDescription.Key">
            <summary>
            Gets the name of the extension.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeExtensionDescription.Value">
            <summary>
            Gets the extension value.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceTypeHealthPolicy">
            <summary>
            Represents the health policy used to evaluate the health of services belonging to a service type.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceTypeHealthPolicy.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the ServiceTypeHealthPolicy class.
            </summary>
            <param name="maxPercentUnhealthyPartitionsPerService">The maximum allowed percentage of unhealthy partitions per
            service. Allowed values are Byte values from zero to 100
            
            The percentage represents the maximum tolerated percentage of partitions that can be unhealthy before the service
            is considered in error.
            If the percentage is respected but there is at least one unhealthy partition, the health is evaluated as Warning.
            The percentage is calculated by dividing the number of unhealthy partitions over the total number of partitions in
            the service.
            The computation rounds up to tolerate one failure on small numbers of partitions. Default percentage is zero.
            </param>
            <param name="maxPercentUnhealthyReplicasPerPartition">The maximum allowed percentage of unhealthy replicas per
            partition. Allowed values are Byte values from zero to 100.
            
            The percentage represents the maximum tolerated percentage of replicas that can be unhealthy before the partition
            is considered in error.
            If the percentage is respected but there is at least one unhealthy replica, the health is evaluated as Warning.
            The percentage is calculated by dividing the number of unhealthy replicas over the total number of replicas in the
            partition.
            The computation rounds up to tolerate one failure on small numbers of replicas. Default percentage is zero.
            </param>
            <param name="maxPercentUnhealthyServices">The maximum allowed percentage of unhealthy services. Allowed values are
            Byte values from zero to 100.
            
            The percentage represents the maximum tolerated percentage of services that can be unhealthy before the application
            is considered in error.
            If the percentage is respected but there is at least one unhealthy service, the health is evaluated as Warning.
            This is calculated by dividing the number of unhealthy services of the specific service type over the total number
            of services of the specific service type.
            The computation rounds up to tolerate one failure on small numbers of services. Default percentage is zero.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeHealthPolicy.MaxPercentUnhealthyPartitionsPerService">
            <summary>
            Gets the maximum allowed percentage of unhealthy partitions per service. Allowed values are Byte values from zero
            to 100
            
            The percentage represents the maximum tolerated percentage of partitions that can be unhealthy before the service
            is considered in error.
            If the percentage is respected but there is at least one unhealthy partition, the health is evaluated as Warning.
            The percentage is calculated by dividing the number of unhealthy partitions over the total number of partitions in
            the service.
            The computation rounds up to tolerate one failure on small numbers of partitions. Default percentage is zero.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeHealthPolicy.MaxPercentUnhealthyReplicasPerPartition">
            <summary>
            Gets the maximum allowed percentage of unhealthy replicas per partition. Allowed values are Byte values from zero
            to 100.
            
            The percentage represents the maximum tolerated percentage of replicas that can be unhealthy before the partition
            is considered in error.
            If the percentage is respected but there is at least one unhealthy replica, the health is evaluated as Warning.
            The percentage is calculated by dividing the number of unhealthy replicas over the total number of replicas in the
            partition.
            The computation rounds up to tolerate one failure on small numbers of replicas. Default percentage is zero.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeHealthPolicy.MaxPercentUnhealthyServices">
            <summary>
            Gets the maximum allowed percentage of unhealthy services. Allowed values are Byte values from zero to 100.
            
            The percentage represents the maximum tolerated percentage of services that can be unhealthy before the application
            is considered in error.
            If the percentage is respected but there is at least one unhealthy service, the health is evaluated as Warning.
            This is calculated by dividing the number of unhealthy services of the specific service type over the total number
            of services of the specific service type.
            The computation rounds up to tolerate one failure on small numbers of services. Default percentage is zero.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceTypeHealthPolicyMapItem">
            <summary>
            Defines an item in ServiceTypeHealthPolicyMap.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceTypeHealthPolicyMapItem.#ctor(System.String,Microsoft.ServiceFabric.Common.ServiceTypeHealthPolicy)">
            <summary>
            Initializes a new instance of the ServiceTypeHealthPolicyMapItem class.
            </summary>
            <param name="key">The key of the service type health policy map item. This is the name of the service type.</param>
            <param name="value">The value of the service type health policy map item. This is the ServiceTypeHealthPolicy for
            this service type.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeHealthPolicyMapItem.Key">
            <summary>
            Gets the key of the service type health policy map item. This is the name of the service type.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeHealthPolicyMapItem.Value">
            <summary>
            Gets the value of the service type health policy map item. This is the ServiceTypeHealthPolicy for this service
            type.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceTypeInfo">
            <summary>
            Information about a service type that is defined in a service manifest of a provisioned application type.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceTypeInfo.#ctor(Microsoft.ServiceFabric.Common.ServiceTypeDescription,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the ServiceTypeInfo class.
            </summary>
            <param name="serviceTypeDescription">Describes a service type defined in the service manifest of a provisioned
            application type. The properties the ones defined in the service manifest.</param>
            <param name="serviceManifestName">The name of the service manifest in which this service type is defined.</param>
            <param name="serviceManifestVersion">The version of the service manifest in which this service type is
            defined.</param>
            <param name="isServiceGroup">Indicates whether the service is a service group. If it is, the property value is true
            otherwise false.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeInfo.ServiceTypeDescription">
            <summary>
            Gets a service type defined in the service manifest of a provisioned application type. The properties the ones
            defined in the service manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeInfo.ServiceManifestName">
            <summary>
            Gets the name of the service manifest in which this service type is defined.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeInfo.ServiceManifestVersion">
            <summary>
            Gets the version of the service manifest in which this service type is defined.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeInfo.IsServiceGroup">
            <summary>
            Gets indicates whether the service is a service group. If it is, the property value is true otherwise false.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceTypeManifest">
            <summary>
            Contains the manifest describing a service type registered as part of an application in a Service Fabric cluster.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceTypeManifest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ServiceTypeManifest class.
            </summary>
            <param name="manifest">The XML manifest as a string.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceTypeManifest.Manifest">
            <summary>
            Gets the XML manifest as a string.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceTypeRegistrationStatus">
            <summary>
            Defines values for ServiceTypeRegistrationStatus.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceTypeRegistrationStatus.Invalid">
            <summary>
            Indicates the registration status is invalid. All Service Fabric enumerations have the invalid type. The value is
            zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceTypeRegistrationStatus.Disabled">
            <summary>
            Indicates that the service type is disabled on this node. A type gets disabled when there are too many failures of
            the code package hosting the service type. If the service type is disabled, new replicas of that service type will
            not be placed on the node until it is enabled again. The service type is enabled again after the process hosting it
            comes up and re-registers the type or a preconfigured time interval has passed. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceTypeRegistrationStatus.Enabled">
            <summary>
            Indicates that the service type is enabled on this node. Replicas of this service type can be placed on this node
            when the code package registers the service type. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ServiceTypeRegistrationStatus.Registered">
            <summary>
            Indicates that the service type is enabled and registered on the node by a code package. Replicas of this service
            type can now be placed on this node. The value is 3.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceUpdateDescription">
            <summary>
            A ServiceUpdateDescription contains all of the information necessary to update a service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceUpdateDescription.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ServiceKind},System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceCorrelationDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceLoadMetricDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServicePlacementPolicyDescription},System.Nullable{Microsoft.ServiceFabric.Common.MoveCost},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ScalingPolicyDescription},System.String,Microsoft.ServiceFabric.Common.NodeTagsDescription,Microsoft.ServiceFabric.Common.NodeTagsDescription)">
            <summary>
            Initializes a new instance of the ServiceUpdateDescription class.
            </summary>
            <param name="serviceKind">The kind of service (Stateless or Stateful).</param>
            <param name="flags">Flags indicating whether other properties are set. Each of the associated properties
            corresponds to a flag, specified below, which, if set, indicate that the property is specified.
            This property can be a combination of those flags obtained using bitwise 'OR' operator.
            For example, if the provided value is 6 then the flags for ReplicaRestartWaitDuration (2) and
            QuorumLossWaitDuration (4) are set.
            
            - None - Does not indicate any other properties are set. The value is zero.
            - TargetReplicaSetSize/InstanceCount - Indicates whether the TargetReplicaSetSize property (for Stateful services)
            or the InstanceCount property (for Stateless services) is set. The value is 1.
            - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is  2.
            - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 4.
            - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 8.
            - MinReplicaSetSize - Indicates the MinReplicaSetSize property is set. The value is 16.
            - PlacementConstraints - Indicates the PlacementConstraints property is set. The value is 32.
            - PlacementPolicyList - Indicates the ServicePlacementPolicies property is set. The value is 64.
            - Correlation - Indicates the CorrelationScheme property is set. The value is 128.
            - Metrics - Indicates the ServiceLoadMetrics property is set. The value is 256.
            - DefaultMoveCost - Indicates the DefaultMoveCost property is set. The value is 512.
            - ScalingPolicy - Indicates the ScalingPolicies property is set. The value is 1024.
            - ServicePlacementTimeLimit - Indicates the ServicePlacementTimeLimit property is set. The value is 2048.
            - MinInstanceCount - Indicates the MinInstanceCount property is set. The value is 4096.
            - MinInstancePercentage - Indicates the MinInstancePercentage property is set. The value is 8192.
            - InstanceCloseDelayDuration - Indicates the InstanceCloseDelayDuration property is set. The value is 16384.
            - InstanceRestartWaitDuration - Indicates the InstanceCloseDelayDuration property is set. The value is 32768.
            - DropSourceReplicaOnMove - Indicates the DropSourceReplicaOnMove property is set. The value is 65536.
            - ServiceDnsName - Indicates the ServiceDnsName property is set. The value is 131072.
            - TagsForPlacement - Indicates the TagsForPlacement property is set. The value is 1048576.
            - TagsForRunning - Indicates the TagsForRunning property is set. The value is 2097152.
            </param>
            <param name="placementConstraints">The placement constraints as a string. Placement constraints are boolean
            expressions on node properties and allow for restricting a service to particular nodes based on the service
            requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor ==
            blue)".</param>
            <param name="correlationScheme">The correlation scheme.</param>
            <param name="loadMetrics">The service load metrics.</param>
            <param name="servicePlacementPolicies">The service placement policies.</param>
            <param name="defaultMoveCost">The move cost for the service. Possible values include: 'Zero', 'Low', 'Medium',
            'High', 'VeryHigh'
            
            Specifies the move cost for the service.
            </param>
            <param name="scalingPolicies">Scaling policies for this service.</param>
            <param name="serviceDnsName">The DNS name of the service.</param>
            <param name="tagsForPlacement">Tags for placement of this service.</param>
            <param name="tagsForRunning">Tags for running of this service.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceUpdateDescription.Flags">
            <summary>
            Gets flags indicating whether other properties are set. Each of the associated properties corresponds to a flag,
            specified below, which, if set, indicate that the property is specified.
            This property can be a combination of those flags obtained using bitwise 'OR' operator.
            For example, if the provided value is 6 then the flags for ReplicaRestartWaitDuration (2) and
            QuorumLossWaitDuration (4) are set.
            
            - None - Does not indicate any other properties are set. The value is zero.
            - TargetReplicaSetSize/InstanceCount - Indicates whether the TargetReplicaSetSize property (for Stateful services)
            or the InstanceCount property (for Stateless services) is set. The value is 1.
            - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is  2.
            - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 4.
            - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 8.
            - MinReplicaSetSize - Indicates the MinReplicaSetSize property is set. The value is 16.
            - PlacementConstraints - Indicates the PlacementConstraints property is set. The value is 32.
            - PlacementPolicyList - Indicates the ServicePlacementPolicies property is set. The value is 64.
            - Correlation - Indicates the CorrelationScheme property is set. The value is 128.
            - Metrics - Indicates the ServiceLoadMetrics property is set. The value is 256.
            - DefaultMoveCost - Indicates the DefaultMoveCost property is set. The value is 512.
            - ScalingPolicy - Indicates the ScalingPolicies property is set. The value is 1024.
            - ServicePlacementTimeLimit - Indicates the ServicePlacementTimeLimit property is set. The value is 2048.
            - MinInstanceCount - Indicates the MinInstanceCount property is set. The value is 4096.
            - MinInstancePercentage - Indicates the MinInstancePercentage property is set. The value is 8192.
            - InstanceCloseDelayDuration - Indicates the InstanceCloseDelayDuration property is set. The value is 16384.
            - InstanceRestartWaitDuration - Indicates the InstanceCloseDelayDuration property is set. The value is 32768.
            - DropSourceReplicaOnMove - Indicates the DropSourceReplicaOnMove property is set. The value is 65536.
            - ServiceDnsName - Indicates the ServiceDnsName property is set. The value is 131072.
            - TagsForPlacement - Indicates the TagsForPlacement property is set. The value is 1048576.
            - TagsForRunning - Indicates the TagsForRunning property is set. The value is 2097152.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceUpdateDescription.PlacementConstraints">
            <summary>
            Gets the placement constraints as a string. Placement constraints are boolean expressions on node properties and
            allow for restricting a service to particular nodes based on the service requirements. For example, to place a
            service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceUpdateDescription.CorrelationScheme">
            <summary>
            Gets the correlation scheme.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceUpdateDescription.LoadMetrics">
            <summary>
            Gets the service load metrics.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceUpdateDescription.ServicePlacementPolicies">
            <summary>
            Gets the service placement policies.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceUpdateDescription.DefaultMoveCost">
            <summary>
            Gets the move cost for the service. Possible values include: 'Zero', 'Low', 'Medium', 'High', 'VeryHigh'
            
            Specifies the move cost for the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceUpdateDescription.ScalingPolicies">
            <summary>
            Gets scaling policies for this service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceUpdateDescription.ServiceDnsName">
            <summary>
            Gets the DNS name of the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceUpdateDescription.TagsForPlacement">
            <summary>
            Gets tags for placement of this service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceUpdateDescription.TagsForRunning">
            <summary>
            Gets tags for running of this service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceUpdateDescription.ServiceKind">
            <summary>
            Gets the kind of service (Stateless or Stateful).
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceUpgradeProgress">
            <summary>
            Information about how many replicas are completed or pending for a specific service during upgrade.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceUpgradeProgress.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ServiceUpgradeProgress class.
            </summary>
            <param name="serviceName">Name of the Service resource.</param>
            <param name="completedReplicaCount">The number of replicas that completes the upgrade in the service.</param>
            <param name="pendingReplicaCount">The number of replicas that are waiting to be upgraded in the service.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceUpgradeProgress.ServiceName">
            <summary>
            Gets name of the Service resource.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceUpgradeProgress.CompletedReplicaCount">
            <summary>
            Gets the number of replicas that completes the upgrade in the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ServiceUpgradeProgress.PendingReplicaCount">
            <summary>
            Gets the number of replicas that are waiting to be upgraded in the service.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Setting">
            <summary>
            Describes a setting for the container. The setting file path can be fetched from environment variable
            "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The path for Linux container is
            "/var/secrets".
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Setting.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.SettingType},System.String,System.String)">
            <summary>
            Initializes a new instance of the Setting class.
            </summary>
            <param name="type">The type of the setting being given in value. Possible values include: 'ClearText',
            'KeyVaultReference', 'SecretValueReference'</param>
            <param name="name">The name of the setting.</param>
            <param name="value">The value of the setting, will be processed based on the type provided.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Setting.Type">
            <summary>
            Gets the type of the setting being given in value. Possible values include: 'ClearText', 'KeyVaultReference',
            'SecretValueReference'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Setting.Name">
            <summary>
            Gets the name of the setting.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Setting.Value">
            <summary>
            Gets the value of the setting, will be processed based on the type provided.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SettingType">
            <summary>
            Defines values for SettingType.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.SettingType.ClearText">
            <summary>
            The setting in clear text, will not be processed in any way and passed in as is.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.SettingType.KeyVaultReference">
            <summary>
            The URI to a KeyVault secret version, will be resolved using the application's managed identity (this type is only
            valid if the app was assigned a managed identity) before getting passed in.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.SettingType.SecretValueReference">
            <summary>
            The reference to a SecretValue resource, will be resolved before getting passed in.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SingletonPartitionInformation">
            <summary>
            Information about a partition that is singleton. The services with singleton partitioning scheme are effectively
            non-partitioned. They only have one partition.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.SingletonPartitionInformation.#ctor(Microsoft.ServiceFabric.Common.PartitionId)">
            <summary>
            Initializes a new instance of the SingletonPartitionInformation class.
            </summary>
            <param name="id">An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly
            generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the
            service. If the same service was deleted and recreated the IDs of its partitions would be different.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SingletonPartitionSchemeDescription">
            <summary>
            Describes the partition scheme of a singleton-partitioned, or non-partitioned service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.SingletonPartitionSchemeDescription.#ctor">
            <summary>
            Initializes a new instance of the SingletonPartitionSchemeDescription class.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SizeTypes">
            <summary>
            Defines values for SizeTypes.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.SizeTypes.Small">
            <summary>
            Small.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.SizeTypes.Medium">
            <summary>
            Medium.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.SizeTypes.Large">
            <summary>
            Large.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StartClusterUpgradeDescription">
            <summary>
            Describes the parameters for starting a cluster upgrade.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StartClusterUpgradeDescription.#ctor(System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.UpgradeKind},System.Nullable{Microsoft.ServiceFabric.Common.UpgradeMode},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{Microsoft.ServiceFabric.Common.UpgradeSortOrder},Microsoft.ServiceFabric.Common.MonitoringPolicyDescription,Microsoft.ServiceFabric.Common.ClusterHealthPolicy,System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.ClusterUpgradeHealthPolicyObject,Microsoft.ServiceFabric.Common.ApplicationHealthPolicies,System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the StartClusterUpgradeDescription class.
            </summary>
            <param name="codeVersion">The cluster code version.</param>
            <param name="configVersion">The cluster configuration version.</param>
            <param name="upgradeKind">The kind of upgrade out of the following possible values. Possible values include:
            'Invalid', 'Rolling'</param>
            <param name="rollingUpgradeMode">The mode used to monitor health during a rolling upgrade. The values are
            UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto',
            'UnmonitoredManual', 'Monitored'</param>
            <param name="upgradeReplicaSetCheckTimeoutInSeconds">The maximum amount of time to block processing of an upgrade
            domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of
            the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each
            upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).</param>
            <param name="forceRestart">If true, then processes are forcefully restarted during upgrade even when the code
            version has not changed (the upgrade only changes configuration or data).</param>
            <param name="sortOrder">Defines the order in which an upgrade proceeds through the cluster. Possible values
            include: 'Invalid', 'Default', 'Numeric', 'Lexicographical', 'ReverseNumeric', 'ReverseLexicographical'</param>
            <param name="monitoringPolicy">Describes the parameters for monitoring an upgrade in Monitored mode.</param>
            <param name="clusterHealthPolicy">Defines a health policy used to evaluate the health of the cluster or of a
            cluster node.
            </param>
            <param name="enableDeltaHealthEvaluation">When true, enables delta health evaluation rather than absolute health
            evaluation after completion of each upgrade domain.</param>
            <param name="clusterUpgradeHealthPolicy">Defines a health policy used to evaluate the health of the cluster during
            a cluster upgrade.</param>
            <param name="applicationHealthPolicyMap">Defines the application health policy map used to evaluate the health of
            an application or one of its children entities.
            </param>
            <param name="instanceCloseDelayDurationInSeconds">Duration in seconds, to wait before a stateless instance is
            closed, to allow the active requests to drain gracefully. This would be effective when the instance is closing
            during the application/cluster
            upgrade, only for those instances which have a non-zero delay duration configured in the service description. See
            InstanceCloseDelayDurationSeconds property in $ref: "#/definitions/StatelessServiceDescription.yaml" for details.
            Note, the default value of InstanceCloseDelayDurationInSeconds is 4294967295, which indicates that the behavior
            will entirely depend on the delay configured in the stateless service description.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StartClusterUpgradeDescription.CodeVersion">
            <summary>
            Gets the cluster code version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StartClusterUpgradeDescription.ConfigVersion">
            <summary>
            Gets the cluster configuration version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StartClusterUpgradeDescription.UpgradeKind">
            <summary>
            Gets the kind of upgrade out of the following possible values. Possible values include: 'Invalid', 'Rolling'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StartClusterUpgradeDescription.RollingUpgradeMode">
            <summary>
            Gets the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual,
            and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StartClusterUpgradeDescription.UpgradeReplicaSetCheckTimeoutInSeconds">
            <summary>
            Gets the maximum amount of time to block processing of an upgrade domain and prevent loss of availability when
            there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of
            availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and
            42949672925 inclusive. (unsigned 32-bit integer).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StartClusterUpgradeDescription.ForceRestart">
            <summary>
            Gets if true, then processes are forcefully restarted during upgrade even when the code version has not changed
            (the upgrade only changes configuration or data).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StartClusterUpgradeDescription.SortOrder">
            <summary>
            Gets defines the order in which an upgrade proceeds through the cluster. Possible values include: 'Invalid',
            'Default', 'Numeric', 'Lexicographical', 'ReverseNumeric', 'ReverseLexicographical'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StartClusterUpgradeDescription.MonitoringPolicy">
            <summary>
            Gets the parameters for monitoring an upgrade in Monitored mode.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StartClusterUpgradeDescription.ClusterHealthPolicy">
            <summary>
            Gets defines a health policy used to evaluate the health of the cluster or of a cluster node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StartClusterUpgradeDescription.EnableDeltaHealthEvaluation">
            <summary>
            Gets when true, enables delta health evaluation rather than absolute health evaluation after completion of each
            upgrade domain.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StartClusterUpgradeDescription.ClusterUpgradeHealthPolicy">
            <summary>
            Gets defines a health policy used to evaluate the health of the cluster during a cluster upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StartClusterUpgradeDescription.ApplicationHealthPolicyMap">
            <summary>
            Gets defines the application health policy map used to evaluate the health of an application or one of its children
            entities.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StartClusterUpgradeDescription.InstanceCloseDelayDurationInSeconds">
            <summary>
            Gets duration in seconds, to wait before a stateless instance is closed, to allow the active requests to drain
            gracefully. This would be effective when the instance is closing during the application/cluster
            upgrade, only for those instances which have a non-zero delay duration configured in the service description. See
            InstanceCloseDelayDurationSeconds property in $ref: "#/definitions/StatelessServiceDescription.yaml" for details.
            Note, the default value of InstanceCloseDelayDurationInSeconds is 4294967295, which indicates that the behavior
            will entirely depend on the delay configured in the stateless service description.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StartedChaosEvent">
            <summary>
            Describes a Chaos event that gets generated when Chaos is started.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StartedChaosEvent.#ctor(System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.ChaosParameters)">
            <summary>
            Initializes a new instance of the StartedChaosEvent class.
            </summary>
            <param name="timeStampUtc">The UTC timestamp when this Chaos event was generated.</param>
            <param name="chaosParameters">Defines all the parameters to configure a Chaos run.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StartedChaosEvent.ChaosParameters">
            <summary>
            Gets defines all the parameters to configure a Chaos run.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.State">
            <summary>
            Defines values for State.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.State.Invalid">
            <summary>
            Indicates that the repair task state is invalid. All Service Fabric enumerations have the invalid value.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.State.Created">
            <summary>
            Indicates that the repair task has been created.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.State.Claimed">
            <summary>
            Indicates that the repair task has been claimed by a repair executor.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.State.Preparing">
            <summary>
            Indicates that the Repair Manager is preparing the system to handle the impact of the repair task, usually by
            taking resources offline gracefully.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.State.Approved">
            <summary>
            Indicates that the repair task has been approved by the Repair Manager and is safe to execute.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.State.Executing">
            <summary>
            Indicates that execution of the repair task is in progress.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.State.Restoring">
            <summary>
            Indicates that the Repair Manager is restoring the system to its pre-repair state, usually by bringing resources
            back online.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.State.Completed">
            <summary>
            Indicates that the repair task has completed, and no further state changes will occur.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatefulReplicaHealthReportExpiredEvent">
            <summary>
            Stateful Replica Health Report Expired event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatefulReplicaHealthReportExpiredEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId,System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the StatefulReplicaHealthReportExpiredEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="replicaId">Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify
            a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a
            replica gets dropped and another replica gets created on the same node for the same partition, it will get a
            different value for the id. Sometimes the id of a stateless service instance is also referred as a replica
            id.</param>
            <param name="replicaInstanceId">Id of Replica instance.</param>
            <param name="sourceId">Id of report source.</param>
            <param name="property">Describes the property.</param>
            <param name="healthState">Describes the property health state.</param>
            <param name="timeToLiveMs">Time to live in milli-seconds.</param>
            <param name="sequenceNumber">Sequence number of report.</param>
            <param name="description">Description of report.</param>
            <param name="removeWhenExpired">Indicates the removal when it expires.</param>
            <param name="sourceUtcTimestamp">Source time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulReplicaHealthReportExpiredEvent.ReplicaInstanceId">
            <summary>
            Gets id of Replica instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulReplicaHealthReportExpiredEvent.SourceId">
            <summary>
            Gets id of report source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulReplicaHealthReportExpiredEvent.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulReplicaHealthReportExpiredEvent.HealthState">
            <summary>
            Gets the property health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulReplicaHealthReportExpiredEvent.TimeToLiveMs">
            <summary>
            Gets time to live in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulReplicaHealthReportExpiredEvent.SequenceNumber">
            <summary>
            Gets sequence number of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulReplicaHealthReportExpiredEvent.Description">
            <summary>
            Gets description of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulReplicaHealthReportExpiredEvent.RemoveWhenExpired">
            <summary>
            Gets indicates the removal when it expires.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulReplicaHealthReportExpiredEvent.SourceUtcTimestamp">
            <summary>
            Gets source time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatefulReplicaNewHealthReportEvent">
            <summary>
            Stateful Replica Health Report Created event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatefulReplicaNewHealthReportEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId,System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the StatefulReplicaNewHealthReportEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="replicaId">Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify
            a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a
            replica gets dropped and another replica gets created on the same node for the same partition, it will get a
            different value for the id. Sometimes the id of a stateless service instance is also referred as a replica
            id.</param>
            <param name="replicaInstanceId">Id of Replica instance.</param>
            <param name="sourceId">Id of report source.</param>
            <param name="property">Describes the property.</param>
            <param name="healthState">Describes the property health state.</param>
            <param name="timeToLiveMs">Time to live in milli-seconds.</param>
            <param name="sequenceNumber">Sequence number of report.</param>
            <param name="description">Description of report.</param>
            <param name="removeWhenExpired">Indicates the removal when it expires.</param>
            <param name="sourceUtcTimestamp">Source time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulReplicaNewHealthReportEvent.ReplicaInstanceId">
            <summary>
            Gets id of Replica instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulReplicaNewHealthReportEvent.SourceId">
            <summary>
            Gets id of report source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulReplicaNewHealthReportEvent.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulReplicaNewHealthReportEvent.HealthState">
            <summary>
            Gets the property health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulReplicaNewHealthReportEvent.TimeToLiveMs">
            <summary>
            Gets time to live in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulReplicaNewHealthReportEvent.SequenceNumber">
            <summary>
            Gets sequence number of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulReplicaNewHealthReportEvent.Description">
            <summary>
            Gets description of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulReplicaNewHealthReportEvent.RemoveWhenExpired">
            <summary>
            Gets indicates the removal when it expires.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulReplicaNewHealthReportEvent.SourceUtcTimestamp">
            <summary>
            Gets source time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatefulServiceDescription">
            <summary>
            Describes a stateful service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatefulServiceDescription.#ctor(Microsoft.ServiceFabric.Common.ServiceName,System.String,Microsoft.ServiceFabric.Common.PartitionSchemeDescription,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.ApplicationName,System.Byte[],System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceCorrelationDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceLoadMetricDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServicePlacementPolicyDescription},System.Nullable{Microsoft.ServiceFabric.Common.MoveCost},System.Nullable{System.Boolean},System.Nullable{Microsoft.ServiceFabric.Common.ServicePackageActivationMode},System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ScalingPolicyDescription},Microsoft.ServiceFabric.Common.NodeTagsDescription,Microsoft.ServiceFabric.Common.NodeTagsDescription,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.ReplicaLifecycleDescription)">
            <summary>
            Initializes a new instance of the StatefulServiceDescription class.
            </summary>
            <param name="serviceName">The full name of the service with 'fabric:' URI scheme.</param>
            <param name="serviceTypeName">Name of the service type as specified in the service manifest.</param>
            <param name="partitionDescription">The partition description as an object.</param>
            <param name="targetReplicaSetSize">The target replica set size as a number.</param>
            <param name="minReplicaSetSize">The minimum replica set size as a number.</param>
            <param name="hasPersistedState">A flag indicating whether this is a persistent service which stores states on the
            local disk. If it is then the value of this property is true, if not it is false.</param>
            <param name="applicationName">The name of the application, including the 'fabric:' URI scheme.</param>
            <param name="initializationData">The initialization data as an array of bytes. Initialization data is passed to
            service instances or replicas when they are created.</param>
            <param name="placementConstraints">The placement constraints as a string. Placement constraints are boolean
            expressions on node properties and allow for restricting a service to particular nodes based on the service
            requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor ==
            blue)".</param>
            <param name="correlationScheme">The correlation scheme.</param>
            <param name="serviceLoadMetrics">The service load metrics.</param>
            <param name="servicePlacementPolicies">The service placement policies.</param>
            <param name="defaultMoveCost">The move cost for the service. Possible values include: 'Zero', 'Low', 'Medium',
            'High', 'VeryHigh'
            
            Specifies the move cost for the service.
            </param>
            <param name="isDefaultMoveCostSpecified">Indicates if the DefaultMoveCost property is specified.</param>
            <param name="servicePackageActivationMode">The activation mode of service package to be used for a service.
            Possible values include: 'SharedProcess', 'ExclusiveProcess'
            
            The activation mode of service package to be used for a Service Fabric service. This is specified at the time of
            creating the Service.
            </param>
            <param name="serviceDnsName">The DNS name of the service. It requires the DNS system service to be enabled in
            Service Fabric cluster.</param>
            <param name="scalingPolicies">Scaling policies for this service.</param>
            <param name="tagsRequiredToPlace">Tags for placement of this service.</param>
            <param name="tagsRequiredToRun">Tags for running of this service.</param>
            <param name="flags">Flags indicating whether other properties are set. Each of the associated properties
            corresponds to a flag, specified below, which, if set, indicate that the property is specified.
            This property can be a combination of those flags obtained using bitwise 'OR' operator.
            For example, if the provided value is 6 then the flags for QuorumLossWaitDuration (2) and
            StandByReplicaKeepDuration(4) are set.
            
            - None - Does not indicate any other properties are set. The value is zero.
            - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is 1.
            - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 2.
            - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 4.
            - ServicePlacementTimeLimit - Indicates the ServicePlacementTimeLimit property is set. The value is 8.
            - DropSourceReplicaOnMove - Indicates the DropSourceReplicaOnMove property is set. The value is 16.
            </param>
            <param name="replicaRestartWaitDurationSeconds">The duration, in seconds, between when a replica goes down and when
            a new replica is created.</param>
            <param name="quorumLossWaitDurationSeconds">The maximum duration, in seconds, for which a partition is allowed to
            be in a state of quorum loss.</param>
            <param name="standByReplicaKeepDurationSeconds">The definition on how long StandBy replicas should be maintained
            before being removed.</param>
            <param name="servicePlacementTimeLimitSeconds">The duration for which replicas can stay InBuild before reporting
            that build is stuck.</param>
            <param name="dropSourceReplicaOnMove">Indicates whether to drop source Secondary replica even if the target replica
            has not finished build. If desired behavior is to drop it as soon as possible the value of this property is true,
            if not it is false.</param>
            <param name="replicaLifecycleDescription">Defines how replicas of this service will behave during their
            lifecycle.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceDescription.TargetReplicaSetSize">
            <summary>
            Gets the target replica set size as a number.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceDescription.MinReplicaSetSize">
            <summary>
            Gets the minimum replica set size as a number.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceDescription.HasPersistedState">
            <summary>
            Gets a flag indicating whether this is a persistent service which stores states on the local disk. If it is then
            the value of this property is true, if not it is false.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceDescription.Flags">
            <summary>
            Gets flags indicating whether other properties are set. Each of the associated properties corresponds to a flag,
            specified below, which, if set, indicate that the property is specified.
            This property can be a combination of those flags obtained using bitwise 'OR' operator.
            For example, if the provided value is 6 then the flags for QuorumLossWaitDuration (2) and
            StandByReplicaKeepDuration(4) are set.
            
            - None - Does not indicate any other properties are set. The value is zero.
            - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is 1.
            - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 2.
            - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 4.
            - ServicePlacementTimeLimit - Indicates the ServicePlacementTimeLimit property is set. The value is 8.
            - DropSourceReplicaOnMove - Indicates the DropSourceReplicaOnMove property is set. The value is 16.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceDescription.ReplicaRestartWaitDurationSeconds">
            <summary>
            Gets the duration, in seconds, between when a replica goes down and when a new replica is created.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceDescription.QuorumLossWaitDurationSeconds">
            <summary>
            Gets the maximum duration, in seconds, for which a partition is allowed to be in a state of quorum loss.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceDescription.StandByReplicaKeepDurationSeconds">
            <summary>
            Gets the definition on how long StandBy replicas should be maintained before being removed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceDescription.ServicePlacementTimeLimitSeconds">
            <summary>
            Gets the duration for which replicas can stay InBuild before reporting that build is stuck.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceDescription.DropSourceReplicaOnMove">
            <summary>
            Gets indicates whether to drop source Secondary replica even if the target replica has not finished build. If
            desired behavior is to drop it as soon as possible the value of this property is true, if not it is false.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceDescription.ReplicaLifecycleDescription">
            <summary>
            Gets defines how replicas of this service will behave during their lifecycle.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatefulServiceInfo">
            <summary>
            Information about a stateful Service Fabric service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatefulServiceInfo.#ctor(System.String,Microsoft.ServiceFabric.Common.ServiceName,System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Nullable{Microsoft.ServiceFabric.Common.ServiceStatus},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the StatefulServiceInfo class.
            </summary>
            <param name="id">The identity of the service. This ID is an encoded representation of the service name. This is
            used in the REST APIs to identify the service resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the service name
            is "fabric:/myapp/app1/svc1",
            the service identity would be "myapp~app1\~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name="name">The full name of the service with 'fabric:' URI scheme.</param>
            <param name="typeName">Name of the service type as specified in the service manifest.</param>
            <param name="manifestVersion">The version of the service manifest.</param>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="serviceStatus">The status of the application. Possible values include: 'Unknown', 'Active',
            'Upgrading', 'Deleting', 'Creating', 'Failed'</param>
            <param name="isServiceGroup">Whether the service is in a service group.</param>
            <param name="hasPersistedState">Whether the service has persisted state.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceInfo.HasPersistedState">
            <summary>
            Gets whether the service has persisted state.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatefulServicePartitionInfo">
            <summary>
            Information about a partition of a stateful Service Fabric service..
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatefulServicePartitionInfo.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Nullable{Microsoft.ServiceFabric.Common.ServicePartitionStatus},Microsoft.ServiceFabric.Common.PartitionInformation,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.TimeSpan},Microsoft.ServiceFabric.Common.Epoch)">
            <summary>
            Initializes a new instance of the StatefulServicePartitionInfo class.
            </summary>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="partitionStatus">The status of the service fabric service partition. Possible values include:
            'Invalid', 'Ready', 'NotReady', 'InQuorumLoss', 'Reconfiguring', 'Deleting'</param>
            <param name="partitionInformation">Information about the partition identity, partitioning scheme and keys supported
            by it.</param>
            <param name="targetReplicaSetSize">The target replica set size as a number.</param>
            <param name="minReplicaSetSize">The minimum replica set size as a number.</param>
            <param name="lastQuorumLossDuration">The duration for which this partition was in quorum loss. If the partition is
            currently in quorum loss, it returns the duration since it has been in that state. This field is using ISO8601
            format for specifying the duration.</param>
            <param name="primaryEpoch">An Epoch is a configuration number for the partition as a whole. When the configuration
            of the replica set changes, for example when the Primary replica changes, the operations that are replicated from
            the new Primary replica are said to be a new Epoch from the ones which were sent by the old Primary replica.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServicePartitionInfo.TargetReplicaSetSize">
            <summary>
            Gets the target replica set size as a number.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServicePartitionInfo.MinReplicaSetSize">
            <summary>
            Gets the minimum replica set size as a number.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServicePartitionInfo.LastQuorumLossDuration">
            <summary>
            Gets the duration for which this partition was in quorum loss. If the partition is currently in quorum loss, it
            returns the duration since it has been in that state. This field is using ISO8601 format for specifying the
            duration.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServicePartitionInfo.PrimaryEpoch">
            <summary>
            Gets an Epoch is a configuration number for the partition as a whole. When the configuration of the replica set
            changes, for example when the Primary replica changes, the operations that are replicated from the new Primary
            replica are said to be a new Epoch from the ones which were sent by the old Primary replica.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatefulServiceReplicaHealth">
            <summary>
            Represents the health of the stateful service replica.
            Contains the replica aggregated health state, the health events and the unhealthy evaluations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatefulServiceReplicaHealth.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvent},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper},Microsoft.ServiceFabric.Common.HealthStatistics,Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId)">
            <summary>
            Initializes a new instance of the StatefulServiceReplicaHealth class.
            </summary>
            <param name="aggregatedHealthState">The HealthState representing the aggregated health state of the entity computed
            by Health Manager.
            The health evaluation of the entity reflects all events reported on the entity and its children (if any).
            The aggregation is done by applying the desired health policy.
            . Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            
            The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
            </param>
            <param name="healthEvents">The list of health events reported on the entity.</param>
            <param name="unhealthyEvaluations">The unhealthy evaluations that show why the current aggregated health state was
            returned by Health Manager.</param>
            <param name="healthStatistics">Shows the health statistics for all children types of the queried entity.</param>
            <param name="partitionId">Id of the partition to which this replica belongs.</param>
            <param name="replicaId">Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify
            a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a
            replica gets dropped and another replica gets created on the same node for the same partition, it will get a
            different value for the id. Sometimes the id of a stateless service instance is also referred as a replica
            id.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceReplicaHealth.ReplicaId">
            <summary>
            Gets id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a
            partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets
            dropped and another replica gets created on the same node for the same partition, it will get a different value for
            the id. Sometimes the id of a stateless service instance is also referred as a replica id.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatefulServiceReplicaHealthState">
            <summary>
            Represents the health state of the stateful service replica, which contains the replica ID and the aggregated
            health state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatefulServiceReplicaHealthState.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId)">
            <summary>
            Initializes a new instance of the StatefulServiceReplicaHealthState class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="partitionId">The ID of the partition to which this replica belongs.</param>
            <param name="replicaId">Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify
            a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a
            replica gets dropped and another replica gets created on the same node for the same partition, it will get a
            different value for the id. Sometimes the id of a stateless service instance is also referred as a replica
            id.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceReplicaHealthState.ReplicaId">
            <summary>
            Gets id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a
            partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets
            dropped and another replica gets created on the same node for the same partition, it will get a different value for
            the id. Sometimes the id of a stateless service instance is also referred as a replica id.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatefulServiceReplicaInfo">
            <summary>
            Represents a stateful service replica. This includes information about the identity, role, status, health, node
            name, uptime, and other details about the replica.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatefulServiceReplicaInfo.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ReplicaStatus},System.Nullable{Microsoft.ServiceFabric.Common.HealthState},Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.ReplicaRole},Microsoft.ServiceFabric.Common.ReplicaId)">
            <summary>
            Initializes a new instance of the StatefulServiceReplicaInfo class.
            </summary>
            <param name="replicaStatus">The status of a replica of a service. Possible values include: 'Invalid', 'InBuild',
            'Standby', 'Ready', 'Down', 'Dropped'</param>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="address">The address the replica is listening on.</param>
            <param name="lastInBuildDurationInSeconds">The last in build duration of the replica in seconds.</param>
            <param name="replicaRole">The role of a replica of a stateful service. Possible values include: 'Unknown', 'None',
            'Primary', 'IdleSecondary', 'ActiveSecondary'</param>
            <param name="replicaId">Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify
            a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a
            replica gets dropped and another replica gets created on the same node for the same partition, it will get a
            different value for the id. Sometimes the id of a stateless service instance is also referred as a replica
            id.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceReplicaInfo.ReplicaRole">
            <summary>
            Gets the role of a replica of a stateful service. Possible values include: 'Unknown', 'None', 'Primary',
            'IdleSecondary', 'ActiveSecondary'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceReplicaInfo.ReplicaId">
            <summary>
            Gets id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a
            partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets
            dropped and another replica gets created on the same node for the same partition, it will get a different value for
            the id. Sometimes the id of a stateless service instance is also referred as a replica id.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatefulServiceTypeDescription">
            <summary>
            Describes a stateful service type defined in the service manifest of a provisioned application type.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatefulServiceTypeDescription.#ctor(System.Nullable{System.Boolean},System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceLoadMetricDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServicePlacementPolicyDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceTypeExtensionDescription},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the StatefulServiceTypeDescription class.
            </summary>
            <param name="isStateful">Indicates whether the service type is a stateful service type or a stateless service type.
            This property is true if the service type is a stateful service type, false otherwise.</param>
            <param name="serviceTypeName">Name of the service type as specified in the service manifest.</param>
            <param name="placementConstraints">The placement constraint to be used when instantiating this service in a Service
            Fabric cluster.</param>
            <param name="loadMetrics">The service load metrics is given as an array of ServiceLoadMetricDescription
            objects.</param>
            <param name="servicePlacementPolicies">List of service placement policy descriptions.</param>
            <param name="extensions">List of service type extensions.</param>
            <param name="hasPersistedState">A flag indicating whether this is a persistent service which stores states on the
            local disk. If it is then the value of this property is true, if not it is false.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceTypeDescription.HasPersistedState">
            <summary>
            Gets a flag indicating whether this is a persistent service which stores states on the local disk. If it is then
            the value of this property is true, if not it is false.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatefulServiceUpdateDescription">
            <summary>
            Describes an update for a stateful service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatefulServiceUpdateDescription.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceCorrelationDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceLoadMetricDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServicePlacementPolicyDescription},System.Nullable{Microsoft.ServiceFabric.Common.MoveCost},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ScalingPolicyDescription},System.String,Microsoft.ServiceFabric.Common.NodeTagsDescription,Microsoft.ServiceFabric.Common.NodeTagsDescription,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.ReplicaLifecycleDescription)">
            <summary>
            Initializes a new instance of the StatefulServiceUpdateDescription class.
            </summary>
            <param name="flags">Flags indicating whether other properties are set. Each of the associated properties
            corresponds to a flag, specified below, which, if set, indicate that the property is specified.
            This property can be a combination of those flags obtained using bitwise 'OR' operator.
            For example, if the provided value is 6 then the flags for ReplicaRestartWaitDuration (2) and
            QuorumLossWaitDuration (4) are set.
            
            - None - Does not indicate any other properties are set. The value is zero.
            - TargetReplicaSetSize/InstanceCount - Indicates whether the TargetReplicaSetSize property (for Stateful services)
            or the InstanceCount property (for Stateless services) is set. The value is 1.
            - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is  2.
            - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 4.
            - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 8.
            - MinReplicaSetSize - Indicates the MinReplicaSetSize property is set. The value is 16.
            - PlacementConstraints - Indicates the PlacementConstraints property is set. The value is 32.
            - PlacementPolicyList - Indicates the ServicePlacementPolicies property is set. The value is 64.
            - Correlation - Indicates the CorrelationScheme property is set. The value is 128.
            - Metrics - Indicates the ServiceLoadMetrics property is set. The value is 256.
            - DefaultMoveCost - Indicates the DefaultMoveCost property is set. The value is 512.
            - ScalingPolicy - Indicates the ScalingPolicies property is set. The value is 1024.
            - ServicePlacementTimeLimit - Indicates the ServicePlacementTimeLimit property is set. The value is 2048.
            - MinInstanceCount - Indicates the MinInstanceCount property is set. The value is 4096.
            - MinInstancePercentage - Indicates the MinInstancePercentage property is set. The value is 8192.
            - InstanceCloseDelayDuration - Indicates the InstanceCloseDelayDuration property is set. The value is 16384.
            - InstanceRestartWaitDuration - Indicates the InstanceCloseDelayDuration property is set. The value is 32768.
            - DropSourceReplicaOnMove - Indicates the DropSourceReplicaOnMove property is set. The value is 65536.
            - ServiceDnsName - Indicates the ServiceDnsName property is set. The value is 131072.
            - TagsForPlacement - Indicates the TagsForPlacement property is set. The value is 1048576.
            - TagsForRunning - Indicates the TagsForRunning property is set. The value is 2097152.
            </param>
            <param name="placementConstraints">The placement constraints as a string. Placement constraints are boolean
            expressions on node properties and allow for restricting a service to particular nodes based on the service
            requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor ==
            blue)".</param>
            <param name="correlationScheme">The correlation scheme.</param>
            <param name="loadMetrics">The service load metrics.</param>
            <param name="servicePlacementPolicies">The service placement policies.</param>
            <param name="defaultMoveCost">The move cost for the service. Possible values include: 'Zero', 'Low', 'Medium',
            'High', 'VeryHigh'
            
            Specifies the move cost for the service.
            </param>
            <param name="scalingPolicies">Scaling policies for this service.</param>
            <param name="serviceDnsName">The DNS name of the service.</param>
            <param name="tagsForPlacement">Tags for placement of this service.</param>
            <param name="tagsForRunning">Tags for running of this service.</param>
            <param name="targetReplicaSetSize">The target replica set size as a number.</param>
            <param name="minReplicaSetSize">The minimum replica set size as a number.</param>
            <param name="replicaRestartWaitDurationSeconds">The duration, in seconds, between when a replica goes down and when
            a new replica is created.</param>
            <param name="quorumLossWaitDurationSeconds">The maximum duration, in seconds, for which a partition is allowed to
            be in a state of quorum loss.</param>
            <param name="standByReplicaKeepDurationSeconds">The definition on how long StandBy replicas should be maintained
            before being removed.</param>
            <param name="servicePlacementTimeLimitSeconds">The duration for which replicas can stay InBuild before reporting
            that build is stuck.</param>
            <param name="dropSourceReplicaOnMove">Indicates whether to drop source Secondary replica even if the target replica
            has not finished build. If desired behavior is to drop it as soon as possible the value of this property is true,
            if not it is false.</param>
            <param name="replicaLifecycleDescription">Defines how replicas of this service will behave during their
            lifecycle.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceUpdateDescription.TargetReplicaSetSize">
            <summary>
            Gets the target replica set size as a number.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceUpdateDescription.MinReplicaSetSize">
            <summary>
            Gets the minimum replica set size as a number.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceUpdateDescription.ReplicaRestartWaitDurationSeconds">
            <summary>
            Gets the duration, in seconds, between when a replica goes down and when a new replica is created.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceUpdateDescription.QuorumLossWaitDurationSeconds">
            <summary>
            Gets the maximum duration, in seconds, for which a partition is allowed to be in a state of quorum loss.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceUpdateDescription.StandByReplicaKeepDurationSeconds">
            <summary>
            Gets the definition on how long StandBy replicas should be maintained before being removed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceUpdateDescription.ServicePlacementTimeLimitSeconds">
            <summary>
            Gets the duration for which replicas can stay InBuild before reporting that build is stuck.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceUpdateDescription.DropSourceReplicaOnMove">
            <summary>
            Gets indicates whether to drop source Secondary replica even if the target replica has not finished build. If
            desired behavior is to drop it as soon as possible the value of this property is true, if not it is false.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatefulServiceUpdateDescription.ReplicaLifecycleDescription">
            <summary>
            Gets defines how replicas of this service will behave during their lifecycle.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatelessReplicaHealthReportExpiredEvent">
            <summary>
            Stateless Replica Health Report Expired event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatelessReplicaHealthReportExpiredEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the StatelessReplicaHealthReportExpiredEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="replicaId">Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify
            a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a
            replica gets dropped and another replica gets created on the same node for the same partition, it will get a
            different value for the id. Sometimes the id of a stateless service instance is also referred as a replica
            id.</param>
            <param name="sourceId">Id of report source.</param>
            <param name="property">Describes the property.</param>
            <param name="healthState">Describes the property health state.</param>
            <param name="timeToLiveMs">Time to live in milli-seconds.</param>
            <param name="sequenceNumber">Sequence number of report.</param>
            <param name="description">Description of report.</param>
            <param name="removeWhenExpired">Indicates the removal when it expires.</param>
            <param name="sourceUtcTimestamp">Source time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessReplicaHealthReportExpiredEvent.SourceId">
            <summary>
            Gets id of report source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessReplicaHealthReportExpiredEvent.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessReplicaHealthReportExpiredEvent.HealthState">
            <summary>
            Gets the property health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessReplicaHealthReportExpiredEvent.TimeToLiveMs">
            <summary>
            Gets time to live in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessReplicaHealthReportExpiredEvent.SequenceNumber">
            <summary>
            Gets sequence number of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessReplicaHealthReportExpiredEvent.Description">
            <summary>
            Gets description of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessReplicaHealthReportExpiredEvent.RemoveWhenExpired">
            <summary>
            Gets indicates the removal when it expires.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessReplicaHealthReportExpiredEvent.SourceUtcTimestamp">
            <summary>
            Gets source time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatelessReplicaNewHealthReportEvent">
            <summary>
            Stateless Replica Health Report Created event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatelessReplicaNewHealthReportEvent.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the StatelessReplicaNewHealthReportEvent class.
            </summary>
            <param name="eventInstanceId">The identifier for the FabricEvent instance.</param>
            <param name="timeStamp">The time event was logged.</param>
            <param name="partitionId">An internal ID used by Service Fabric to uniquely identify a partition. This is a
            randomly generated GUID when the service was created. The partition ID is unique and does not change for the
            lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be
            different.</param>
            <param name="replicaId">Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify
            a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a
            replica gets dropped and another replica gets created on the same node for the same partition, it will get a
            different value for the id. Sometimes the id of a stateless service instance is also referred as a replica
            id.</param>
            <param name="sourceId">Id of report source.</param>
            <param name="property">Describes the property.</param>
            <param name="healthState">Describes the property health state.</param>
            <param name="timeToLiveMs">Time to live in milli-seconds.</param>
            <param name="sequenceNumber">Sequence number of report.</param>
            <param name="description">Description of report.</param>
            <param name="removeWhenExpired">Indicates the removal when it expires.</param>
            <param name="sourceUtcTimestamp">Source time.</param>
            <param name="category">The category of event.</param>
            <param name="hasCorrelatedEvents">Shows there is existing related events available.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessReplicaNewHealthReportEvent.SourceId">
            <summary>
            Gets id of report source.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessReplicaNewHealthReportEvent.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessReplicaNewHealthReportEvent.HealthState">
            <summary>
            Gets the property health state.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessReplicaNewHealthReportEvent.TimeToLiveMs">
            <summary>
            Gets time to live in milli-seconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessReplicaNewHealthReportEvent.SequenceNumber">
            <summary>
            Gets sequence number of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessReplicaNewHealthReportEvent.Description">
            <summary>
            Gets description of report.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessReplicaNewHealthReportEvent.RemoveWhenExpired">
            <summary>
            Gets indicates the removal when it expires.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessReplicaNewHealthReportEvent.SourceUtcTimestamp">
            <summary>
            Gets source time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatelessServiceDescription">
            <summary>
            Describes a stateless service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatelessServiceDescription.#ctor(Microsoft.ServiceFabric.Common.ServiceName,System.String,Microsoft.ServiceFabric.Common.PartitionSchemeDescription,System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.ApplicationName,System.Byte[],System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceCorrelationDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceLoadMetricDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServicePlacementPolicyDescription},System.Nullable{Microsoft.ServiceFabric.Common.MoveCost},System.Nullable{System.Boolean},System.Nullable{Microsoft.ServiceFabric.Common.ServicePackageActivationMode},System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ScalingPolicyDescription},Microsoft.ServiceFabric.Common.NodeTagsDescription,Microsoft.ServiceFabric.Common.NodeTagsDescription,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},Microsoft.ServiceFabric.Common.InstanceLifecycleDescription,System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the StatelessServiceDescription class.
            </summary>
            <param name="serviceName">The full name of the service with 'fabric:' URI scheme.</param>
            <param name="serviceTypeName">Name of the service type as specified in the service manifest.</param>
            <param name="partitionDescription">The partition description as an object.</param>
            <param name="instanceCount">The instance count.</param>
            <param name="applicationName">The name of the application, including the 'fabric:' URI scheme.</param>
            <param name="initializationData">The initialization data as an array of bytes. Initialization data is passed to
            service instances or replicas when they are created.</param>
            <param name="placementConstraints">The placement constraints as a string. Placement constraints are boolean
            expressions on node properties and allow for restricting a service to particular nodes based on the service
            requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor ==
            blue)".</param>
            <param name="correlationScheme">The correlation scheme.</param>
            <param name="serviceLoadMetrics">The service load metrics.</param>
            <param name="servicePlacementPolicies">The service placement policies.</param>
            <param name="defaultMoveCost">The move cost for the service. Possible values include: 'Zero', 'Low', 'Medium',
            'High', 'VeryHigh'
            
            Specifies the move cost for the service.
            </param>
            <param name="isDefaultMoveCostSpecified">Indicates if the DefaultMoveCost property is specified.</param>
            <param name="servicePackageActivationMode">The activation mode of service package to be used for a service.
            Possible values include: 'SharedProcess', 'ExclusiveProcess'
            
            The activation mode of service package to be used for a Service Fabric service. This is specified at the time of
            creating the Service.
            </param>
            <param name="serviceDnsName">The DNS name of the service. It requires the DNS system service to be enabled in
            Service Fabric cluster.</param>
            <param name="scalingPolicies">Scaling policies for this service.</param>
            <param name="tagsRequiredToPlace">Tags for placement of this service.</param>
            <param name="tagsRequiredToRun">Tags for running of this service.</param>
            <param name="minInstanceCount">MinInstanceCount is the minimum number of instances that must be up to meet the
            EnsureAvailability safety check during operations like upgrade or deactivate node.
            The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ).
            Note, if InstanceCount is set to -1, during MinInstanceCount computation -1 is first converted into the number of
            nodes on which the instances are allowed to be placed according to the placement constraints on the service.
            </param>
            <param name="minInstancePercentage">MinInstancePercentage is the minimum percentage of InstanceCount that must be
            up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node.
            The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ).
            Note, if InstanceCount is set to -1, during MinInstancePercentage computation, -1 is first converted into the
            number of nodes on which the instances are allowed to be placed according to the placement constraints on the
            service.
            </param>
            <param name="flags">Flags indicating whether other properties are set. Each of the associated properties
            corresponds to a flag, specified below, which, if set, indicate that the property is specified.
            This property can be a combination of those flags obtained using bitwise 'OR' operator.
            For example, if the provided value is 1 then the flags for InstanceCloseDelayDuration is set.
            
            - None - Does not indicate any other properties are set. The value is zero.
            - InstanceCloseDelayDuration - Indicates the InstanceCloseDelayDuration property is set. The value is 1.
            - InstanceRestartWaitDuration - Indicates the InstanceRestartWaitDurationSeconds property is set. The value is 2.
            </param>
            <param name="instanceCloseDelayDurationSeconds">Duration in seconds, to wait before a stateless instance is closed,
            to allow the active requests to drain gracefully. This would be effective when the instance is closing during the
            application/cluster upgrade and disabling node.
            The endpoint exposed on this instance is removed prior to starting the delay, which prevents new connections to
            this instance.
            In addition, clients that have subscribed to service endpoint change
            events(https://docs.microsoft.com/dotnet/api/system.fabric.fabricclient.servicemanagementclient.registerservicenotificationfilterasync),
            can do
            the following upon receiving the endpoint removal notification:
            - Stop sending new requests to this instance.
            - Close existing connections after in-flight requests have completed.
            - Connect to a different instance of the service partition for future requests.
            Note, the default value of InstanceCloseDelayDuration is 0, which indicates that there won't be any delay or
            removal of the endpoint prior to closing the instance.
            </param>
            <param name="instanceLifecycleDescription">Defines how instances of this service will behave during their
            lifecycle.</param>
            <param name="instanceRestartWaitDurationSeconds">When a stateless instance goes down, this timer starts. When it
            expires Service Fabric will create a new instance on any node in the cluster.
            This configuration is to reduce unnecessary creation of a new instance in situations where the instance going down
            is likely to recover in a short time. For example, during an upgrade.
            The default value is 0, which indicates that when stateless instance goes down, Service Fabric will immediately
            start building its replacement.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServiceDescription.InstanceCount">
            <summary>
            Gets the instance count.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServiceDescription.MinInstanceCount">
            <summary>
            Gets minInstanceCount is the minimum number of instances that must be up to meet the EnsureAvailability safety
            check during operations like upgrade or deactivate node.
            The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ).
            Note, if InstanceCount is set to -1, during MinInstanceCount computation -1 is first converted into the number of
            nodes on which the instances are allowed to be placed according to the placement constraints on the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServiceDescription.MinInstancePercentage">
            <summary>
            Gets minInstancePercentage is the minimum percentage of InstanceCount that must be up to meet the
            EnsureAvailability safety check during operations like upgrade or deactivate node.
            The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ).
            Note, if InstanceCount is set to -1, during MinInstancePercentage computation, -1 is first converted into the
            number of nodes on which the instances are allowed to be placed according to the placement constraints on the
            service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServiceDescription.Flags">
            <summary>
            Gets flags indicating whether other properties are set. Each of the associated properties corresponds to a flag,
            specified below, which, if set, indicate that the property is specified.
            This property can be a combination of those flags obtained using bitwise 'OR' operator.
            For example, if the provided value is 1 then the flags for InstanceCloseDelayDuration is set.
            
            - None - Does not indicate any other properties are set. The value is zero.
            - InstanceCloseDelayDuration - Indicates the InstanceCloseDelayDuration property is set. The value is 1.
            - InstanceRestartWaitDuration - Indicates the InstanceRestartWaitDurationSeconds property is set. The value is 2.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServiceDescription.InstanceCloseDelayDurationSeconds">
            <summary>
            Gets duration in seconds, to wait before a stateless instance is closed, to allow the active requests to drain
            gracefully. This would be effective when the instance is closing during the application/cluster upgrade and
            disabling node.
            The endpoint exposed on this instance is removed prior to starting the delay, which prevents new connections to
            this instance.
            In addition, clients that have subscribed to service endpoint change
            events(https://docs.microsoft.com/dotnet/api/system.fabric.fabricclient.servicemanagementclient.registerservicenotificationfilterasync),
            can do
            the following upon receiving the endpoint removal notification:
            - Stop sending new requests to this instance.
            - Close existing connections after in-flight requests have completed.
            - Connect to a different instance of the service partition for future requests.
            Note, the default value of InstanceCloseDelayDuration is 0, which indicates that there won't be any delay or
            removal of the endpoint prior to closing the instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServiceDescription.InstanceLifecycleDescription">
            <summary>
            Gets defines how instances of this service will behave during their lifecycle.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServiceDescription.InstanceRestartWaitDurationSeconds">
            <summary>
            Gets when a stateless instance goes down, this timer starts. When it expires Service Fabric will create a new
            instance on any node in the cluster.
            This configuration is to reduce unnecessary creation of a new instance in situations where the instance going down
            is likely to recover in a short time. For example, during an upgrade.
            The default value is 0, which indicates that when stateless instance goes down, Service Fabric will immediately
            start building its replacement.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatelessServiceInfo">
            <summary>
            Information about a stateless Service Fabric service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatelessServiceInfo.#ctor(System.String,Microsoft.ServiceFabric.Common.ServiceName,System.String,System.String,System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Nullable{Microsoft.ServiceFabric.Common.ServiceStatus},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the StatelessServiceInfo class.
            </summary>
            <param name="id">The identity of the service. This ID is an encoded representation of the service name. This is
            used in the REST APIs to identify the service resource.
            Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the service name
            is "fabric:/myapp/app1/svc1",
            the service identity would be "myapp~app1\~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
            </param>
            <param name="name">The full name of the service with 'fabric:' URI scheme.</param>
            <param name="typeName">Name of the service type as specified in the service manifest.</param>
            <param name="manifestVersion">The version of the service manifest.</param>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="serviceStatus">The status of the application. Possible values include: 'Unknown', 'Active',
            'Upgrading', 'Deleting', 'Creating', 'Failed'</param>
            <param name="isServiceGroup">Whether the service is in a service group.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatelessServiceInstanceHealth">
            <summary>
            Represents the health of the stateless service instance.
            Contains the instance aggregated health state, the health events and the unhealthy evaluations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatelessServiceInstanceHealth.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvent},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper},Microsoft.ServiceFabric.Common.HealthStatistics,Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId)">
            <summary>
            Initializes a new instance of the StatelessServiceInstanceHealth class.
            </summary>
            <param name="aggregatedHealthState">The HealthState representing the aggregated health state of the entity computed
            by Health Manager.
            The health evaluation of the entity reflects all events reported on the entity and its children (if any).
            The aggregation is done by applying the desired health policy.
            . Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
            
            The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
            </param>
            <param name="healthEvents">The list of health events reported on the entity.</param>
            <param name="unhealthyEvaluations">The unhealthy evaluations that show why the current aggregated health state was
            returned by Health Manager.</param>
            <param name="healthStatistics">Shows the health statistics for all children types of the queried entity.</param>
            <param name="partitionId">Id of the partition to which this replica belongs.</param>
            <param name="instanceId">Id of a stateless service instance. InstanceId is used by Service Fabric to uniquely
            identify an instance of a partition of a stateless service. It is unique within a partition and does not change for
            the lifetime of the instance. If the instance has failed over on the same or different node, it will get a
            different value for the InstanceId.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServiceInstanceHealth.InstanceId">
            <summary>
            Gets id of a stateless service instance. InstanceId is used by Service Fabric to uniquely identify an instance of a
            partition of a stateless service. It is unique within a partition and does not change for the lifetime of the
            instance. If the instance has failed over on the same or different node, it will get a different value for the
            InstanceId.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatelessServiceInstanceHealthState">
            <summary>
            Represents the health state of the stateless service instance, which contains the instance ID and the aggregated
            health state.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatelessServiceInstanceHealthState.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.ReplicaId)">
            <summary>
            Initializes a new instance of the StatelessServiceInstanceHealthState class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="partitionId">The ID of the partition to which this replica belongs.</param>
            <param name="replicaId">Id of the stateless service instance on the wire this field is called ReplicaId.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServiceInstanceHealthState.ReplicaId">
            <summary>
            Gets id of the stateless service instance on the wire this field is called ReplicaId.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatelessServiceInstanceInfo">
            <summary>
            Represents a stateless service instance. This includes information about the identity, status, health, node name,
            uptime, and other details about the instance.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatelessServiceInstanceInfo.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.ReplicaStatus},System.Nullable{Microsoft.ServiceFabric.Common.HealthState},Microsoft.ServiceFabric.Common.NodeName,System.String,System.String,Microsoft.ServiceFabric.Common.ReplicaId)">
            <summary>
            Initializes a new instance of the StatelessServiceInstanceInfo class.
            </summary>
            <param name="replicaStatus">The status of a replica of a service. Possible values include: 'Invalid', 'InBuild',
            'Standby', 'Ready', 'Down', 'Dropped'</param>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="nodeName">The name of a Service Fabric node.</param>
            <param name="address">The address the replica is listening on.</param>
            <param name="lastInBuildDurationInSeconds">The last in build duration of the replica in seconds.</param>
            <param name="instanceId">Id of a stateless service instance. InstanceId is used by Service Fabric to uniquely
            identify an instance of a partition of a stateless service. It is unique within a partition and does not change for
            the lifetime of the instance. If the instance has failed over on the same or different node, it will get a
            different value for the InstanceId.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServiceInstanceInfo.InstanceId">
            <summary>
            Gets id of a stateless service instance. InstanceId is used by Service Fabric to uniquely identify an instance of a
            partition of a stateless service. It is unique within a partition and does not change for the lifetime of the
            instance. If the instance has failed over on the same or different node, it will get a different value for the
            InstanceId.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatelessServicePartitionInfo">
            <summary>
            Information about a partition of a stateless Service Fabric service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatelessServicePartitionInfo.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.Nullable{Microsoft.ServiceFabric.Common.ServicePartitionStatus},Microsoft.ServiceFabric.Common.PartitionInformation,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the StatelessServicePartitionInfo class.
            </summary>
            <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
            Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="partitionStatus">The status of the service fabric service partition. Possible values include:
            'Invalid', 'Ready', 'NotReady', 'InQuorumLoss', 'Reconfiguring', 'Deleting'</param>
            <param name="partitionInformation">Information about the partition identity, partitioning scheme and keys supported
            by it.</param>
            <param name="instanceCount">Number of instances of this partition.</param>
            <param name="minInstanceCount">MinInstanceCount is the minimum number of instances that must be up to meet the
            EnsureAvailability safety check during operations like upgrade or deactivate node.
            The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ).
            Note, if InstanceCount is set to -1, during MinInstanceCount computation -1 is first converted into the number of
            nodes on which the instances are allowed to be placed according to the placement constraints on the service.
            </param>
            <param name="minInstancePercentage">MinInstancePercentage is the minimum percentage of InstanceCount that must be
            up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node.
            The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ).
            Note, if InstanceCount is set to -1, during MinInstancePercentage computation, -1 is first converted into the
            number of nodes on which the instances are allowed to be placed according to the placement constraints on the
            service.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServicePartitionInfo.InstanceCount">
            <summary>
            Gets number of instances of this partition.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServicePartitionInfo.MinInstanceCount">
            <summary>
            Gets minInstanceCount is the minimum number of instances that must be up to meet the EnsureAvailability safety
            check during operations like upgrade or deactivate node.
            The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ).
            Note, if InstanceCount is set to -1, during MinInstanceCount computation -1 is first converted into the number of
            nodes on which the instances are allowed to be placed according to the placement constraints on the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServicePartitionInfo.MinInstancePercentage">
            <summary>
            Gets minInstancePercentage is the minimum percentage of InstanceCount that must be up to meet the
            EnsureAvailability safety check during operations like upgrade or deactivate node.
            The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ).
            Note, if InstanceCount is set to -1, during MinInstancePercentage computation, -1 is first converted into the
            number of nodes on which the instances are allowed to be placed according to the placement constraints on the
            service.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatelessServiceTypeDescription">
            <summary>
            Describes a stateless service type defined in the service manifest of a provisioned application type.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatelessServiceTypeDescription.#ctor(System.Nullable{System.Boolean},System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceLoadMetricDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServicePlacementPolicyDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceTypeExtensionDescription},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the StatelessServiceTypeDescription class.
            </summary>
            <param name="isStateful">Indicates whether the service type is a stateful service type or a stateless service type.
            This property is true if the service type is a stateful service type, false otherwise.</param>
            <param name="serviceTypeName">Name of the service type as specified in the service manifest.</param>
            <param name="placementConstraints">The placement constraint to be used when instantiating this service in a Service
            Fabric cluster.</param>
            <param name="loadMetrics">The service load metrics is given as an array of ServiceLoadMetricDescription
            objects.</param>
            <param name="servicePlacementPolicies">List of service placement policy descriptions.</param>
            <param name="extensions">List of service type extensions.</param>
            <param name="useImplicitHost">A flag indicating if this type is not implemented and hosted by a user service
            process, but is implicitly hosted by a system created process. This value is true for services using the guest
            executable services, false otherwise.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServiceTypeDescription.UseImplicitHost">
            <summary>
            Gets a flag indicating if this type is not implemented and hosted by a user service process, but is implicitly
            hosted by a system created process. This value is true for services using the guest executable services, false
            otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StatelessServiceUpdateDescription">
            <summary>
            Describes an update for a stateless service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StatelessServiceUpdateDescription.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceCorrelationDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServiceLoadMetricDescription},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ServicePlacementPolicyDescription},System.Nullable{Microsoft.ServiceFabric.Common.MoveCost},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.ScalingPolicyDescription},System.String,Microsoft.ServiceFabric.Common.NodeTagsDescription,Microsoft.ServiceFabric.Common.NodeTagsDescription,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Microsoft.ServiceFabric.Common.InstanceLifecycleDescription,System.String)">
            <summary>
            Initializes a new instance of the StatelessServiceUpdateDescription class.
            </summary>
            <param name="flags">Flags indicating whether other properties are set. Each of the associated properties
            corresponds to a flag, specified below, which, if set, indicate that the property is specified.
            This property can be a combination of those flags obtained using bitwise 'OR' operator.
            For example, if the provided value is 6 then the flags for ReplicaRestartWaitDuration (2) and
            QuorumLossWaitDuration (4) are set.
            
            - None - Does not indicate any other properties are set. The value is zero.
            - TargetReplicaSetSize/InstanceCount - Indicates whether the TargetReplicaSetSize property (for Stateful services)
            or the InstanceCount property (for Stateless services) is set. The value is 1.
            - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is  2.
            - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 4.
            - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 8.
            - MinReplicaSetSize - Indicates the MinReplicaSetSize property is set. The value is 16.
            - PlacementConstraints - Indicates the PlacementConstraints property is set. The value is 32.
            - PlacementPolicyList - Indicates the ServicePlacementPolicies property is set. The value is 64.
            - Correlation - Indicates the CorrelationScheme property is set. The value is 128.
            - Metrics - Indicates the ServiceLoadMetrics property is set. The value is 256.
            - DefaultMoveCost - Indicates the DefaultMoveCost property is set. The value is 512.
            - ScalingPolicy - Indicates the ScalingPolicies property is set. The value is 1024.
            - ServicePlacementTimeLimit - Indicates the ServicePlacementTimeLimit property is set. The value is 2048.
            - MinInstanceCount - Indicates the MinInstanceCount property is set. The value is 4096.
            - MinInstancePercentage - Indicates the MinInstancePercentage property is set. The value is 8192.
            - InstanceCloseDelayDuration - Indicates the InstanceCloseDelayDuration property is set. The value is 16384.
            - InstanceRestartWaitDuration - Indicates the InstanceCloseDelayDuration property is set. The value is 32768.
            - DropSourceReplicaOnMove - Indicates the DropSourceReplicaOnMove property is set. The value is 65536.
            - ServiceDnsName - Indicates the ServiceDnsName property is set. The value is 131072.
            - TagsForPlacement - Indicates the TagsForPlacement property is set. The value is 1048576.
            - TagsForRunning - Indicates the TagsForRunning property is set. The value is 2097152.
            </param>
            <param name="placementConstraints">The placement constraints as a string. Placement constraints are boolean
            expressions on node properties and allow for restricting a service to particular nodes based on the service
            requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor ==
            blue)".</param>
            <param name="correlationScheme">The correlation scheme.</param>
            <param name="loadMetrics">The service load metrics.</param>
            <param name="servicePlacementPolicies">The service placement policies.</param>
            <param name="defaultMoveCost">The move cost for the service. Possible values include: 'Zero', 'Low', 'Medium',
            'High', 'VeryHigh'
            
            Specifies the move cost for the service.
            </param>
            <param name="scalingPolicies">Scaling policies for this service.</param>
            <param name="serviceDnsName">The DNS name of the service.</param>
            <param name="tagsForPlacement">Tags for placement of this service.</param>
            <param name="tagsForRunning">Tags for running of this service.</param>
            <param name="instanceCount">The instance count.</param>
            <param name="minInstanceCount">MinInstanceCount is the minimum number of instances that must be up to meet the
            EnsureAvailability safety check during operations like upgrade or deactivate node.
            The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ).
            Note, if InstanceCount is set to -1, during MinInstanceCount computation -1 is first converted into the number of
            nodes on which the instances are allowed to be placed according to the placement constraints on the service.
            </param>
            <param name="minInstancePercentage">MinInstancePercentage is the minimum percentage of InstanceCount that must be
            up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node.
            The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ).
            Note, if InstanceCount is set to -1, during MinInstancePercentage computation, -1 is first converted into the
            number of nodes on which the instances are allowed to be placed according to the placement constraints on the
            service.
            </param>
            <param name="instanceCloseDelayDurationSeconds">Duration in seconds, to wait before a stateless instance is closed,
            to allow the active requests to drain gracefully. This would be effective when the instance is closing during the
            application/cluster upgrade and disabling node.
            The endpoint exposed on this instance is removed prior to starting the delay, which prevents new connections to
            this instance.
            In addition, clients that have subscribed to service endpoint change
            events(https://docs.microsoft.com/dotnet/api/system.fabric.fabricclient.servicemanagementclient.registerservicenotificationfilterasync),
            can do
            the following upon receiving the endpoint removal notification:
            - Stop sending new requests to this instance.
            - Close existing connections after in-flight requests have completed.
            - Connect to a different instance of the service partition for future requests.
            </param>
            <param name="instanceLifecycleDescription">Defines how instances of this service will behave during their
            lifecycle.</param>
            <param name="instanceRestartWaitDurationSeconds">When a stateless instance goes down, this timer starts. When it
            expires Service Fabric will create a new instance on any node in the cluster.
            This configuration is to reduce unnecessary creation of a new instance in situations where the instance going down
            is likely to recover in a short time. For example, during an upgrade.
            The default value is 0, which indicates that when stateless instance goes down, Service Fabric will immediately
            start building its replacement.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServiceUpdateDescription.InstanceCount">
            <summary>
            Gets the instance count.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServiceUpdateDescription.MinInstanceCount">
            <summary>
            Gets minInstanceCount is the minimum number of instances that must be up to meet the EnsureAvailability safety
            check during operations like upgrade or deactivate node.
            The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ).
            Note, if InstanceCount is set to -1, during MinInstanceCount computation -1 is first converted into the number of
            nodes on which the instances are allowed to be placed according to the placement constraints on the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServiceUpdateDescription.MinInstancePercentage">
            <summary>
            Gets minInstancePercentage is the minimum percentage of InstanceCount that must be up to meet the
            EnsureAvailability safety check during operations like upgrade or deactivate node.
            The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ).
            Note, if InstanceCount is set to -1, during MinInstancePercentage computation, -1 is first converted into the
            number of nodes on which the instances are allowed to be placed according to the placement constraints on the
            service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServiceUpdateDescription.InstanceCloseDelayDurationSeconds">
            <summary>
            Gets duration in seconds, to wait before a stateless instance is closed, to allow the active requests to drain
            gracefully. This would be effective when the instance is closing during the application/cluster upgrade and
            disabling node.
            The endpoint exposed on this instance is removed prior to starting the delay, which prevents new connections to
            this instance.
            In addition, clients that have subscribed to service endpoint change
            events(https://docs.microsoft.com/dotnet/api/system.fabric.fabricclient.servicemanagementclient.registerservicenotificationfilterasync),
            can do
            the following upon receiving the endpoint removal notification:
            - Stop sending new requests to this instance.
            - Close existing connections after in-flight requests have completed.
            - Connect to a different instance of the service partition for future requests.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServiceUpdateDescription.InstanceLifecycleDescription">
            <summary>
            Gets defines how instances of this service will behave during their lifecycle.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StatelessServiceUpdateDescription.InstanceRestartWaitDurationSeconds">
            <summary>
            Gets when a stateless instance goes down, this timer starts. When it expires Service Fabric will create a new
            instance on any node in the cluster.
            This configuration is to reduce unnecessary creation of a new instance in situations where the instance going down
            is likely to recover in a short time. For example, during an upgrade.
            The default value is 0, which indicates that when stateless instance goes down, Service Fabric will immediately
            start building its replacement.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StoppedChaosEvent">
            <summary>
            Describes a Chaos event that gets generated when Chaos stops because either the user issued a stop or the time to
            run was up.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StoppedChaosEvent.#ctor(System.Nullable{System.DateTime},System.String)">
            <summary>
            Initializes a new instance of the StoppedChaosEvent class.
            </summary>
            <param name="timeStampUtc">The UTC timestamp when this Chaos event was generated.</param>
            <param name="reason">Describes why Chaos stopped. Chaos can stop because of StopChaos API call or the timeToRun
            provided in ChaosParameters is over.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StoppedChaosEvent.Reason">
            <summary>
            Gets why Chaos stopped. Chaos can stop because of StopChaos API call or the timeToRun provided in ChaosParameters
            is over.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.StringPropertyValue">
            <summary>
            Describes a Service Fabric property value of type String.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.StringPropertyValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StringPropertyValue class.
            </summary>
            <param name="data">The data of the property value.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.StringPropertyValue.Data">
            <summary>
            Gets the data of the property value.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SuccessfulPropertyBatchInfo">
            <summary>
            Derived from PropertyBatchInfo. Represents the property batch succeeding. Contains the results of any "Get"
            operations in the batch.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.SuccessfulPropertyBatchInfo.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.ServiceFabric.Common.PropertyInfo})">
            <summary>
            Initializes a new instance of the SuccessfulPropertyBatchInfo class.
            </summary>
            <param name="properties">A map containing the properties that were requested through any "Get" property batch
            operations. The key represents the index of the "Get" operation in the original request, in string form. The value
            is the property. If a property is not found, it will not be in the map.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SuccessfulPropertyBatchInfo.Properties">
            <summary>
            Gets a map containing the properties that were requested through any "Get" property batch operations. The key
            represents the index of the "Get" operation in the original request, in string form. The value is the property. If
            a property is not found, it will not be in the map.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.SystemApplicationHealthEvaluation">
            <summary>
            Represents health evaluation for the fabric:/System application, containing information about the data and the
            algorithm used by health store to evaluate health. The evaluation is returned only when the aggregated health state
            of the cluster is either Error or Warning.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.SystemApplicationHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the SystemApplicationHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the current aggregated health state of
            the system application. The types of the unhealthy evaluations can be DeployedApplicationsHealthEvaluation,
            ServicesHealthEvaluation or EventHealthEvaluation.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.SystemApplicationHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the current aggregated health state of the system application. The
            types of the unhealthy evaluations can be DeployedApplicationsHealthEvaluation, ServicesHealthEvaluation or
            EventHealthEvaluation.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.TcpConfig">
            <summary>
            Describes the tcp configuration for external connectivity for this network.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.TcpConfig.#ctor(System.String,System.Nullable{System.Int32},Microsoft.ServiceFabric.Common.GatewayDestination)">
            <summary>
            Initializes a new instance of the TcpConfig class.
            </summary>
            <param name="name">tcp gateway config name.</param>
            <param name="port">Specifies the port at which the service endpoint below needs to be exposed.</param>
            <param name="destination">Describes destination endpoint for routing traffic.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.TcpConfig.Name">
            <summary>
            Gets tcp gateway config name.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.TcpConfig.Port">
            <summary>
            Gets specifies the port at which the service endpoint below needs to be exposed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.TcpConfig.Destination">
            <summary>
            Gets destination endpoint for routing traffic.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.TestErrorChaosEvent">
            <summary>
            Describes a Chaos event that gets generated when an unexpected event occurs in the Chaos engine.
            For example, due to the cluster snapshot being inconsistent, while faulting an entity, Chaos found that the entity
            was already faulted -- which would be an unexpected event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.TestErrorChaosEvent.#ctor(System.Nullable{System.DateTime},System.String)">
            <summary>
            Initializes a new instance of the TestErrorChaosEvent class.
            </summary>
            <param name="timeStampUtc">The UTC timestamp when this Chaos event was generated.</param>
            <param name="reason">Describes why TestErrorChaosEvent was generated. For example, Chaos tries to fault a partition
            but finds that the partition is no longer fault tolerant, then a TestErrorEvent gets generated with the reason
            stating that the partition is not fault tolerant.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.TestErrorChaosEvent.Reason">
            <summary>
            Gets why TestErrorChaosEvent was generated. For example, Chaos tries to fault a partition but finds that the
            partition is no longer fault tolerant, then a TestErrorEvent gets generated with the reason stating that the
            partition is not fault tolerant.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.TimeBasedBackupScheduleDescription">
            <summary>
            Describes the time based backup schedule.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.TimeBasedBackupScheduleDescription.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.BackupScheduleFrequencyType},System.Collections.Generic.IEnumerable{System.Nullable{System.DateTime}},System.Collections.Generic.IEnumerable{System.Nullable{System.DayOfWeek}})">
            <summary>
            Initializes a new instance of the TimeBasedBackupScheduleDescription class.
            </summary>
            <param name="scheduleFrequencyType">Describes the frequency with which to run the time based backup schedule.
            . Possible values include: 'Invalid', 'Daily', 'Weekly'</param>
            <param name="runTimes">Represents the list of exact time during the day in ISO8601 format. Like '19:00:00' will
            represent '7PM' during the day. Date specified along with time will be ignored.</param>
            <param name="runDays">List of days of a week when to trigger the periodic backup. This is valid only when the
            backup schedule frequency type is weekly.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.TimeBasedBackupScheduleDescription.ScheduleFrequencyType">
            <summary>
            Gets the frequency with which to run the time based backup schedule.
            . Possible values include: 'Invalid', 'Daily', 'Weekly'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.TimeBasedBackupScheduleDescription.RunDays">
            <summary>
            Gets list of days of a week when to trigger the periodic backup. This is valid only when the backup schedule
            frequency type is weekly.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.TimeBasedBackupScheduleDescription.RunTimes">
            <summary>
            Gets represents the list of exact time during the day in ISO8601 format. Like '19:00:00' will represent '7PM'
            during the day. Date specified along with time will be ignored.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.TimeOfDay">
            <summary>
            Defines an hour and minute of the day specified in 24 hour time.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.TimeOfDay.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the TimeOfDay class.
            </summary>
            <param name="hour">Represents the hour of the day. Value must be between 0 and 23 inclusive.</param>
            <param name="minute">Represents the minute of the hour. Value must be between 0 to 59 inclusive.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.TimeOfDay.Hour">
            <summary>
            Gets represents the hour of the day. Value must be between 0 and 23 inclusive.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.TimeOfDay.Minute">
            <summary>
            Gets represents the minute of the hour. Value must be between 0 to 59 inclusive.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.TimeRange">
            <summary>
            Defines a time range in a 24 hour day specified by a start and end time.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.TimeRange.#ctor(Microsoft.ServiceFabric.Common.TimeOfDay,Microsoft.ServiceFabric.Common.TimeOfDay)">
            <summary>
            Initializes a new instance of the TimeRange class.
            </summary>
            <param name="startTime">Defines an hour and minute of the day specified in 24 hour time.</param>
            <param name="endTime">Defines an hour and minute of the day specified in 24 hour time.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.TimeRange.StartTime">
            <summary>
            Gets defines an hour and minute of the day specified in 24 hour time.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.TimeRange.EndTime">
            <summary>
            Gets defines an hour and minute of the day specified in 24 hour time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UniformInt64RangePartitionSchemeDescription">
            <summary>
            Describes a partitioning scheme where an integer range is allocated evenly across a number of partitions.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.UniformInt64RangePartitionSchemeDescription.#ctor(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Initializes a new instance of the UniformInt64RangePartitionSchemeDescription class.
            </summary>
            <param name="count">The number of partitions.</param>
            <param name="lowKey">String indicating the lower bound of the partition key range that
            should be split between the partitions.
            </param>
            <param name="highKey">String indicating the upper bound of the partition key range that
            should be split between the partitions.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UniformInt64RangePartitionSchemeDescription.Count">
            <summary>
            Gets the number of partitions.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UniformInt64RangePartitionSchemeDescription.LowKey">
            <summary>
            Gets string indicating the lower bound of the partition key range that
            should be split between the partitions.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UniformInt64RangePartitionSchemeDescription.HighKey">
            <summary>
            Gets string indicating the upper bound of the partition key range that
            should be split between the partitions.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UnplacedReplicaInformation">
            <summary>
            Contains information for an unplaced replica.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.UnplacedReplicaInformation.#ctor(Microsoft.ServiceFabric.Common.ServiceName,Microsoft.ServiceFabric.Common.PartitionId,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the UnplacedReplicaInformation class.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <param name="partitionId">The ID of the partition.</param>
            <param name="unplacedReplicaDetails">List of reasons due to which a replica cannot be placed.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UnplacedReplicaInformation.ServiceName">
            <summary>
            Gets the name of the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UnplacedReplicaInformation.PartitionId">
            <summary>
            Gets the ID of the partition.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UnplacedReplicaInformation.UnplacedReplicaDetails">
            <summary>
            Gets list of reasons due to which a replica cannot be placed.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UnprovisionApplicationTypeDescriptionInfo">
            <summary>
            Describes the operation to unregister or unprovision an application type and its version that was registered with
            the Service Fabric.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.UnprovisionApplicationTypeDescriptionInfo.#ctor(System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the UnprovisionApplicationTypeDescriptionInfo class.
            </summary>
            <param name="applicationTypeVersion">The version of the application type as defined in the application
            manifest.</param>
            <param name="async">The flag indicating whether or not unprovision should occur asynchronously. When set to true,
            the unprovision operation returns when the request is accepted by the system, and the unprovision operation
            continues without any timeout limit. The default value is false. However, we recommend setting it to true for large
            application packages that were provisioned.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UnprovisionApplicationTypeDescriptionInfo.ApplicationTypeVersion">
            <summary>
            Gets the version of the application type as defined in the application manifest.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UnprovisionApplicationTypeDescriptionInfo.Async">
            <summary>
            Gets the flag indicating whether or not unprovision should occur asynchronously. When set to true, the unprovision
            operation returns when the request is accepted by the system, and the unprovision operation continues without any
            timeout limit. The default value is false. However, we recommend setting it to true for large application packages
            that were provisioned.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UnprovisionFabricDescription">
            <summary>
            Describes the parameters for unprovisioning a cluster.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.UnprovisionFabricDescription.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the UnprovisionFabricDescription class.
            </summary>
            <param name="codeVersion">The cluster code package version.</param>
            <param name="configVersion">The cluster manifest version.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UnprovisionFabricDescription.CodeVersion">
            <summary>
            Gets the cluster code package version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UnprovisionFabricDescription.ConfigVersion">
            <summary>
            Gets the cluster manifest version.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UpdateClusterUpgradeDescription">
            <summary>
            Parameters for updating a cluster upgrade.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.UpdateClusterUpgradeDescription.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.UpgradeType},Microsoft.ServiceFabric.Common.RollingUpgradeUpdateDescription,Microsoft.ServiceFabric.Common.ClusterHealthPolicy,System.Nullable{System.Boolean},Microsoft.ServiceFabric.Common.ClusterUpgradeHealthPolicyObject,Microsoft.ServiceFabric.Common.ApplicationHealthPolicies)">
            <summary>
            Initializes a new instance of the UpdateClusterUpgradeDescription class.
            </summary>
            <param name="upgradeKind">The type of upgrade out of the following possible values. Possible values include:
            'Invalid', 'Rolling', 'Rolling_ForceRestart'</param>
            <param name="updateDescription">Describes the parameters for updating a rolling upgrade of application or
            cluster.</param>
            <param name="clusterHealthPolicy">Defines a health policy used to evaluate the health of the cluster or of a
            cluster node.
            </param>
            <param name="enableDeltaHealthEvaluation">When true, enables delta health evaluation rather than absolute health
            evaluation after completion of each upgrade domain.</param>
            <param name="clusterUpgradeHealthPolicy">Defines a health policy used to evaluate the health of the cluster during
            a cluster upgrade.</param>
            <param name="applicationHealthPolicyMap">Defines the application health policy map used to evaluate the health of
            an application or one of its children entities.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpdateClusterUpgradeDescription.UpgradeKind">
            <summary>
            Gets the type of upgrade out of the following possible values. Possible values include: 'Invalid', 'Rolling',
            'Rolling_ForceRestart'
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpdateClusterUpgradeDescription.UpdateDescription">
            <summary>
            Gets the parameters for updating a rolling upgrade of application or cluster.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpdateClusterUpgradeDescription.ClusterHealthPolicy">
            <summary>
            Gets defines a health policy used to evaluate the health of the cluster or of a cluster node.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpdateClusterUpgradeDescription.EnableDeltaHealthEvaluation">
            <summary>
            Gets when true, enables delta health evaluation rather than absolute health evaluation after completion of each
            upgrade domain.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpdateClusterUpgradeDescription.ClusterUpgradeHealthPolicy">
            <summary>
            Gets defines a health policy used to evaluate the health of the cluster during a cluster upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpdateClusterUpgradeDescription.ApplicationHealthPolicyMap">
            <summary>
            Gets defines the application health policy map used to evaluate the health of an application or one of its children
            entities.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UpdatePartitionLoadResult">
            <summary>
            Specifies result of updating load for specified partitions. The output will be ordered based on the partition ID.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.UpdatePartitionLoadResult.#ctor(Microsoft.ServiceFabric.Common.PartitionId,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the UpdatePartitionLoadResult class.
            </summary>
            <param name="partitionId">Id of the partition.</param>
            <param name="partitionErrorCode">If OperationState is Completed - this is 0.  If OperationState is Faulted - this
            is an error code indicating the reason.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpdatePartitionLoadResult.PartitionId">
            <summary>
            Gets id of the partition.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpdatePartitionLoadResult.PartitionErrorCode">
            <summary>
            Gets if OperationState is Completed - this is 0.  If OperationState is Faulted - this is an error code indicating
            the reason.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UpgradeDomainDeltaNodesCheckHealthEvaluation">
            <summary>
            Represents health evaluation for delta unhealthy cluster nodes in an upgrade domain, containing health evaluations
            for each unhealthy node that impacted current aggregated health state.
            Can be returned during cluster upgrade when cluster aggregated health state is Warning or Error.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.UpgradeDomainDeltaNodesCheckHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the UpgradeDomainDeltaNodesCheckHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="upgradeDomainName">Name of the upgrade domain where nodes health is currently evaluated.</param>
            <param name="baselineErrorCount">Number of upgrade domain nodes with aggregated heath state Error in the health
            store at the beginning of the cluster upgrade.</param>
            <param name="baselineTotalCount">Total number of upgrade domain nodes in the health store at the beginning of the
            cluster upgrade.</param>
            <param name="maxPercentDeltaUnhealthyNodes">Maximum allowed percentage of upgrade domain delta unhealthy nodes from
            the ClusterUpgradeHealthPolicy.</param>
            <param name="totalCount">Total number of upgrade domain nodes in the health store.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the aggregated health state. Includes
            all the unhealthy NodeHealthEvaluation that impacted the aggregated health.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpgradeDomainDeltaNodesCheckHealthEvaluation.UpgradeDomainName">
            <summary>
            Gets name of the upgrade domain where nodes health is currently evaluated.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpgradeDomainDeltaNodesCheckHealthEvaluation.BaselineErrorCount">
            <summary>
            Gets number of upgrade domain nodes with aggregated heath state Error in the health store at the beginning of the
            cluster upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpgradeDomainDeltaNodesCheckHealthEvaluation.BaselineTotalCount">
            <summary>
            Gets total number of upgrade domain nodes in the health store at the beginning of the cluster upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpgradeDomainDeltaNodesCheckHealthEvaluation.MaxPercentDeltaUnhealthyNodes">
            <summary>
            Gets maximum allowed percentage of upgrade domain delta unhealthy nodes from the ClusterUpgradeHealthPolicy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpgradeDomainDeltaNodesCheckHealthEvaluation.TotalCount">
            <summary>
            Gets total number of upgrade domain nodes in the health store.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpgradeDomainDeltaNodesCheckHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy
            NodeHealthEvaluation that impacted the aggregated health.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UpgradeDomainInfo">
            <summary>
            Information about an upgrade domain.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.UpgradeDomainInfo.#ctor(System.String,System.Nullable{Microsoft.ServiceFabric.Common.UpgradeDomainState})">
            <summary>
            Initializes a new instance of the UpgradeDomainInfo class.
            </summary>
            <param name="name">The name of the upgrade domain</param>
            <param name="state">The state of the upgrade domain. Possible values include: 'Invalid', 'Pending', 'InProgress',
            'Completed'</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpgradeDomainInfo.Name">
            <summary>
            Gets the name of the upgrade domain
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpgradeDomainInfo.State">
            <summary>
            Gets the state of the upgrade domain. Possible values include: 'Invalid', 'Pending', 'InProgress', 'Completed'
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UpgradeDomainNodesHealthEvaluation">
            <summary>
            Represents health evaluation for cluster nodes in an upgrade domain, containing health evaluations for each
            unhealthy node that impacted current aggregated health state. Can be returned when evaluating cluster health during
            cluster upgrade and the aggregated health state is either Error or Warning.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.UpgradeDomainNodesHealthEvaluation.#ctor(System.Nullable{Microsoft.ServiceFabric.Common.HealthState},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.HealthEvaluationWrapper})">
            <summary>
            Initializes a new instance of the UpgradeDomainNodesHealthEvaluation class.
            </summary>
            <param name="aggregatedHealthState">The health state of a Service Fabric entity such as Cluster, Node, Application,
            Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
            <param name="description">Description of the health evaluation, which represents a summary of the evaluation
            process.</param>
            <param name="upgradeDomainName">Name of the upgrade domain where nodes health is currently evaluated.</param>
            <param name="maxPercentUnhealthyNodes">Maximum allowed percentage of unhealthy nodes from the
            ClusterHealthPolicy.</param>
            <param name="totalCount">Total number of nodes in the current upgrade domain.</param>
            <param name="unhealthyEvaluations">List of unhealthy evaluations that led to the aggregated health state. Includes
            all the unhealthy NodeHealthEvaluation that impacted the aggregated health.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpgradeDomainNodesHealthEvaluation.UpgradeDomainName">
            <summary>
            Gets name of the upgrade domain where nodes health is currently evaluated.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpgradeDomainNodesHealthEvaluation.MaxPercentUnhealthyNodes">
            <summary>
            Gets maximum allowed percentage of unhealthy nodes from the ClusterHealthPolicy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpgradeDomainNodesHealthEvaluation.TotalCount">
            <summary>
            Gets total number of nodes in the current upgrade domain.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpgradeDomainNodesHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets list of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy
            NodeHealthEvaluation that impacted the aggregated health.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UpgradeDomainState">
            <summary>
            Defines values for UpgradeDomainState.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeDomainState.Invalid">
            <summary>
            Indicates the upgrade domain state is invalid. All Service Fabric enumerations have the invalid type. The value is
            zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeDomainState.Pending">
            <summary>
            The upgrade domain has not started upgrading yet. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeDomainState.InProgress">
            <summary>
            The upgrade domain is being upgraded but not complete yet. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeDomainState.Completed">
            <summary>
            The upgrade domain has completed upgrade. The value is 3.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UpgradeKind">
            <summary>
            Defines values for UpgradeKind.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeKind.Invalid">
            <summary>
            Indicates the upgrade kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeKind.Rolling">
            <summary>
            The upgrade progresses one upgrade domain at a time. The value is 1.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UpgradeMode">
            <summary>
            Defines values for UpgradeMode.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeMode.Invalid">
            <summary>
            Indicates the upgrade mode is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeMode.UnmonitoredAuto">
            <summary>
            The upgrade will proceed automatically without performing any health monitoring. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeMode.UnmonitoredManual">
            <summary>
            The upgrade will stop after completing each upgrade domain, giving the opportunity to manually monitor health
            before proceeding. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeMode.Monitored">
            <summary>
            The upgrade will stop after completing each upgrade domain and automatically monitor health before proceeding. The
            value is 3.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UpgradeOrchestrationServiceState">
            <summary>
            Service state of Service Fabric Upgrade Orchestration Service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.UpgradeOrchestrationServiceState.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UpgradeOrchestrationServiceState class.
            </summary>
            <param name="serviceState">The state of Service Fabric Upgrade Orchestration Service.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpgradeOrchestrationServiceState.ServiceState">
            <summary>
            Gets the state of Service Fabric Upgrade Orchestration Service.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UpgradeOrchestrationServiceStateSummary">
            <summary>
            Service state summary of Service Fabric Upgrade Orchestration Service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.UpgradeOrchestrationServiceStateSummary.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the UpgradeOrchestrationServiceStateSummary class.
            </summary>
            <param name="currentCodeVersion">The current code version of the cluster.</param>
            <param name="currentManifestVersion">The current manifest version of the cluster.</param>
            <param name="targetCodeVersion">The target code version of  the cluster.</param>
            <param name="targetManifestVersion">The target manifest version of the cluster.</param>
            <param name="pendingUpgradeType">The type of the pending upgrade of the cluster.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpgradeOrchestrationServiceStateSummary.CurrentCodeVersion">
            <summary>
            Gets the current code version of the cluster.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpgradeOrchestrationServiceStateSummary.CurrentManifestVersion">
            <summary>
            Gets the current manifest version of the cluster.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpgradeOrchestrationServiceStateSummary.TargetCodeVersion">
            <summary>
            Gets the target code version of  the cluster.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpgradeOrchestrationServiceStateSummary.TargetManifestVersion">
            <summary>
            Gets the target manifest version of the cluster.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UpgradeOrchestrationServiceStateSummary.PendingUpgradeType">
            <summary>
            Gets the type of the pending upgrade of the cluster.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UpgradeSortOrder">
            <summary>
            Defines values for UpgradeSortOrder.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeSortOrder.Invalid">
            <summary>
            Indicates that this sort order is not valid. All Service Fabric enumerations have the invalid type. The value is 0.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeSortOrder.Default">
            <summary>
            Indicates that the default sort order (as specified in cluster manifest) will be used. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeSortOrder.Numeric">
            <summary>
            Indicates that forward numeric sort order (UD names sorted as numbers) will be used. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeSortOrder.Lexicographical">
            <summary>
            Indicates that forward lexicographical sort order (UD names sorted as strings) will be used. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeSortOrder.ReverseNumeric">
            <summary>
            Indicates that reverse numeric sort order (UD names sorted as numbers) will be used. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeSortOrder.ReverseLexicographical">
            <summary>
            Indicates that reverse lexicographical sort order (UD names sorted as strings) will be used. The value is 5.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UpgradeState">
            <summary>
            Defines values for UpgradeState.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeState.Invalid">
            <summary>
            Indicates the upgrade state is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeState.RollingBackInProgress">
            <summary>
            The upgrade is rolling back to the previous version but is not complete yet. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeState.RollingBackCompleted">
            <summary>
            The upgrade has finished rolling back. The value is 2.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeState.RollingForwardPending">
            <summary>
            The current upgrade domain has finished upgrading. The overall upgrade is waiting for an explicit move next request
            in UnmonitoredManual mode or performing health checks in Monitored mode. The value is 3.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeState.RollingForwardInProgress">
            <summary>
            The upgrade is rolling forward to the target version but is not complete yet. The value is 4.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeState.RollingForwardCompleted">
            <summary>
            The upgrade has finished rolling forward. The value is 5.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeState.Failed">
            <summary>
            The upgrade has failed and is unable to execute FailureAction. The value is 6.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UpgradeType">
            <summary>
            Defines values for UpgradeType.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeType.Invalid">
            <summary>
            Indicates the upgrade kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeType.Rolling">
            <summary>
            The upgrade progresses one upgrade domain at a time. The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.UpgradeType.Rolling_ForceRestart">
            <summary>
            The upgrade gets restarted by force. The value is 2.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UploadChunkRange">
            <summary>
            Information about which portion of the file to upload.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.UploadChunkRange.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the UploadChunkRange class.
            </summary>
            <param name="startPosition">The start position of the portion of the file. It's represented by the number of
            bytes.</param>
            <param name="endPosition">The end position of the portion of the file. It's represented by the number of
            bytes.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UploadChunkRange.StartPosition">
            <summary>
            Gets the start position of the portion of the file. It's represented by the number of bytes.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UploadChunkRange.EndPosition">
            <summary>
            Gets the end position of the portion of the file. It's represented by the number of bytes.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UploadSession">
            <summary>
            Information about a image store upload session
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.UploadSession.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.UploadSessionInfo})">
            <summary>
            Initializes a new instance of the UploadSession class.
            </summary>
            <param name="uploadSessions">When querying upload session by upload session ID, the result contains only one upload
            session. When querying upload session by image store relative path, the result might contain multiple upload
            sessions.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UploadSession.UploadSessions">
            <summary>
            Gets when querying upload session by upload session ID, the result contains only one upload session. When querying
            upload session by image store relative path, the result might contain multiple upload sessions.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UploadSessionInfo">
            <summary>
            Information about an image store upload session. A session is associated with a relative path in the image store.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.UploadSessionInfo.#ctor(System.String,System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Common.UploadChunkRange})">
            <summary>
            Initializes a new instance of the UploadSessionInfo class.
            </summary>
            <param name="storeRelativePath">The remote location within image store. This path is relative to the image store
            root.</param>
            <param name="sessionId">A unique ID of the upload session. A session ID can be reused only if the session was
            committed or removed.</param>
            <param name="modifiedDate">The date and time when the upload session was last modified.</param>
            <param name="fileSize">The size in bytes of the uploading file.</param>
            <param name="expectedRanges">List of chunk ranges that image store has not received yet.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UploadSessionInfo.StoreRelativePath">
            <summary>
            Gets the remote location within image store. This path is relative to the image store root.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UploadSessionInfo.SessionId">
            <summary>
            Gets a unique ID of the upload session. A session ID can be reused only if the session was committed or removed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UploadSessionInfo.ModifiedDate">
            <summary>
            Gets the date and time when the upload session was last modified.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UploadSessionInfo.FileSize">
            <summary>
            Gets the size in bytes of the uploading file.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UploadSessionInfo.ExpectedRanges">
            <summary>
            Gets list of chunk ranges that image store has not received yet.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.UsageInfo">
            <summary>
            Information about how much space and how many files in the file system the ImageStore is using in this category
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.UsageInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the UsageInfo class.
            </summary>
            <param name="usedSpace">the size of all files in this category</param>
            <param name="fileCount">the number of all files in this category</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UsageInfo.UsedSpace">
            <summary>
            Gets the size of all files in this category
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.UsageInfo.FileCount">
            <summary>
            Gets the number of all files in this category
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ValidationFailedChaosEvent">
            <summary>
            Chaos event corresponding to a failure during validation.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ValidationFailedChaosEvent.#ctor(System.Nullable{System.DateTime},System.String)">
            <summary>
            Initializes a new instance of the ValidationFailedChaosEvent class.
            </summary>
            <param name="timeStampUtc">The UTC timestamp when this Chaos event was generated.</param>
            <param name="reason">Describes why the ValidationFailedChaosEvent was generated. This may happen because more than
            MaxPercentUnhealthyNodes are unhealthy for more than MaxClusterStabilizationTimeout. This reason will be in the
            Reason property of the ValidationFailedChaosEvent as a string.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.ValidationFailedChaosEvent.Reason">
            <summary>
            Gets why the ValidationFailedChaosEvent was generated. This may happen because more than MaxPercentUnhealthyNodes
            are unhealthy for more than MaxClusterStabilizationTimeout. This reason will be in the Reason property of the
            ValidationFailedChaosEvent as a string.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.VolumeProperties">
            <summary>
            Describes properties of a volume resource.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.VolumeProperties.#ctor(System.String,Microsoft.ServiceFabric.Common.VolumeProviderParametersAzureFile)">
            <summary>
            Initializes a new instance of the VolumeProperties class.
            </summary>
            <param name="description">User readable description of the volume.</param>
            <param name="azureFileParameters">This type describes a volume provided by an Azure Files file share.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.VolumeProperties.Description">
            <summary>
            Gets user readable description of the volume.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.VolumeProperties.Status">
            <summary>
            Gets status of the volume. Possible values include: 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting',
            'Failed'
            
            Status of the resource.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.VolumeProperties.StatusDetails">
            <summary>
            Gets additional information about the current status of the volume.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.VolumeProperties.AzureFileParameters">
            <summary>
            Gets this type describes a volume provided by an Azure Files file share.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.VolumeProvider">
            <summary>
            Defines values for VolumeProvider.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.VolumeProvider.SFAzureFile">
            <summary>
            Provides volumes that are backed by Azure Files.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.VolumeProviderParametersAzureFile">
            <summary>
            This type describes a volume provided by an Azure Files file share.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.VolumeProviderParametersAzureFile.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the VolumeProviderParametersAzureFile class.
            </summary>
            <param name="accountName">Name of the Azure storage account for the File Share.</param>
            <param name="shareName">Name of the Azure Files file share that provides storage for the volume.</param>
            <param name="accountKey">Access key of the Azure storage account for the File Share.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.VolumeProviderParametersAzureFile.AccountName">
            <summary>
            Gets name of the Azure storage account for the File Share.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.VolumeProviderParametersAzureFile.AccountKey">
            <summary>
            Gets access key of the Azure storage account for the File Share.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.VolumeProviderParametersAzureFile.ShareName">
            <summary>
            Gets name of the Azure Files file share that provides storage for the volume.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.VolumeReference">
            <summary>
            Describes a reference to a volume resource.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.VolumeReference.#ctor(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the VolumeReference class.
            </summary>
            <param name="name">Name of the volume being referenced.</param>
            <param name="destinationPath">The path within the container at which the volume should be mounted. Only valid path
            characters are allowed.</param>
            <param name="readOnly">The flag indicating whether the volume is read only. Default is 'false'.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.VolumeReference.Name">
            <summary>
            Gets name of the volume being referenced.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.VolumeReference.ReadOnly">
            <summary>
            Gets the flag indicating whether the volume is read only. Default is 'false'.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.VolumeReference.DestinationPath">
            <summary>
            Gets the path within the container at which the volume should be mounted. Only valid path characters are allowed.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.VolumeResourceDescription">
            <summary>
            This type describes a volume resource.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.VolumeResourceDescription.#ctor(System.String,Microsoft.ServiceFabric.Common.VolumeProperties)">
            <summary>
            Initializes a new instance of the VolumeResourceDescription class.
            </summary>
            <param name="name">Name of the Volume resource.</param>
            <param name="properties">Describes properties of a volume resource.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.VolumeResourceDescription.Name">
            <summary>
            Gets name of the Volume resource.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.VolumeResourceDescription.Properties">
            <summary>
            Gets properties of a volume resource.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.WaitForInbuildReplicaSafetyCheck">
            <summary>
            Safety check that waits for the replica build operation to finish. This indicates that there is a replica that is
            going through the copy or is providing data for building another replica. Bring the node down will abort this copy
            operation which are typically expensive involving data movements.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.WaitForInbuildReplicaSafetyCheck.#ctor(Microsoft.ServiceFabric.Common.PartitionId)">
            <summary>
            Initializes a new instance of the WaitForInbuildReplicaSafetyCheck class.
            </summary>
            <param name="partitionId">Id of the partition which is undergoing the safety check.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.WaitForPrimaryPlacementSafetyCheck">
            <summary>
            Safety check that waits for the primary replica that was moved out of the node due to upgrade to be placed back
            again on that node.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.WaitForPrimaryPlacementSafetyCheck.#ctor(Microsoft.ServiceFabric.Common.PartitionId)">
            <summary>
            Initializes a new instance of the WaitForPrimaryPlacementSafetyCheck class.
            </summary>
            <param name="partitionId">Id of the partition which is undergoing the safety check.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.WaitForPrimarySwapSafetyCheck">
            <summary>
            Safety check that waits for the primary replica to be moved out of the node before starting an upgrade to ensure
            the availability of the primary replica for the partition.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.WaitForPrimarySwapSafetyCheck.#ctor(Microsoft.ServiceFabric.Common.PartitionId)">
            <summary>
            Initializes a new instance of the WaitForPrimarySwapSafetyCheck class.
            </summary>
            <param name="partitionId">Id of the partition which is undergoing the safety check.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.WaitForReconfigurationSafetyCheck">
            <summary>
            Safety check that waits for the current reconfiguration of the partition to be completed before starting an
            upgrade.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.WaitForReconfigurationSafetyCheck.#ctor(Microsoft.ServiceFabric.Common.PartitionId)">
            <summary>
            Initializes a new instance of the WaitForReconfigurationSafetyCheck class.
            </summary>
            <param name="partitionId">Id of the partition which is undergoing the safety check.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.WaitingChaosEvent">
            <summary>
            Describes a Chaos event that gets generated when Chaos is waiting for the cluster to become ready for faulting, for
            example, Chaos may be waiting for the on-going upgrade to finish.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.WaitingChaosEvent.#ctor(System.Nullable{System.DateTime},System.String)">
            <summary>
            Initializes a new instance of the WaitingChaosEvent class.
            </summary>
            <param name="timeStampUtc">The UTC timestamp when this Chaos event was generated.</param>
            <param name="reason">Describes why the WaitingChaosEvent was generated, for example, due to a cluster
            upgrade.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.WaitingChaosEvent.Reason">
            <summary>
            Gets why the WaitingChaosEvent was generated, for example, due to a cluster upgrade.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.NodeName">
            <summary>
            Represents a Service Fabric node name.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.NodeName.Empty">
            <summary>
            A read-only instance of the <see cref="T:Microsoft.ServiceFabric.Common.NodeName"/> class whose value is an empty string.
            </summary>
            <value>Instance of <see cref="T:Microsoft.ServiceFabric.Common.NodeName"/> class whose value is an empty string.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.NodeName"/> class by using the value represented by the specified string.
            </summary>
            <param name="nodeName">A string for the node name.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.NodeName.IsEmpty">
            <summary>
            Gets a value indicating whether this instance of NodeName represents an empty string.
            </summary>
            <value>true if this instance represents an empty string else false.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeName.op_Implicit(System.String)~Microsoft.ServiceFabric.Common.NodeName">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.NodeName"/> class by using the value represented by the specified string.
            </summary>
            <param name="nodeName">A string for the node name.</param>
            <value>New instance of the <see cref="T:Microsoft.ServiceFabric.Common.NodeName"/> class.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeName.op_Equality(Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.NodeName)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Microsoft.ServiceFabric.Common.NodeName"/> objects are equal.
            </summary>
            <param name="name1">uri1 first object to compare.</param>
            <param name="name2">The second object to compare</param>
            <returns>true if name1 and name2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeName.op_Inequality(Microsoft.ServiceFabric.Common.NodeName,Microsoft.ServiceFabric.Common.NodeName)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Microsoft.ServiceFabric.Common.NodeName"/> objects are not equal.
            </summary>
            <param name="name1">The first object to compare.</param>
            <param name="name2">The second object to compare</param>
            <returns>true if name1 and name2 are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeName.ToString">
            <summary>
            Returns a string representation of the value of this instance.
            </summary>
            <returns>string representation of the value of this instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeName.Equals(Microsoft.ServiceFabric.Common.NodeName)">
            <summary>
            Returns a value indicating whether this instance and a specified <see cref="T:Microsoft.ServiceFabric.Common.NodeName"/> object represent the same value.        
            </summary>
            <param name="other">An object to compare to this instance.</param>
            <returns>true if this instance equal to other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeName.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether this instance is equal to a specified object.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns>true if other object is a <see cref="T:Microsoft.ServiceFabric.Common.NodeName"/> that has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.NodeName.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PagedData`1">
            <summary>
            A strongly-typed chunk of a paged dataset.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the items this PagedData contains.</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PagedData`1.#ctor(Microsoft.ServiceFabric.Common.ContinuationToken,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.PagedData`1"/> class.
            </summary>
            <param name="continuationToken">Continuation Token.</param>
            <param name="data">List of data.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PagedData`1.Empty">
            <summary>
            Gets an empty PagedData class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PagedData`1.ContinuationToken">
            <summary>
            Gets a ContinuationToken to get the next set of paged data.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Common.ContinuationToken"/> to get the next set of paged data.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.PagedData`1.Data">
            <summary>
            Gets a segment of data returned in this page of the total dataset.
            </summary>
            <value>Enumerator, which supports a simple iteration over the data.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.PartitionId">
            <summary>
            Identifier for a service partition.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.PartitionId.Empty">
            <summary>
            A read-only instance of the <see cref="T:Microsoft.ServiceFabric.Common.PartitionId"/> class whose value is an empty GUID.
            </summary>
            <value>Instance of <see cref="T:Microsoft.ServiceFabric.Common.PartitionId"/> class whose value is an empty GUID.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionId.#ctor(System.Nullable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.PartitionId"/> class by using the value represented by the specified GUID.
            </summary>
            <param name="id">A GUID value for the partition.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionId.op_Implicit(System.Guid)~Microsoft.ServiceFabric.Common.PartitionId">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.PartitionId"/> class by using the value represented by the specified GUID.
            </summary>
            <param name="id">A GUID value for the partition.</param>
            <value>New instance of the <see cref="T:Microsoft.ServiceFabric.Common.PartitionId"/> class.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionId.op_Equality(Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.PartitionId)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Microsoft.ServiceFabric.Common.PartitionId"/> objects are equal.
            </summary>
            <param name="partitionId1">The first object to compare.</param>z
            <param name="partitionId2">The second object to compare</param>
            <returns>true if partitionId1 and partitionId2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionId.op_Inequality(Microsoft.ServiceFabric.Common.PartitionId,Microsoft.ServiceFabric.Common.PartitionId)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Microsoft.ServiceFabric.Common.PartitionId"/> objects are not equal.
            </summary>
            <param name="partitionId1">The first object to compare.</param>
            <param name="partitionId2">The second object to compare</param>
            <returns>true if partitionId1 and partitionId2 are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionId.Parse(System.String)">
            <summary>
            Creates a PartitionId class instance using the string representation of the GUID passed in as argument.
            </summary>
            <param name="partitionId">The GUID to convert.</param>
            <returns>A class that contains the value that was parsed.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionId.ToString">
            <summary>
            Returns a string representation of the value of this instance.
            </summary>
            <returns>string representation of the value of this instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionId.Equals(Microsoft.ServiceFabric.Common.PartitionId)">
            <summary>
            Returns a value indicating whether this instance and a specified <see cref="T:Microsoft.ServiceFabric.Common.PartitionId"/> object represent the same value.
            </summary>
            <param name="other">An object to compare to this instance.</param>
            <returns>true if this instance equal to other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionId.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether this instance is equal to a specified object.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns>true if other object is a <see cref="T:Microsoft.ServiceFabric.Common.PartitionId"/> that has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.PartitionId.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ReplicaId">
            <summary>
            Identifier for a service replica.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.ReplicaId.Empty">
            <summary>
            A read-only instance of the <see cref="T:Microsoft.ServiceFabric.Common.ReplicaId"/> class whose value is 0.
            </summary>
            <value>Instance of <see cref="T:Microsoft.ServiceFabric.Common.ReplicaId"/> class whose value is 0.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaId.#ctor(System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.ReplicaId"/> class by using the value represented by the specified long.
            </summary>
            <param name="id">A long value for the replica id.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaId.op_Implicit(System.Int64)~Microsoft.ServiceFabric.Common.ReplicaId">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.ReplicaId"/> class by using the value represented by the specified long.
            </summary>
            <param name="id">A long value for the replica id.</param>
            <value>New instance of the <see cref="T:Microsoft.ServiceFabric.Common.ReplicaId"/> class.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaId.op_Equality(Microsoft.ServiceFabric.Common.ReplicaId,Microsoft.ServiceFabric.Common.ReplicaId)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Microsoft.ServiceFabric.Common.ReplicaId"/> objects are equal.
            </summary>
            <param name="replicaId1">The first object to compare.</param>
            <param name="replicaId2">The second object to compare</param>
            <returns>true if replicaId1 and replicaId2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaId.op_Inequality(Microsoft.ServiceFabric.Common.ReplicaId,Microsoft.ServiceFabric.Common.ReplicaId)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Microsoft.ServiceFabric.Common.ReplicaId"/> objects are not equal.
            </summary>
            <param name="replicaId1">The first object to compare.</param>
            <param name="replicaId2">The second object to compare</param>
            <returns>true if replicaId1 and replicaId2 are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaId.Parse(System.String)">
            <summary>
            Creates a ReplicaId class instance using the string representation of the long passed in as argument.
            </summary>
            <param name="replicaId">The long to convert.</param>
            <returns>A class that contains the value that was parsed.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaId.ToString">
            <summary>
            Returns a string representation of the value of this instance.
            </summary>
            <returns>string representation of the value of this instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaId.Equals(Microsoft.ServiceFabric.Common.ReplicaId)">
            <summary>
            Returns a value indicating whether this instance and a specified <see cref="T:Microsoft.ServiceFabric.Common.ReplicaId"/> object represent the same value.        
            </summary>
            <param name="other">An object to compare to this instance.</param>
            <returns>true if this instance equal to other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaId.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether this instance is equal to a specified object.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns>true if other object is a <see cref="T:Microsoft.ServiceFabric.Common.ReplicaId"/> that has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ReplicaId.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Resources.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ClientCertDoesntContainPrivateKey">
            <summary>
              Looks up a localized string similar to Provided client certificate doesn&apos;t contain a private key, please provie a client cert with private key..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ErrorAppNameDoesntBeginWithFabric">
            <summary>
              Looks up a localized string similar to Application name must begin with fabric..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ErrorAppNameHasAuthorityName">
            <summary>
              Looks up a localized string similar to Application name begins with fabric://, it cannot have authority name in it..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ErrorAppNameHasInvalidChars">
            <summary>
              Looks up a localized string similar to Application name has invalid characters, It cannot have following invalid characters {0}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ErrorAppNameHasTrailingSlash">
            <summary>
              Looks up a localized string similar to Application name cannot have a trailing &quot;/&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ErrorCollectionCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Provided collection cannot be empty..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ErrorEmptyList">
            <summary>
              Looks up a localized string similar to {0} cannot be an empty list..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ErrorLessThanInclusiveMax">
            <summary>
              Looks up a localized string similar to Value must be less than or equal to {0}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ErrorLessThanInclusiveMin">
            <summary>
              Looks up a localized string similar to Value must be greater than or equal to {0}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ErrorLocalClaims">
            <summary>
              Looks up a localized string similar to claimsToken cannot be null or empty string or consist only of whitespaces..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ErrorNameDoesntBeginWithFabric">
            <summary>
              Looks up a localized string similar to NameDescription must begin with fabric..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ErrorNameHasAuthorityName">
            <summary>
              Looks up a localized string similar to NameDescription begins with fabric://, it cannot have authority name in it..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ErrorNameHasInvalidChars">
            <summary>
              Looks up a localized string similar to NameDescription has invalid characters, It cannot have following invalid characters {0}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ErrorNameHasTrailingSlash">
            <summary>
              Looks up a localized string similar to NameDescription cannot have a trailing &quot;/&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ErrorOutOfInclusiveRange">
            <summary>
              Looks up a localized string similar to Value must be between {0} and {1}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ErrorServiceNameDoesntBeginWithFabric">
            <summary>
              Looks up a localized string similar to Service name must begin with fabric..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ErrorServiceNameHasAuthorityName">
            <summary>
              Looks up a localized string similar to Service name begins with fabric://, it cannot have authority name in it..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ErrorServiceNameHasInvalidChars">
            <summary>
              Looks up a localized string similar to Service name has invalid characters, It cannot have following invalid characters {0}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Resources.SR.ErrorServiceNameHasTrailingSlash">
            <summary>
              Looks up a localized string similar to Service name cannot have a trailing &quot;/&quot;..
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Security.AzureActiveDirectorySecuritySettings">
            <summary>
            Represents the claim based security credential acquired from Azure Active Directory.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Security.AzureActiveDirectorySecuritySettings.#ctor(System.String,Microsoft.ServiceFabric.Common.Security.RemoteX509SecuritySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.Security.AzureActiveDirectorySecuritySettings" /> class.
            Use this constructor if you have the Azure Active Directory Metadata information to get the claism token from Azure Active Directory.
            </summary>
            <param name="claimsToken">string representation of claims token acquired from STS (security token service).</param>
            <param name="remoteX509SecuritySettings">Security settings to verify remote X509 certificate.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Security.AzureActiveDirectorySecuritySettings.#ctor(System.Func{Microsoft.ServiceFabric.Common.AadMetadata,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}},Microsoft.ServiceFabric.Common.Security.RemoteX509SecuritySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.Security.AzureActiveDirectorySecuritySettings" /> class.
            Use this constructor if you don't have the Azure Active Directory Metadata information, provided delegate will be invoked with AAD metadata of the cluster
            when a claims token is needed by IServiceFabricClient.
            </summary>
            <param name="getClaimsToken">Delegate to get string representation of claims token acquired from Azure Active Directory using <see cref="T:Microsoft.ServiceFabric.Common.AadMetadata"/>.</param>
            <param name="remoteX509SecuritySettings">Security settings to verify remote X509 certificate.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Security.AzureActiveDirectorySecuritySettings.GetClaimsToken">
            <summary>
            Gets the delegate to get string representation of claims token acquired from Azure Active Directory using <see cref = "T:Microsoft.ServiceFabric.Common.AadMetadata" />.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Security.ClaimsSecuritySettings">
            <summary>
            Represents the claim based security credential acquired from STS (security token service).
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Security.ClaimsSecuritySettings.#ctor(System.String,Microsoft.ServiceFabric.Common.Security.RemoteX509SecuritySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.Security.ClaimsSecuritySettings" /> class.
            </summary>
            <param name="claimsToken">string representation of claims token acquired from STS (security token service).</param>
            <param name="remoteX509SecuritySettings">Security settings to verify remote X509 certificate.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Security.ClaimsSecuritySettings.#ctor(Microsoft.ServiceFabric.Common.Security.RemoteX509SecuritySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.Security.ClaimsSecuritySettings" /> class.
            </summary>
            <param name="remoteX509SecuritySettings">Security settings to verify remote X509 certificate.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Security.ClaimsSecuritySettings.ClaimsToken">
            <summary>
            Gets the string representation of claims token acquired from STS (security token service).
            </summary>
            <value>
            The string representation of claims token acquired from STS (security token service).
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Security.ClaimsSecuritySettings.RemoteX509SecuritySettings">
            <summary>
            Gets the settings to validate remote certificate.
            </summary>
            <value>
            <see cref="P:Microsoft.ServiceFabric.Common.Security.ClaimsSecuritySettings.RemoteX509SecuritySettings"/> to validate remote certificate.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Security.DstsClaimsSecuritySettings">
            <summary>
            Represents the claim based security credential acquired from Dsts secure token service..
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Security.DstsClaimsSecuritySettings.#ctor(System.String,Microsoft.ServiceFabric.Common.Security.RemoteX509SecuritySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.Security.DstsClaimsSecuritySettings" /> class.
            Use this constructor if you have the Metadata information to get the claims token from Secure Token Service..
            </summary>
            <param name="claimsToken">string representation of claims token acquired from STS (security token service).</param>
            <param name="remoteX509SecuritySettings">Security settings to verify remote X509 certificate.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Security.DstsClaimsSecuritySettings.#ctor(System.Func{Microsoft.ServiceFabric.Common.TokenServiceMetadata,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}},Microsoft.ServiceFabric.Common.Security.RemoteX509SecuritySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.Security.DstsClaimsSecuritySettings" /> class.
            Use this constructor if you don't have the Metadata information, provided delegate will be invoked with  metadata of the cluster
            when a claims token is needed by IServiceFabricClient.
            </summary>
            <param name="getClaimsToken">Delegate to get string representation of claims token acquired from STS (security token service) using <see cref="T:Microsoft.ServiceFabric.Common.TokenServiceMetadata"/>.</param>
            <param name="remoteX509SecuritySettings">Security settings to verify remote X509 certificate.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Security.DstsClaimsSecuritySettings.GetClaimsToken">
            <summary>
            Gets the delegate to get string representation of claims token acquired from STS (security token service) using <see cref = "T:Microsoft.ServiceFabric.Common.TokenServiceMetadata" />.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Security.ProtectionLevel">
            <summary>
              <para>Enumerates how communication is protected.</para>
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.Security.ProtectionLevel.None">
            <summary>
              <para>Not protected.</para>
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.Security.ProtectionLevel.Sign">
            <summary>
              <para>Only integrity is protected.</para>
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.Security.ProtectionLevel.EncryptAndSign">
            <summary>
              <para>Both confidentiality and integrity are protected.</para>
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Security.RemoteX509SecuritySettings">
            <summary>
            Represents X509 certificate security settings of remote machine.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Security.RemoteX509SecuritySettings.#ctor(System.Collections.Generic.IList{Microsoft.ServiceFabric.Common.Security.X509Name},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.Security.RemoteX509SecuritySettings" /> class.
            </summary>
            <param name="remoteX509Names">Expected <see cref="T:Microsoft.ServiceFabric.Common.Security.X509Name"/> names of server certificate.</param>
            <param name="ignoreCrlOfflineError">Flag to ignore Crl offline error when verifying remote certificate, default value is false.</param>
            <remarks>Use this constructor to verify server certificate with server common name and issuer thumbprint.</remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Security.RemoteX509SecuritySettings.#ctor(System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.Security.RemoteX509SecuritySettings" /> class.
            </summary>
            <param name="remoteCertThumbprints">Certificate thumbprints of server certificate.</param>
            <param name="ignoreCrlOfflineError">Flag to ignore Crl offline error when verifying remote certificate, default value is false.</param>
            <remarks>Use this constructor to verify server certificate with thumbprint.</remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Security.RemoteX509SecuritySettings.RemoteX509Names">
            <summary>
            Gets the list of X509Name to validate remote certificate.
            </summary>
            <value>
            List of <see cref="T:Microsoft.ServiceFabric.Common.Security.X509Name"/> to validate remote certificate.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Security.RemoteX509SecuritySettings.RemoteCertThumbprints">
            <summary>
            Gets the certificate thumbprints of server certificate.
            </summary>
            <value>
            Certificate thumbprints of server certificate.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Security.RemoteX509SecuritySettings.IgnoreCrlOfflineError">
            <summary>
            Gets a value indicating whether to ignore Crl offline error when verifying remote certificate. 
            </summary>
            <value>
            <see cref="T:System.Boolean"/> indicating whether to ignore Crl offline error when verifying remote certificate. 
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Security.SecuritySettings">
            <summary>
            An abstract base class for types that represent security settings for connecting to cluster.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Security.SecuritySettings.#ctor(Microsoft.ServiceFabric.Common.Security.SecurityType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.Security.SecuritySettings"/> class.
            </summary>
            <param name="type">The type of security settings used to secure the Service Fabric cluster.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Security.SecuritySettings.SecurityType">
            <summary>
            Gets the type of security used to secure the Service Fabric cluster – valid values are "none", "x509", "Claims", "Windows".
            </summary>
            <value>
            The type of security to use in order to secure the cluster.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Security.SecurityType">
            <summary>
            Defines how Service Fabric Cluster is secured.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.Security.SecurityType.None">
            <summary>
            Cluster is not secured.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.Security.SecurityType.X509">
            <summary>
            Cluster is secured with X509 certificate.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.Security.SecurityType.Claims">
            <summary>
            Cluster is secured with claims token acquired from Azure Active Directory.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Common.Security.SecurityType.Windows">
            <summary>
            Cluster is secured with Windows credentials.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Security.WindowsSecuritySettings">
            <summary>
            Specifies the security settings for Windows credentials.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Security.WindowsSecuritySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.Security.WindowsSecuritySettings" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Security.X509Name">
            <summary>
              <para>A type to identify X509 certificate with subject common name or DNS name</para>
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Security.X509Name.#ctor(System.String,System.String)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.Security.X509Name"/> class that identifies an X509 certificate</para>
            </summary>
            <param name="name">
              <para>Subject common name or DNS name of X509 certificate</para>
            </param>
            <param name="issuerCertThumbprint">
              <para>Certificate thumbprint to identify issuer. Default value is null which means that issuer thumbprint will not be verified.
              for the certificate found with the common name.</para>
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Security.X509Name.Name">
            <summary>
            Gets the subject common name or DNS name of X509 certificate.
            </summary>
            <value>
              <para>Subject common name or DNS name of X509 certificate</para>
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Security.X509Name.IssuerCertThumbprint">
            <summary>
            Gets the certificate thumbprint to identify issuer.
            </summary>
            <value>
              <para>Certificate thumbprint to identify issuer</para>
            </value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Security.X509Name.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified object is equal to the current object</para>
            </summary>
            <param name="obj">
              <para>The object to compare with the current object</para>
            </param>
            <returns>
              <para>Returns true if the objects are equal, false otherwise.</para>
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Security.X509Name.GetHashCode">
            <summary>
              <para>Compute hash code</para>
            </summary>
            <returns>
              <para>Returns <see cref="T:System.Int32" /> representing the hash code.</para>
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Security.X509Name.Equals(Microsoft.ServiceFabric.Common.Security.X509Name)">
            <summary>
              <para>Determines whether the specified object is equal to the current object</para>
            </summary>
            <param name="other">
              <para>The object to compare with the current object</para>
            </param>
            <returns>
              <para>Returns true if the objects are equal, false otherwise.</para>
            </returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Security.X509SecuritySettings">
            <summary>
            Specifies the security settings that are based upon X509 certificates.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Security.X509SecuritySettings.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,Microsoft.ServiceFabric.Common.Security.RemoteX509SecuritySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.Security.X509SecuritySettings" /> class.
            </summary>
            <param name="clientCertificate">The client certificate for the communication with server.</param>
            <param name="remoteX509SecuritySettings">Security settings to verify remote X509 certificate.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Security.X509SecuritySettings.ClientCertificate">
            <summary>
            Gets the client certificate for communication with server.
            </summary>
            <value><see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> to communicate with server.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Common.Security.X509SecuritySettings.RemoteX509SecuritySettings">
            <summary>
            Gets the settings to validate remote certificate.
            </summary>
            <value>
            <see cref="P:Microsoft.ServiceFabric.Common.Security.X509SecuritySettings.RemoteX509SecuritySettings"/> to validate remote certificate.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.ServiceName">
            <summary>
            Represents a Service Fabric Service name.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.ServiceName"/> class by using the value represented by the specified string.
            </summary>
            <param name="serviceName">A string for the service name.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceName.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.ServiceName"/> class by using the value represented by the specified uri.
            </summary>
            <param name="serviceUri">A uri for the service name.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceName.op_Implicit(System.String)~Microsoft.ServiceFabric.Common.ServiceName">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.ServiceName"/> class by using the value represented by the specified string.
            </summary>
            <param name="serviceName">A string for the service name.</param>
            <value>New instance of the <see cref="T:Microsoft.ServiceFabric.Common.ServiceName"/> class.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.ServiceName.op_Implicit(System.Uri)~Microsoft.ServiceFabric.Common.ServiceName">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Common.ServiceName"/> class by using the value represented by the specified uri.
            </summary>
            <param name="serviceUri">A uri for the service name.</param>
            <value>New instance of the <see cref="T:Microsoft.ServiceFabric.Common.ServiceName"/> class.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Utilities.DirectoryUtilities">
            <summary>
            Utility and extension method for Directory Operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Utilities.DirectoryUtilities.CopyDirectory(System.String,System.String)">
            <summary>
            Recursively copies directory.
            </summary>
            <param name="sourceDir">Absolute path to source directory.</param>
            <param name="destDir">Absolute path to destination directory.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Common.Utilities.FileUtilities">
            <summary>
            Utility and extension methods for file operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Utilities.FileUtilities.GetAbsolutePath(System.String)">
            <summary>
            Gets absolute path.
            </summary>
            <param name="path">Path to get absolute path for.</param>
            <returns>Absolute path for <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Common.Utilities.FileUtilities.HandleLongPath(System.String)">
            <summary>
            Handles long paths for Windows OS.
            </summary>
            <param name="absolutePath">Absolute Path.</param>
            <returns>Path with <paramref name="absolutePath"/> appended to "\\?\" for Windows OS. </returns>
        </member>
    </members>
</doc>
